{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = deepCyclicCopyReplaceable;\n\nvar _prettyFormat = require('pretty-format');\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst builtInObject = [Array, Date, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Map, Set, RegExp, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray];\n\nif (typeof Buffer !== 'undefined') {\n  builtInObject.push(Buffer);\n}\n\nconst isBuiltInObject = object => builtInObject.includes(object.constructor);\n\nconst isMap = value => value.constructor === Map;\n\nfunction deepCyclicCopyReplaceable(value) {\n  let cycles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new WeakMap();\n\n  if (typeof value !== 'object' || value === null) {\n    return value;\n  } else if (cycles.has(value)) {\n    return cycles.get(value);\n  } else if (Array.isArray(value)) {\n    return deepCyclicCopyArray(value, cycles);\n  } else if (isMap(value)) {\n    return deepCyclicCopyMap(value, cycles);\n  } else if (isBuiltInObject(value)) {\n    return value;\n  } else if (_prettyFormat.plugins.DOMElement.test(value)) {\n    return value.cloneNode(true);\n  } else {\n    return deepCyclicCopyObject(value, cycles);\n  }\n}\n\nfunction deepCyclicCopyObject(object, cycles) {\n  const newObject = Object.create(Object.getPrototypeOf(object));\n  const descriptors = Object.getOwnPropertyDescriptors(object);\n  cycles.set(object, newObject);\n  const newDescriptors = [...Object.keys(descriptors), ...Object.getOwnPropertySymbols(descriptors)].reduce( //@ts-expect-error because typescript do not support symbol key in object\n  //https://github.com/microsoft/TypeScript/issues/1863\n  (newDescriptors, key) => {\n    const enumerable = descriptors[key].enumerable;\n    newDescriptors[key] = {\n      configurable: true,\n      enumerable,\n      value: deepCyclicCopyReplaceable( // this accesses the value or getter, depending. We just care about the value anyways, and this allows us to not mess with accessors\n      // it has the side effect of invoking the getter here though, rather than copying it over\n      object[key], cycles),\n      writable: true\n    };\n    return newDescriptors;\n  }, {}); //@ts-expect-error because typescript do not support symbol key in object\n  //https://github.com/microsoft/TypeScript/issues/1863\n\n  return Object.defineProperties(newObject, newDescriptors);\n}\n\nfunction deepCyclicCopyArray(array, cycles) {\n  const newArray = new (Object.getPrototypeOf(array).constructor)(array.length);\n  const length = array.length;\n  cycles.set(array, newArray);\n\n  for (let i = 0; i < length; i++) {\n    newArray[i] = deepCyclicCopyReplaceable(array[i], cycles);\n  }\n\n  return newArray;\n}\n\nfunction deepCyclicCopyMap(map, cycles) {\n  const newMap = new Map();\n  cycles.set(map, newMap);\n  map.forEach((value, key) => {\n    newMap.set(key, deepCyclicCopyReplaceable(value, cycles));\n  });\n  return newMap;\n}","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/mapbox-project/node_modules/jest-matcher-utils/build/deepCyclicCopyReplaceable.js"],"names":["Object","defineProperty","exports","value","default","deepCyclicCopyReplaceable","_prettyFormat","require","builtInObject","Array","Date","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Map","Set","RegExp","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray","Buffer","push","isBuiltInObject","object","includes","constructor","isMap","cycles","WeakMap","has","get","isArray","deepCyclicCopyArray","deepCyclicCopyMap","plugins","DOMElement","test","cloneNode","deepCyclicCopyObject","newObject","create","getPrototypeOf","descriptors","getOwnPropertyDescriptors","set","newDescriptors","keys","getOwnPropertySymbols","reduce","key","enumerable","configurable","writable","defineProperties","array","newArray","length","i","map","newMap","forEach"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,yBAAlB;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,eAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,aAAa,GAAG,CACpBC,KADoB,EAEpBC,IAFoB,EAGpBC,YAHoB,EAIpBC,YAJoB,EAKpBC,UALoB,EAMpBC,UANoB,EAOpBC,SAPoB,EAQpBC,GARoB,EASpBC,GAToB,EAUpBC,MAVoB,EAWpBC,WAXoB,EAYpBC,WAZoB,EAapBC,UAboB,EAcpBC,iBAdoB,CAAtB;;AAiBA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjCf,EAAAA,aAAa,CAACgB,IAAd,CAAmBD,MAAnB;AACD;;AAED,MAAME,eAAe,GAAGC,MAAM,IAAIlB,aAAa,CAACmB,QAAd,CAAuBD,MAAM,CAACE,WAA9B,CAAlC;;AAEA,MAAMC,KAAK,GAAG1B,KAAK,IAAIA,KAAK,CAACyB,WAAN,KAAsBZ,GAA7C;;AAEA,SAASX,yBAAT,CAAmCF,KAAnC,EAAkE;AAAA,MAAxB2B,MAAwB,uEAAf,IAAIC,OAAJ,EAAe;;AAChE,MAAI,OAAO5B,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;AAC/C,WAAOA,KAAP;AACD,GAFD,MAEO,IAAI2B,MAAM,CAACE,GAAP,CAAW7B,KAAX,CAAJ,EAAuB;AAC5B,WAAO2B,MAAM,CAACG,GAAP,CAAW9B,KAAX,CAAP;AACD,GAFM,MAEA,IAAIM,KAAK,CAACyB,OAAN,CAAc/B,KAAd,CAAJ,EAA0B;AAC/B,WAAOgC,mBAAmB,CAAChC,KAAD,EAAQ2B,MAAR,CAA1B;AACD,GAFM,MAEA,IAAID,KAAK,CAAC1B,KAAD,CAAT,EAAkB;AACvB,WAAOiC,iBAAiB,CAACjC,KAAD,EAAQ2B,MAAR,CAAxB;AACD,GAFM,MAEA,IAAIL,eAAe,CAACtB,KAAD,CAAnB,EAA4B;AACjC,WAAOA,KAAP;AACD,GAFM,MAEA,IAAIG,aAAa,CAAC+B,OAAd,CAAsBC,UAAtB,CAAiCC,IAAjC,CAAsCpC,KAAtC,CAAJ,EAAkD;AACvD,WAAOA,KAAK,CAACqC,SAAN,CAAgB,IAAhB,CAAP;AACD,GAFM,MAEA;AACL,WAAOC,oBAAoB,CAACtC,KAAD,EAAQ2B,MAAR,CAA3B;AACD;AACF;;AAED,SAASW,oBAAT,CAA8Bf,MAA9B,EAAsCI,MAAtC,EAA8C;AAC5C,QAAMY,SAAS,GAAG1C,MAAM,CAAC2C,MAAP,CAAc3C,MAAM,CAAC4C,cAAP,CAAsBlB,MAAtB,CAAd,CAAlB;AACA,QAAMmB,WAAW,GAAG7C,MAAM,CAAC8C,yBAAP,CAAiCpB,MAAjC,CAApB;AACAI,EAAAA,MAAM,CAACiB,GAAP,CAAWrB,MAAX,EAAmBgB,SAAnB;AACA,QAAMM,cAAc,GAAG,CACrB,GAAGhD,MAAM,CAACiD,IAAP,CAAYJ,WAAZ,CADkB,EAErB,GAAG7C,MAAM,CAACkD,qBAAP,CAA6BL,WAA7B,CAFkB,EAGrBM,MAHqB,EAIrB;AACA;AACA,GAACH,cAAD,EAAiBI,GAAjB,KAAyB;AACvB,UAAMC,UAAU,GAAGR,WAAW,CAACO,GAAD,CAAX,CAAiBC,UAApC;AACAL,IAAAA,cAAc,CAACI,GAAD,CAAd,GAAsB;AACpBE,MAAAA,YAAY,EAAE,IADM;AAEpBD,MAAAA,UAFoB;AAGpBlD,MAAAA,KAAK,EAAEE,yBAAyB,EAC9B;AACA;AACAqB,MAAAA,MAAM,CAAC0B,GAAD,CAHwB,EAI9BtB,MAJ8B,CAHZ;AASpByB,MAAAA,QAAQ,EAAE;AATU,KAAtB;AAWA,WAAOP,cAAP;AACD,GApBoB,EAqBrB,EArBqB,CAAvB,CAJ4C,CA0BzC;AACH;;AAEA,SAAOhD,MAAM,CAACwD,gBAAP,CAAwBd,SAAxB,EAAmCM,cAAnC,CAAP;AACD;;AAED,SAASb,mBAAT,CAA6BsB,KAA7B,EAAoC3B,MAApC,EAA4C;AAC1C,QAAM4B,QAAQ,GAAG,KAAK1D,MAAM,CAAC4C,cAAP,CAAsBa,KAAtB,EAA6B7B,WAAlC,EAA+C6B,KAAK,CAACE,MAArD,CAAjB;AACA,QAAMA,MAAM,GAAGF,KAAK,CAACE,MAArB;AACA7B,EAAAA,MAAM,CAACiB,GAAP,CAAWU,KAAX,EAAkBC,QAAlB;;AAEA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;AAC/BF,IAAAA,QAAQ,CAACE,CAAD,CAAR,GAAcvD,yBAAyB,CAACoD,KAAK,CAACG,CAAD,CAAN,EAAW9B,MAAX,CAAvC;AACD;;AAED,SAAO4B,QAAP;AACD;;AAED,SAAStB,iBAAT,CAA2ByB,GAA3B,EAAgC/B,MAAhC,EAAwC;AACtC,QAAMgC,MAAM,GAAG,IAAI9C,GAAJ,EAAf;AACAc,EAAAA,MAAM,CAACiB,GAAP,CAAWc,GAAX,EAAgBC,MAAhB;AACAD,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC5D,KAAD,EAAQiD,GAAR,KAAgB;AAC1BU,IAAAA,MAAM,CAACf,GAAP,CAAWK,GAAX,EAAgB/C,yBAAyB,CAACF,KAAD,EAAQ2B,MAAR,CAAzC;AACD,GAFD;AAGA,SAAOgC,MAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = deepCyclicCopyReplaceable;\n\nvar _prettyFormat = require('pretty-format');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst builtInObject = [\n  Array,\n  Date,\n  Float32Array,\n  Float64Array,\n  Int16Array,\n  Int32Array,\n  Int8Array,\n  Map,\n  Set,\n  RegExp,\n  Uint16Array,\n  Uint32Array,\n  Uint8Array,\n  Uint8ClampedArray\n];\n\nif (typeof Buffer !== 'undefined') {\n  builtInObject.push(Buffer);\n}\n\nconst isBuiltInObject = object => builtInObject.includes(object.constructor);\n\nconst isMap = value => value.constructor === Map;\n\nfunction deepCyclicCopyReplaceable(value, cycles = new WeakMap()) {\n  if (typeof value !== 'object' || value === null) {\n    return value;\n  } else if (cycles.has(value)) {\n    return cycles.get(value);\n  } else if (Array.isArray(value)) {\n    return deepCyclicCopyArray(value, cycles);\n  } else if (isMap(value)) {\n    return deepCyclicCopyMap(value, cycles);\n  } else if (isBuiltInObject(value)) {\n    return value;\n  } else if (_prettyFormat.plugins.DOMElement.test(value)) {\n    return value.cloneNode(true);\n  } else {\n    return deepCyclicCopyObject(value, cycles);\n  }\n}\n\nfunction deepCyclicCopyObject(object, cycles) {\n  const newObject = Object.create(Object.getPrototypeOf(object));\n  const descriptors = Object.getOwnPropertyDescriptors(object);\n  cycles.set(object, newObject);\n  const newDescriptors = [\n    ...Object.keys(descriptors),\n    ...Object.getOwnPropertySymbols(descriptors)\n  ].reduce(\n    //@ts-expect-error because typescript do not support symbol key in object\n    //https://github.com/microsoft/TypeScript/issues/1863\n    (newDescriptors, key) => {\n      const enumerable = descriptors[key].enumerable;\n      newDescriptors[key] = {\n        configurable: true,\n        enumerable,\n        value: deepCyclicCopyReplaceable(\n          // this accesses the value or getter, depending. We just care about the value anyways, and this allows us to not mess with accessors\n          // it has the side effect of invoking the getter here though, rather than copying it over\n          object[key],\n          cycles\n        ),\n        writable: true\n      };\n      return newDescriptors;\n    },\n    {}\n  ); //@ts-expect-error because typescript do not support symbol key in object\n  //https://github.com/microsoft/TypeScript/issues/1863\n\n  return Object.defineProperties(newObject, newDescriptors);\n}\n\nfunction deepCyclicCopyArray(array, cycles) {\n  const newArray = new (Object.getPrototypeOf(array).constructor)(array.length);\n  const length = array.length;\n  cycles.set(array, newArray);\n\n  for (let i = 0; i < length; i++) {\n    newArray[i] = deepCyclicCopyReplaceable(array[i], cycles);\n  }\n\n  return newArray;\n}\n\nfunction deepCyclicCopyMap(map, cycles) {\n  const newMap = new Map();\n  cycles.set(map, newMap);\n  map.forEach((value, key) => {\n    newMap.set(key, deepCyclicCopyReplaceable(value, cycles));\n  });\n  return newMap;\n}\n"]},"metadata":{},"sourceType":"script"}