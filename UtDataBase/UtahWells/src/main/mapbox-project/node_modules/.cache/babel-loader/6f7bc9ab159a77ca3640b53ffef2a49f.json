{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nObject.defineProperty(exports, 'DIFF_DELETE', {\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.DIFF_DELETE;\n  }\n});\nObject.defineProperty(exports, 'DIFF_EQUAL', {\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.DIFF_EQUAL;\n  }\n});\nObject.defineProperty(exports, 'DIFF_INSERT', {\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.DIFF_INSERT;\n  }\n});\nObject.defineProperty(exports, 'Diff', {\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.Diff;\n  }\n});\nexports.diff = diff;\nObject.defineProperty(exports, 'diffLinesRaw', {\n  enumerable: true,\n  get: function () {\n    return _diffLines.diffLinesRaw;\n  }\n});\nObject.defineProperty(exports, 'diffLinesUnified', {\n  enumerable: true,\n  get: function () {\n    return _diffLines.diffLinesUnified;\n  }\n});\nObject.defineProperty(exports, 'diffLinesUnified2', {\n  enumerable: true,\n  get: function () {\n    return _diffLines.diffLinesUnified2;\n  }\n});\nObject.defineProperty(exports, 'diffStringsRaw', {\n  enumerable: true,\n  get: function () {\n    return _printDiffs.diffStringsRaw;\n  }\n});\nObject.defineProperty(exports, 'diffStringsUnified', {\n  enumerable: true,\n  get: function () {\n    return _printDiffs.diffStringsUnified;\n  }\n});\n\nvar _chalk = _interopRequireDefault(require('chalk'));\n\nvar _jestGetType = require('jest-get-type');\n\nvar _prettyFormat = require('pretty-format');\n\nvar _cleanupSemantic = require('./cleanupSemantic');\n\nvar _constants = require('./constants');\n\nvar _diffLines = require('./diffLines');\n\nvar _normalizeDiffOptions = require('./normalizeDiffOptions');\n\nvar _printDiffs = require('./printDiffs');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar global = function () {\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  } else if (typeof global !== 'undefined') {\n    return global;\n  } else if (typeof self !== 'undefined') {\n    return self;\n  } else if (typeof window !== 'undefined') {\n    return window;\n  } else {\n    return Function('return this')();\n  }\n}();\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\n\nconst getCommonMessage = (message, options) => {\n  const {\n    commonColor\n  } = (0, _normalizeDiffOptions.normalizeDiffOptions)(options);\n  return commonColor(message);\n};\n\nconst {\n  AsymmetricMatcher,\n  DOMCollection,\n  DOMElement,\n  Immutable,\n  ReactElement,\n  ReactTestComponent\n} = _prettyFormat.plugins;\nconst PLUGINS = [ReactTestComponent, ReactElement, DOMElement, DOMCollection, Immutable, AsymmetricMatcher];\nconst FORMAT_OPTIONS = {\n  plugins: PLUGINS\n};\nconst FALLBACK_FORMAT_OPTIONS = {\n  callToJSON: false,\n  maxDepth: 10,\n  plugins: PLUGINS\n}; // Generate a string that will highlight the difference between two values\n// with green and red. (similar to how github does code diffing)\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nfunction diff(a, b, options) {\n  if (Object.is(a, b)) {\n    return getCommonMessage(_constants.NO_DIFF_MESSAGE, options);\n  }\n\n  const aType = (0, _jestGetType.getType)(a);\n  let expectedType = aType;\n  let omitDifference = false;\n\n  if (aType === 'object' && typeof a.asymmetricMatch === 'function') {\n    if (a.$$typeof !== Symbol.for('jest.asymmetricMatcher')) {\n      // Do not know expected type of user-defined asymmetric matcher.\n      return null;\n    }\n\n    if (typeof a.getExpectedType !== 'function') {\n      // For example, expect.anything() matches either null or undefined\n      return null;\n    }\n\n    expectedType = a.getExpectedType(); // Primitive types boolean and number omit difference below.\n    // For example, omit difference for expect.stringMatching(regexp)\n\n    omitDifference = expectedType === 'string';\n  }\n\n  if (expectedType !== (0, _jestGetType.getType)(b)) {\n    return '  Comparing two different types of values.' + ` Expected ${_chalk.default.green(expectedType)} but ` + `received ${_chalk.default.red((0, _jestGetType.getType)(b))}.`;\n  }\n\n  if (omitDifference) {\n    return null;\n  }\n\n  switch (aType) {\n    case 'string':\n      return (0, _diffLines.diffLinesUnified)(a.split('\\n'), b.split('\\n'), options);\n\n    case 'boolean':\n    case 'number':\n      return comparePrimitive(a, b, options);\n\n    case 'map':\n      return compareObjects(sortMap(a), sortMap(b), options);\n\n    case 'set':\n      return compareObjects(sortSet(a), sortSet(b), options);\n\n    default:\n      return compareObjects(a, b, options);\n  }\n}\n\nfunction comparePrimitive(a, b, options) {\n  const aFormat = (0, _prettyFormat.format)(a, FORMAT_OPTIONS);\n  const bFormat = (0, _prettyFormat.format)(b, FORMAT_OPTIONS);\n  return aFormat === bFormat ? getCommonMessage(_constants.NO_DIFF_MESSAGE, options) : (0, _diffLines.diffLinesUnified)(aFormat.split('\\n'), bFormat.split('\\n'), options);\n}\n\nfunction sortMap(map) {\n  return new Map(Array.from(map.entries()).sort());\n}\n\nfunction sortSet(set) {\n  return new Set(Array.from(set.values()).sort());\n}\n\nfunction compareObjects(a, b, options) {\n  let difference;\n  let hasThrown = false;\n\n  try {\n    const formatOptions = getFormatOptions(FORMAT_OPTIONS, options);\n    difference = getObjectsDifference(a, b, formatOptions, options);\n  } catch {\n    hasThrown = true;\n  }\n\n  const noDiffMessage = getCommonMessage(_constants.NO_DIFF_MESSAGE, options); // If the comparison yields no results, compare again but this time\n  // without calling `toJSON`. It's also possible that toJSON might throw.\n\n  if (difference === undefined || difference === noDiffMessage) {\n    const formatOptions = getFormatOptions(FALLBACK_FORMAT_OPTIONS, options);\n    difference = getObjectsDifference(a, b, formatOptions, options);\n\n    if (difference !== noDiffMessage && !hasThrown) {\n      difference = getCommonMessage(_constants.SIMILAR_MESSAGE, options) + '\\n\\n' + difference;\n    }\n  }\n\n  return difference;\n}\n\nfunction getFormatOptions(formatOptions, options) {\n  const {\n    compareKeys\n  } = (0, _normalizeDiffOptions.normalizeDiffOptions)(options);\n  return { ...formatOptions,\n    compareKeys\n  };\n}\n\nfunction getObjectsDifference(a, b, formatOptions, options) {\n  const formatOptionsZeroIndent = { ...formatOptions,\n    indent: 0\n  };\n  const aCompare = (0, _prettyFormat.format)(a, formatOptionsZeroIndent);\n  const bCompare = (0, _prettyFormat.format)(b, formatOptionsZeroIndent);\n\n  if (aCompare === bCompare) {\n    return getCommonMessage(_constants.NO_DIFF_MESSAGE, options);\n  } else {\n    const aDisplay = (0, _prettyFormat.format)(a, formatOptions);\n    const bDisplay = (0, _prettyFormat.format)(b, formatOptions);\n    return (0, _diffLines.diffLinesUnified2)(aDisplay.split('\\n'), bDisplay.split('\\n'), aCompare.split('\\n'), bCompare.split('\\n'), options);\n  }\n}","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/mapbox-project/node_modules/jest-diff/build/index.js"],"names":["Object","defineProperty","exports","value","enumerable","get","_cleanupSemantic","DIFF_DELETE","DIFF_EQUAL","DIFF_INSERT","Diff","diff","_diffLines","diffLinesRaw","diffLinesUnified","diffLinesUnified2","_printDiffs","diffStringsRaw","diffStringsUnified","_chalk","_interopRequireDefault","require","_jestGetType","_prettyFormat","_constants","_normalizeDiffOptions","obj","__esModule","default","global","globalThis","self","window","Function","Symbol","getCommonMessage","message","options","commonColor","normalizeDiffOptions","AsymmetricMatcher","DOMCollection","DOMElement","Immutable","ReactElement","ReactTestComponent","plugins","PLUGINS","FORMAT_OPTIONS","FALLBACK_FORMAT_OPTIONS","callToJSON","maxDepth","a","b","is","NO_DIFF_MESSAGE","aType","getType","expectedType","omitDifference","asymmetricMatch","$$typeof","for","getExpectedType","green","red","split","comparePrimitive","compareObjects","sortMap","sortSet","aFormat","format","bFormat","map","Map","Array","from","entries","sort","set","Set","values","difference","hasThrown","formatOptions","getFormatOptions","getObjectsDifference","noDiffMessage","undefined","SIMILAR_MESSAGE","compareKeys","formatOptionsZeroIndent","indent","aCompare","bCompare","aDisplay","bDisplay"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAH,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,aAA/B,EAA8C;AAC5CE,EAAAA,UAAU,EAAE,IADgC;AAE5CC,EAAAA,GAAG,EAAE,YAAY;AACf,WAAOC,gBAAgB,CAACC,WAAxB;AACD;AAJ2C,CAA9C;AAMAP,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CE,EAAAA,UAAU,EAAE,IAD+B;AAE3CC,EAAAA,GAAG,EAAE,YAAY;AACf,WAAOC,gBAAgB,CAACE,UAAxB;AACD;AAJ0C,CAA7C;AAMAR,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,aAA/B,EAA8C;AAC5CE,EAAAA,UAAU,EAAE,IADgC;AAE5CC,EAAAA,GAAG,EAAE,YAAY;AACf,WAAOC,gBAAgB,CAACG,WAAxB;AACD;AAJ2C,CAA9C;AAMAT,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,MAA/B,EAAuC;AACrCE,EAAAA,UAAU,EAAE,IADyB;AAErCC,EAAAA,GAAG,EAAE,YAAY;AACf,WAAOC,gBAAgB,CAACI,IAAxB;AACD;AAJoC,CAAvC;AAMAR,OAAO,CAACS,IAAR,GAAeA,IAAf;AACAX,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,cAA/B,EAA+C;AAC7CE,EAAAA,UAAU,EAAE,IADiC;AAE7CC,EAAAA,GAAG,EAAE,YAAY;AACf,WAAOO,UAAU,CAACC,YAAlB;AACD;AAJ4C,CAA/C;AAMAb,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,kBAA/B,EAAmD;AACjDE,EAAAA,UAAU,EAAE,IADqC;AAEjDC,EAAAA,GAAG,EAAE,YAAY;AACf,WAAOO,UAAU,CAACE,gBAAlB;AACD;AAJgD,CAAnD;AAMAd,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,mBAA/B,EAAoD;AAClDE,EAAAA,UAAU,EAAE,IADsC;AAElDC,EAAAA,GAAG,EAAE,YAAY;AACf,WAAOO,UAAU,CAACG,iBAAlB;AACD;AAJiD,CAApD;AAMAf,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,gBAA/B,EAAiD;AAC/CE,EAAAA,UAAU,EAAE,IADmC;AAE/CC,EAAAA,GAAG,EAAE,YAAY;AACf,WAAOW,WAAW,CAACC,cAAnB;AACD;AAJ8C,CAAjD;AAMAjB,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,oBAA/B,EAAqD;AACnDE,EAAAA,UAAU,EAAE,IADuC;AAEnDC,EAAAA,GAAG,EAAE,YAAY;AACf,WAAOW,WAAW,CAACE,kBAAnB;AACD;AAJkD,CAArD;;AAOA,IAAIC,MAAM,GAAGC,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;;AAEA,IAAIC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIE,aAAa,GAAGF,OAAO,CAAC,eAAD,CAA3B;;AAEA,IAAIf,gBAAgB,GAAGe,OAAO,CAAC,mBAAD,CAA9B;;AAEA,IAAIG,UAAU,GAAGH,OAAO,CAAC,aAAD,CAAxB;;AAEA,IAAIT,UAAU,GAAGS,OAAO,CAAC,aAAD,CAAxB;;AAEA,IAAII,qBAAqB,GAAGJ,OAAO,CAAC,wBAAD,CAAnC;;AAEA,IAAIL,WAAW,GAAGK,OAAO,CAAC,cAAD,CAAzB;;AAEA,SAASD,sBAAT,CAAgCM,GAAhC,EAAqC;AACnC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAACE,IAAAA,OAAO,EAAEF;AAAV,GAArC;AACD;;AAED,IAAIG,MAAM,GAAI,YAAY;AACxB,MAAI,OAAOC,UAAP,KAAsB,WAA1B,EAAuC;AACrC,WAAOA,UAAP;AACD,GAFD,MAEO,IAAI,OAAOD,MAAP,KAAkB,WAAtB,EAAmC;AACxC,WAAOA,MAAP;AACD,GAFM,MAEA,IAAI,OAAOE,IAAP,KAAgB,WAApB,EAAiC;AACtC,WAAOA,IAAP;AACD,GAFM,MAEA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACxC,WAAOA,MAAP;AACD,GAFM,MAEA;AACL,WAAOC,QAAQ,CAAC,aAAD,CAAR,EAAP;AACD;AACF,CAZY,EAAb;;AAcA,IAAIC,MAAM,GAAGL,MAAM,CAAC,0BAAD,CAAN,IAAsCA,MAAM,CAACK,MAA1D;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAC7C,QAAM;AAACC,IAAAA;AAAD,MAAgB,CAAC,GAAGb,qBAAqB,CAACc,oBAA1B,EACpBF,OADoB,CAAtB;AAGA,SAAOC,WAAW,CAACF,OAAD,CAAlB;AACD,CALD;;AAOA,MAAM;AACJI,EAAAA,iBADI;AAEJC,EAAAA,aAFI;AAGJC,EAAAA,UAHI;AAIJC,EAAAA,SAJI;AAKJC,EAAAA,YALI;AAMJC,EAAAA;AANI,IAOFtB,aAAa,CAACuB,OAPlB;AAQA,MAAMC,OAAO,GAAG,CACdF,kBADc,EAEdD,YAFc,EAGdF,UAHc,EAIdD,aAJc,EAKdE,SALc,EAMdH,iBANc,CAAhB;AAQA,MAAMQ,cAAc,GAAG;AACrBF,EAAAA,OAAO,EAAEC;AADY,CAAvB;AAGA,MAAME,uBAAuB,GAAG;AAC9BC,EAAAA,UAAU,EAAE,KADkB;AAE9BC,EAAAA,QAAQ,EAAE,EAFoB;AAG9BL,EAAAA,OAAO,EAAEC;AAHqB,CAAhC,C,CAIG;AACH;AACA;;AAEA,SAASpC,IAAT,CAAcyC,CAAd,EAAiBC,CAAjB,EAAoBhB,OAApB,EAA6B;AAC3B,MAAIrC,MAAM,CAACsD,EAAP,CAAUF,CAAV,EAAaC,CAAb,CAAJ,EAAqB;AACnB,WAAOlB,gBAAgB,CAACX,UAAU,CAAC+B,eAAZ,EAA6BlB,OAA7B,CAAvB;AACD;;AAED,QAAMmB,KAAK,GAAG,CAAC,GAAGlC,YAAY,CAACmC,OAAjB,EAA0BL,CAA1B,CAAd;AACA,MAAIM,YAAY,GAAGF,KAAnB;AACA,MAAIG,cAAc,GAAG,KAArB;;AAEA,MAAIH,KAAK,KAAK,QAAV,IAAsB,OAAOJ,CAAC,CAACQ,eAAT,KAA6B,UAAvD,EAAmE;AACjE,QAAIR,CAAC,CAACS,QAAF,KAAe3B,MAAM,CAAC4B,GAAP,CAAW,wBAAX,CAAnB,EAAyD;AACvD;AACA,aAAO,IAAP;AACD;;AAED,QAAI,OAAOV,CAAC,CAACW,eAAT,KAA6B,UAAjC,EAA6C;AAC3C;AACA,aAAO,IAAP;AACD;;AAEDL,IAAAA,YAAY,GAAGN,CAAC,CAACW,eAAF,EAAf,CAXiE,CAW7B;AACpC;;AAEAJ,IAAAA,cAAc,GAAGD,YAAY,KAAK,QAAlC;AACD;;AAED,MAAIA,YAAY,KAAK,CAAC,GAAGpC,YAAY,CAACmC,OAAjB,EAA0BJ,CAA1B,CAArB,EAAmD;AACjD,WACE,+CACC,aAAYlC,MAAM,CAACS,OAAP,CAAeoC,KAAf,CAAqBN,YAArB,CAAmC,OADhD,GAEC,YAAWvC,MAAM,CAACS,OAAP,CAAeqC,GAAf,CAAmB,CAAC,GAAG3C,YAAY,CAACmC,OAAjB,EAA0BJ,CAA1B,CAAnB,CAAiD,GAH/D;AAKD;;AAED,MAAIM,cAAJ,EAAoB;AAClB,WAAO,IAAP;AACD;;AAED,UAAQH,KAAR;AACE,SAAK,QAAL;AACE,aAAO,CAAC,GAAG5C,UAAU,CAACE,gBAAf,EACLsC,CAAC,CAACc,KAAF,CAAQ,IAAR,CADK,EAELb,CAAC,CAACa,KAAF,CAAQ,IAAR,CAFK,EAGL7B,OAHK,CAAP;;AAMF,SAAK,SAAL;AACA,SAAK,QAAL;AACE,aAAO8B,gBAAgB,CAACf,CAAD,EAAIC,CAAJ,EAAOhB,OAAP,CAAvB;;AAEF,SAAK,KAAL;AACE,aAAO+B,cAAc,CAACC,OAAO,CAACjB,CAAD,CAAR,EAAaiB,OAAO,CAAChB,CAAD,CAApB,EAAyBhB,OAAzB,CAArB;;AAEF,SAAK,KAAL;AACE,aAAO+B,cAAc,CAACE,OAAO,CAAClB,CAAD,CAAR,EAAakB,OAAO,CAACjB,CAAD,CAApB,EAAyBhB,OAAzB,CAArB;;AAEF;AACE,aAAO+B,cAAc,CAAChB,CAAD,EAAIC,CAAJ,EAAOhB,OAAP,CAArB;AAnBJ;AAqBD;;AAED,SAAS8B,gBAAT,CAA0Bf,CAA1B,EAA6BC,CAA7B,EAAgChB,OAAhC,EAAyC;AACvC,QAAMkC,OAAO,GAAG,CAAC,GAAGhD,aAAa,CAACiD,MAAlB,EAA0BpB,CAA1B,EAA6BJ,cAA7B,CAAhB;AACA,QAAMyB,OAAO,GAAG,CAAC,GAAGlD,aAAa,CAACiD,MAAlB,EAA0BnB,CAA1B,EAA6BL,cAA7B,CAAhB;AACA,SAAOuB,OAAO,KAAKE,OAAZ,GACHtC,gBAAgB,CAACX,UAAU,CAAC+B,eAAZ,EAA6BlB,OAA7B,CADb,GAEH,CAAC,GAAGzB,UAAU,CAACE,gBAAf,EACEyD,OAAO,CAACL,KAAR,CAAc,IAAd,CADF,EAEEO,OAAO,CAACP,KAAR,CAAc,IAAd,CAFF,EAGE7B,OAHF,CAFJ;AAOD;;AAED,SAASgC,OAAT,CAAiBK,GAAjB,EAAsB;AACpB,SAAO,IAAIC,GAAJ,CAAQC,KAAK,CAACC,IAAN,CAAWH,GAAG,CAACI,OAAJ,EAAX,EAA0BC,IAA1B,EAAR,CAAP;AACD;;AAED,SAAST,OAAT,CAAiBU,GAAjB,EAAsB;AACpB,SAAO,IAAIC,GAAJ,CAAQL,KAAK,CAACC,IAAN,CAAWG,GAAG,CAACE,MAAJ,EAAX,EAAyBH,IAAzB,EAAR,CAAP;AACD;;AAED,SAASX,cAAT,CAAwBhB,CAAxB,EAA2BC,CAA3B,EAA8BhB,OAA9B,EAAuC;AACrC,MAAI8C,UAAJ;AACA,MAAIC,SAAS,GAAG,KAAhB;;AAEA,MAAI;AACF,UAAMC,aAAa,GAAGC,gBAAgB,CAACtC,cAAD,EAAiBX,OAAjB,CAAtC;AACA8C,IAAAA,UAAU,GAAGI,oBAAoB,CAACnC,CAAD,EAAIC,CAAJ,EAAOgC,aAAP,EAAsBhD,OAAtB,CAAjC;AACD,GAHD,CAGE,MAAM;AACN+C,IAAAA,SAAS,GAAG,IAAZ;AACD;;AAED,QAAMI,aAAa,GAAGrD,gBAAgB,CAACX,UAAU,CAAC+B,eAAZ,EAA6BlB,OAA7B,CAAtC,CAXqC,CAWwC;AAC7E;;AAEA,MAAI8C,UAAU,KAAKM,SAAf,IAA4BN,UAAU,KAAKK,aAA/C,EAA8D;AAC5D,UAAMH,aAAa,GAAGC,gBAAgB,CAACrC,uBAAD,EAA0BZ,OAA1B,CAAtC;AACA8C,IAAAA,UAAU,GAAGI,oBAAoB,CAACnC,CAAD,EAAIC,CAAJ,EAAOgC,aAAP,EAAsBhD,OAAtB,CAAjC;;AAEA,QAAI8C,UAAU,KAAKK,aAAf,IAAgC,CAACJ,SAArC,EAAgD;AAC9CD,MAAAA,UAAU,GACRhD,gBAAgB,CAACX,UAAU,CAACkE,eAAZ,EAA6BrD,OAA7B,CAAhB,GACA,MADA,GAEA8C,UAHF;AAID;AACF;;AAED,SAAOA,UAAP;AACD;;AAED,SAASG,gBAAT,CAA0BD,aAA1B,EAAyChD,OAAzC,EAAkD;AAChD,QAAM;AAACsD,IAAAA;AAAD,MAAgB,CAAC,GAAGlE,qBAAqB,CAACc,oBAA1B,EACpBF,OADoB,CAAtB;AAGA,SAAO,EAAC,GAAGgD,aAAJ;AAAmBM,IAAAA;AAAnB,GAAP;AACD;;AAED,SAASJ,oBAAT,CAA8BnC,CAA9B,EAAiCC,CAAjC,EAAoCgC,aAApC,EAAmDhD,OAAnD,EAA4D;AAC1D,QAAMuD,uBAAuB,GAAG,EAAC,GAAGP,aAAJ;AAAmBQ,IAAAA,MAAM,EAAE;AAA3B,GAAhC;AACA,QAAMC,QAAQ,GAAG,CAAC,GAAGvE,aAAa,CAACiD,MAAlB,EAA0BpB,CAA1B,EAA6BwC,uBAA7B,CAAjB;AACA,QAAMG,QAAQ,GAAG,CAAC,GAAGxE,aAAa,CAACiD,MAAlB,EAA0BnB,CAA1B,EAA6BuC,uBAA7B,CAAjB;;AAEA,MAAIE,QAAQ,KAAKC,QAAjB,EAA2B;AACzB,WAAO5D,gBAAgB,CAACX,UAAU,CAAC+B,eAAZ,EAA6BlB,OAA7B,CAAvB;AACD,GAFD,MAEO;AACL,UAAM2D,QAAQ,GAAG,CAAC,GAAGzE,aAAa,CAACiD,MAAlB,EAA0BpB,CAA1B,EAA6BiC,aAA7B,CAAjB;AACA,UAAMY,QAAQ,GAAG,CAAC,GAAG1E,aAAa,CAACiD,MAAlB,EAA0BnB,CAA1B,EAA6BgC,aAA7B,CAAjB;AACA,WAAO,CAAC,GAAGzE,UAAU,CAACG,iBAAf,EACLiF,QAAQ,CAAC9B,KAAT,CAAe,IAAf,CADK,EAEL+B,QAAQ,CAAC/B,KAAT,CAAe,IAAf,CAFK,EAGL4B,QAAQ,CAAC5B,KAAT,CAAe,IAAf,CAHK,EAIL6B,QAAQ,CAAC7B,KAAT,CAAe,IAAf,CAJK,EAKL7B,OALK,CAAP;AAOD;AACF","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nObject.defineProperty(exports, 'DIFF_DELETE', {\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.DIFF_DELETE;\n  }\n});\nObject.defineProperty(exports, 'DIFF_EQUAL', {\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.DIFF_EQUAL;\n  }\n});\nObject.defineProperty(exports, 'DIFF_INSERT', {\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.DIFF_INSERT;\n  }\n});\nObject.defineProperty(exports, 'Diff', {\n  enumerable: true,\n  get: function () {\n    return _cleanupSemantic.Diff;\n  }\n});\nexports.diff = diff;\nObject.defineProperty(exports, 'diffLinesRaw', {\n  enumerable: true,\n  get: function () {\n    return _diffLines.diffLinesRaw;\n  }\n});\nObject.defineProperty(exports, 'diffLinesUnified', {\n  enumerable: true,\n  get: function () {\n    return _diffLines.diffLinesUnified;\n  }\n});\nObject.defineProperty(exports, 'diffLinesUnified2', {\n  enumerable: true,\n  get: function () {\n    return _diffLines.diffLinesUnified2;\n  }\n});\nObject.defineProperty(exports, 'diffStringsRaw', {\n  enumerable: true,\n  get: function () {\n    return _printDiffs.diffStringsRaw;\n  }\n});\nObject.defineProperty(exports, 'diffStringsUnified', {\n  enumerable: true,\n  get: function () {\n    return _printDiffs.diffStringsUnified;\n  }\n});\n\nvar _chalk = _interopRequireDefault(require('chalk'));\n\nvar _jestGetType = require('jest-get-type');\n\nvar _prettyFormat = require('pretty-format');\n\nvar _cleanupSemantic = require('./cleanupSemantic');\n\nvar _constants = require('./constants');\n\nvar _diffLines = require('./diffLines');\n\nvar _normalizeDiffOptions = require('./normalizeDiffOptions');\n\nvar _printDiffs = require('./printDiffs');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nvar global = (function () {\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  } else if (typeof global !== 'undefined') {\n    return global;\n  } else if (typeof self !== 'undefined') {\n    return self;\n  } else if (typeof window !== 'undefined') {\n    return window;\n  } else {\n    return Function('return this')();\n  }\n})();\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\n\nconst getCommonMessage = (message, options) => {\n  const {commonColor} = (0, _normalizeDiffOptions.normalizeDiffOptions)(\n    options\n  );\n  return commonColor(message);\n};\n\nconst {\n  AsymmetricMatcher,\n  DOMCollection,\n  DOMElement,\n  Immutable,\n  ReactElement,\n  ReactTestComponent\n} = _prettyFormat.plugins;\nconst PLUGINS = [\n  ReactTestComponent,\n  ReactElement,\n  DOMElement,\n  DOMCollection,\n  Immutable,\n  AsymmetricMatcher\n];\nconst FORMAT_OPTIONS = {\n  plugins: PLUGINS\n};\nconst FALLBACK_FORMAT_OPTIONS = {\n  callToJSON: false,\n  maxDepth: 10,\n  plugins: PLUGINS\n}; // Generate a string that will highlight the difference between two values\n// with green and red. (similar to how github does code diffing)\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nfunction diff(a, b, options) {\n  if (Object.is(a, b)) {\n    return getCommonMessage(_constants.NO_DIFF_MESSAGE, options);\n  }\n\n  const aType = (0, _jestGetType.getType)(a);\n  let expectedType = aType;\n  let omitDifference = false;\n\n  if (aType === 'object' && typeof a.asymmetricMatch === 'function') {\n    if (a.$$typeof !== Symbol.for('jest.asymmetricMatcher')) {\n      // Do not know expected type of user-defined asymmetric matcher.\n      return null;\n    }\n\n    if (typeof a.getExpectedType !== 'function') {\n      // For example, expect.anything() matches either null or undefined\n      return null;\n    }\n\n    expectedType = a.getExpectedType(); // Primitive types boolean and number omit difference below.\n    // For example, omit difference for expect.stringMatching(regexp)\n\n    omitDifference = expectedType === 'string';\n  }\n\n  if (expectedType !== (0, _jestGetType.getType)(b)) {\n    return (\n      '  Comparing two different types of values.' +\n      ` Expected ${_chalk.default.green(expectedType)} but ` +\n      `received ${_chalk.default.red((0, _jestGetType.getType)(b))}.`\n    );\n  }\n\n  if (omitDifference) {\n    return null;\n  }\n\n  switch (aType) {\n    case 'string':\n      return (0, _diffLines.diffLinesUnified)(\n        a.split('\\n'),\n        b.split('\\n'),\n        options\n      );\n\n    case 'boolean':\n    case 'number':\n      return comparePrimitive(a, b, options);\n\n    case 'map':\n      return compareObjects(sortMap(a), sortMap(b), options);\n\n    case 'set':\n      return compareObjects(sortSet(a), sortSet(b), options);\n\n    default:\n      return compareObjects(a, b, options);\n  }\n}\n\nfunction comparePrimitive(a, b, options) {\n  const aFormat = (0, _prettyFormat.format)(a, FORMAT_OPTIONS);\n  const bFormat = (0, _prettyFormat.format)(b, FORMAT_OPTIONS);\n  return aFormat === bFormat\n    ? getCommonMessage(_constants.NO_DIFF_MESSAGE, options)\n    : (0, _diffLines.diffLinesUnified)(\n        aFormat.split('\\n'),\n        bFormat.split('\\n'),\n        options\n      );\n}\n\nfunction sortMap(map) {\n  return new Map(Array.from(map.entries()).sort());\n}\n\nfunction sortSet(set) {\n  return new Set(Array.from(set.values()).sort());\n}\n\nfunction compareObjects(a, b, options) {\n  let difference;\n  let hasThrown = false;\n\n  try {\n    const formatOptions = getFormatOptions(FORMAT_OPTIONS, options);\n    difference = getObjectsDifference(a, b, formatOptions, options);\n  } catch {\n    hasThrown = true;\n  }\n\n  const noDiffMessage = getCommonMessage(_constants.NO_DIFF_MESSAGE, options); // If the comparison yields no results, compare again but this time\n  // without calling `toJSON`. It's also possible that toJSON might throw.\n\n  if (difference === undefined || difference === noDiffMessage) {\n    const formatOptions = getFormatOptions(FALLBACK_FORMAT_OPTIONS, options);\n    difference = getObjectsDifference(a, b, formatOptions, options);\n\n    if (difference !== noDiffMessage && !hasThrown) {\n      difference =\n        getCommonMessage(_constants.SIMILAR_MESSAGE, options) +\n        '\\n\\n' +\n        difference;\n    }\n  }\n\n  return difference;\n}\n\nfunction getFormatOptions(formatOptions, options) {\n  const {compareKeys} = (0, _normalizeDiffOptions.normalizeDiffOptions)(\n    options\n  );\n  return {...formatOptions, compareKeys};\n}\n\nfunction getObjectsDifference(a, b, formatOptions, options) {\n  const formatOptionsZeroIndent = {...formatOptions, indent: 0};\n  const aCompare = (0, _prettyFormat.format)(a, formatOptionsZeroIndent);\n  const bCompare = (0, _prettyFormat.format)(b, formatOptionsZeroIndent);\n\n  if (aCompare === bCompare) {\n    return getCommonMessage(_constants.NO_DIFF_MESSAGE, options);\n  } else {\n    const aDisplay = (0, _prettyFormat.format)(a, formatOptions);\n    const bDisplay = (0, _prettyFormat.format)(b, formatOptions);\n    return (0, _diffLines.diffLinesUnified2)(\n      aDisplay.split('\\n'),\n      bDisplay.split('\\n'),\n      aCompare.split('\\n'),\n      bCompare.split('\\n'),\n      options\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}