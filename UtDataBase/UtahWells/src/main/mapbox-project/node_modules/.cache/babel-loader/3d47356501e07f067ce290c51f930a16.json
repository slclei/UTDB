{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\n\nvar isEqual = require('deep-equal');\n\nimport diff from './util/diff';\nimport { generateID } from './util/uid';\nimport { withMap } from './context';\nvar types = ['symbol', 'line', 'fill', 'fill-extrusion', 'circle'];\n\nvar toCamelCase = function (str) {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\n    return index === 0 ? letter.toLowerCase() : letter.toUpperCase();\n  }).replace(/[\\s+]|-/g, '');\n};\n\nvar eventToHandler = {\n  mousemove: 'OnMouseMove',\n  mouseenter: 'OnMouseEnter',\n  mouseleave: 'OnMouseLeave',\n  mousedown: 'OnMouseDown',\n  mouseup: 'OnMouseUp',\n  click: 'OnClick'\n};\n\nvar GeoJSONLayer = function (_super) {\n  __extends(GeoJSONLayer, _super);\n\n  function GeoJSONLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.id = _this.props.id || \"geojson-\" + generateID();\n    _this.source = __assign({\n      type: 'geojson'\n    }, _this.props.sourceOptions, {\n      data: _this.props.data\n    });\n    _this.layerIds = [];\n\n    _this.buildLayerId = function (type) {\n      return _this.id + \"-\" + type;\n    };\n\n    _this.createLayer = function (type) {\n      var _a = _this.props,\n          before = _a.before,\n          layerOptions = _a.layerOptions,\n          map = _a.map;\n\n      var layerId = _this.buildLayerId(type);\n\n      _this.layerIds.push(layerId);\n\n      var paint = _this.props[toCamelCase(type) + \"Paint\"] || {};\n      var visibility = Object.keys(paint).length ? 'visible' : 'none';\n      var layout = _this.props[toCamelCase(type) + \"Layout\"] || {\n        visibility: visibility\n      };\n\n      var layer = __assign({\n        id: layerId,\n        source: _this.id,\n        type: type,\n        paint: paint,\n        layout: layout\n      }, layerOptions);\n\n      map.addLayer(layer, before);\n\n      _this.mapLayerMouseHandlers(type);\n    };\n\n    _this.mapLayerMouseHandlers = function (type) {\n      var map = _this.props.map;\n\n      var layerId = _this.buildLayerId(type);\n\n      var events = Object.keys(eventToHandler);\n      events.forEach(function (event) {\n        var handler = _this.props[\"\" + toCamelCase(type) + eventToHandler[event]] || null;\n\n        if (handler) {\n          map.on(event, layerId, handler);\n        }\n      });\n    };\n\n    _this.onStyleDataChange = function () {\n      if (!_this.props.map.getSource(_this.id)) {\n        _this.unbind();\n\n        _this.initialize();\n\n        _this.forceUpdate();\n      }\n    };\n\n    _this.isGeoJSONSource = function (source) {\n      return !!source && typeof source.setData === 'function';\n    };\n\n    return _this;\n  }\n\n  GeoJSONLayer.prototype.initialize = function () {\n    var map = this.props.map;\n    map.addSource(this.id, this.source);\n    this.createLayer('symbol');\n    this.createLayer('line');\n    this.createLayer('fill');\n    this.createLayer('fill-extrusion');\n    this.createLayer('circle');\n  };\n\n  GeoJSONLayer.prototype.unbind = function () {\n    var _this = this;\n\n    var map = this.props.map;\n\n    if (map.getSource(this.id)) {\n      var layers = map.getStyle().layers;\n\n      if (layers) {\n        layers.filter(function (layer) {\n          return layer.source === _this.id;\n        }).forEach(function (layer) {\n          return map.removeLayer(layer.id);\n        });\n      }\n\n      map.removeSource(this.id);\n    }\n\n    types.forEach(function (type) {\n      var events = Object.keys(eventToHandler);\n      events.forEach(function (event) {\n        var prop = toCamelCase(type) + eventToHandler[event];\n\n        if (_this.props[prop]) {\n          map.off(event, _this.buildLayerId(type), _this.props[prop]);\n        }\n      });\n    });\n    this.layerIds.forEach(function (lId) {\n      if (map.getLayer(lId)) {\n        map.removeLayer(lId);\n      }\n    });\n  };\n\n  GeoJSONLayer.prototype.componentDidMount = function () {\n    var map = this.props.map;\n    this.initialize();\n    map.on('styledata', this.onStyleDataChange);\n  };\n\n  GeoJSONLayer.prototype.componentWillUnmount = function () {\n    var map = this.props.map;\n\n    if (!map || !map.getStyle()) {\n      return;\n    }\n\n    map.off('styledata', this.onStyleDataChange);\n    this.unbind();\n  };\n\n  GeoJSONLayer.prototype.componentDidUpdate = function (prevProps) {\n    var _this = this;\n\n    var data = prevProps.data,\n        before = prevProps.before,\n        layerOptions = prevProps.layerOptions,\n        map = prevProps.map;\n    var source = map.getSource(this.id);\n\n    if (!this.isGeoJSONSource(source)) {\n      return;\n    }\n\n    if (this.props.data !== data) {\n      source.setData(this.props.data);\n      this.source = __assign({\n        type: 'geojson'\n      }, this.props.sourceOptions, {\n        data: this.props.data\n      });\n    }\n\n    var layerFilterChanged = this.props.layerOptions && layerOptions && !isEqual(this.props.layerOptions.filter, layerOptions.filter);\n    types.forEach(function (type) {\n      var layerId = _this.buildLayerId(type);\n\n      if (_this.props.layerOptions && layerFilterChanged) {\n        map.setFilter(layerId, _this.props.layerOptions.filter || []);\n      }\n\n      var paintProp = toCamelCase(type) + 'Paint';\n\n      if (!isEqual(prevProps[paintProp], _this.props[paintProp])) {\n        var paintDiff_1 = diff(prevProps[paintProp], _this.props[paintProp]);\n        Object.keys(paintDiff_1).forEach(function (key) {\n          map.setPaintProperty(layerId, key, paintDiff_1[key]);\n        });\n      }\n\n      var layoutProp = toCamelCase(type) + 'Layout';\n\n      if (!isEqual(prevProps[layoutProp], _this.props[layoutProp])) {\n        var layoutDiff_1 = diff(prevProps[layoutProp], _this.props[layoutProp]);\n        Object.keys(layoutDiff_1).forEach(function (key) {\n          map.setLayoutProperty(layerId, key, layoutDiff_1[key]);\n        });\n      }\n\n      var events = Object.keys(eventToHandler);\n      events.forEach(function (event) {\n        var prop = toCamelCase(type) + eventToHandler[event];\n\n        if (prevProps[prop] !== _this.props[prop]) {\n          if (prevProps[prop]) {\n            map.off(event, layerId, prevProps[prop]);\n          }\n\n          if (_this.props[prop]) {\n            map.on(event, layerId, _this.props[prop]);\n          }\n        }\n      });\n\n      if (before !== _this.props.before) {\n        map.moveLayer(layerId, _this.props.before);\n      }\n    });\n  };\n\n  GeoJSONLayer.prototype.render = function () {\n    return null;\n  };\n\n  return GeoJSONLayer;\n}(React.Component);\n\nexport { GeoJSONLayer };\nexport default withMap(GeoJSONLayer);","map":{"version":3,"mappings":"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","names":["React","isEqual","require","diff","generateID","withMap","types","toCamelCase","str","replace","letter","index","toLowerCase","toUpperCase","eventToHandler","mousemove","mouseenter","mouseleave","mousedown","mouseup","click","__extends","_this","props","id","__assign","type","sourceOptions","data","before","layerOptions","map","layerId","buildLayerId","layerIds","push","paint","visibility","Object","keys","length","layout","layer","source","addLayer","mapLayerMouseHandlers","events","forEach","handler","event","on","getSource","unbind","initialize","forceUpdate","setData","GeoJSONLayer","addSource","createLayer","layers","filter","removeLayer","removeSource","prop","off","getLayer","lId","onStyleDataChange","getStyle","prevProps","isGeoJSONSource","layerFilterChanged","setFilter","paintProp","paintDiff_1","setPaintProperty","key","layoutProp","layoutDiff_1","setLayoutProperty","moveLayer","Component"],"sources":["D:\\Github\\CUSP_DataBase\\CUSP_DB\\src\\main\\mapbox-project\\node_modules\\react-mapbox-gl\\src\\geojson-layer.ts"],"sourcesContent":["import * as React from 'react';\nimport * as MapboxGL from 'mapbox-gl';\nconst isEqual = require('deep-equal'); //tslint:disable-line\nimport diff from './util/diff';\nimport { generateID } from './util/uid';\nimport { Sources, LayerType } from './util/types';\nimport { withMap } from './context';\n\nconst types = ['symbol', 'line', 'fill', 'fill-extrusion', 'circle'];\nconst toCamelCase = (str: string) =>\n  str\n    .replace(\n      /(?:^\\w|[A-Z]|\\b\\w)/g,\n      (letter, index) =>\n        index === 0 ? letter.toLowerCase() : letter.toUpperCase()\n    )\n    .replace(/[\\s+]|-/g, '');\n\nconst eventToHandler = {\n  mousemove: 'OnMouseMove',\n  mouseenter: 'OnMouseEnter',\n  mouseleave: 'OnMouseLeave',\n  mousedown: 'OnMouseDown',\n  mouseup: 'OnMouseUp',\n  click: 'OnClick'\n};\n\n// tslint:disable-next-line:no-any\nexport type MouseEvent = (evt: any) => any;\n\nexport interface LineProps {\n  linePaint?: MapboxGL.LinePaint;\n  lineLayout?: MapboxGL.LineLayout;\n  lineOnMouseMove?: MouseEvent;\n  lineOnMouseEnter?: MouseEvent;\n  lineOnMouseLeave?: MouseEvent;\n  lineOnMouseDown?: MouseEvent;\n  lineOnMouseUp?: MouseEvent;\n  lineOnClick?: MouseEvent;\n}\n\nexport interface CircleProps {\n  circlePaint?: MapboxGL.CirclePaint;\n  circleLayout?: MapboxGL.CircleLayout;\n  circleOnMouseMove?: MouseEvent;\n  circleOnMouseEnter?: MouseEvent;\n  circleOnMouseLeave?: MouseEvent;\n  circleOnMouseDown?: MouseEvent;\n  circleOnMouseUp?: MouseEvent;\n  circleOnClick?: MouseEvent;\n}\n\nexport interface SymbolProps {\n  symbolLayout?: MapboxGL.SymbolLayout;\n  symbolPaint?: MapboxGL.SymbolPaint;\n  symbolOnMouseMove?: MouseEvent;\n  symbolOnMouseEnter?: MouseEvent;\n  symbolOnMouseLeave?: MouseEvent;\n  symbolOnMouseDown?: MouseEvent;\n  symbolOnMouseUp?: MouseEvent;\n  symbolOnClick?: MouseEvent;\n}\n\nexport interface FillProps {\n  fillLayout?: MapboxGL.FillLayout;\n  fillPaint?: MapboxGL.FillPaint;\n  fillOnMouseMove?: MouseEvent;\n  fillOnMouseEnter?: MouseEvent;\n  fillOnMouseLeave?: MouseEvent;\n  fillOnMouseDown?: MouseEvent;\n  fillOnMouseUp?: MouseEvent;\n  fillOnClick?: MouseEvent;\n}\n\nexport interface FillExtrusionProps {\n  fillExtrusionLayout?: MapboxGL.FillExtrusionLayout;\n  fillExtrusionPaint?: MapboxGL.FillExtrusionPaint;\n  fillExtrusionOnMouseMove?: MouseEvent;\n  fillExtrusionOnMouseEnter?: MouseEvent;\n  fillExtrusionOnMouseLeave?: MouseEvent;\n  fillExtrusionOnMouseDown?: MouseEvent;\n  fillExtrusionOnMouseUp?: MouseEvent;\n  fillExtrusionOnClick?: MouseEvent;\n}\n\nexport interface Props\n  extends LineProps,\n    CircleProps,\n    SymbolProps,\n    FillProps,\n    FillExtrusionProps {\n  id?: string;\n  data:\n    | GeoJSON.Feature<GeoJSON.Geometry, GeoJSON.GeoJsonProperties>\n    | GeoJSON.FeatureCollection<GeoJSON.Geometry>\n    | string;\n  layerOptions?: MapboxGL.Layer;\n  sourceOptions?:\n    | MapboxGL.VectorSource\n    | MapboxGL.RasterSource\n    | MapboxGL.GeoJSONSource\n    | MapboxGL.GeoJSONSourceRaw;\n  before?: string;\n  map: MapboxGL.Map;\n}\n\ntype MapboxEventTypes = Array<keyof MapboxGL.MapLayerEventType>;\n\ntype Paints =\n  | MapboxGL.LinePaint\n  | MapboxGL.SymbolPaint\n  | MapboxGL.CirclePaint\n  | MapboxGL.FillExtrusionPaint;\ntype Layouts =\n  | MapboxGL.FillLayout\n  | MapboxGL.LineLayout\n  | MapboxGL.CircleLayout\n  | MapboxGL.FillExtrusionLayout;\n\nexport class GeoJSONLayer extends React.Component<Props> {\n  private id: string = this.props.id || `geojson-${generateID()}`;\n\n  // TODO: Refactor to use defaultProps\n  private source: Sources = {\n    type: 'geojson',\n    ...this.props.sourceOptions,\n    data: this.props.data\n    // tslint:disable-next-line:no-any\n  } as any;\n\n  private layerIds: string[] = [];\n\n  private buildLayerId = (type: string) => {\n    return `${this.id}-${type}`;\n  };\n\n  private createLayer = (type: LayerType) => {\n    const { before, layerOptions, map } = this.props;\n\n    const layerId = this.buildLayerId(type);\n    this.layerIds.push(layerId);\n\n    const paint: Paints = this.props[`${toCamelCase(type)}Paint`] || {};\n\n    // default undefined layers to invisible\n    const visibility = Object.keys(paint).length ? 'visible' : 'none';\n    const layout: Layouts = this.props[`${toCamelCase(type)}Layout`] || {\n      visibility\n    };\n\n    const layer: MapboxGL.Layer = {\n      id: layerId,\n      source: this.id,\n      // TODO: Fix mapbox-gl types\n      // tslint:disable-next-line:no-any\n      type: type as any,\n      // TODO: Fix mapbox-gl types\n      // tslint:disable-next-line:no-any\n      paint: paint as any,\n      layout,\n      ...layerOptions\n    };\n\n    map.addLayer(layer, before);\n\n    this.mapLayerMouseHandlers(type);\n  };\n\n  private mapLayerMouseHandlers = (type: string) => {\n    const { map } = this.props;\n\n    const layerId = this.buildLayerId(type);\n\n    const events = Object.keys(eventToHandler) as MapboxEventTypes;\n\n    events.forEach(event => {\n      const handler =\n        this.props[`${toCamelCase(type)}${eventToHandler[event]}`] || null;\n\n      if (handler) {\n        map.on(event, layerId, handler);\n      }\n    });\n  };\n\n  private onStyleDataChange = () => {\n    // if the style of the map has been updated and we don't have layer anymore,\n    // add it back to the map and force re-rendering to redraw it\n    if (!this.props.map.getSource(this.id)) {\n      this.unbind();\n      this.initialize();\n      this.forceUpdate();\n    }\n  };\n\n  private initialize() {\n    const { map } = this.props;\n\n    map.addSource(this.id, this.source);\n\n    this.createLayer('symbol');\n    this.createLayer('line');\n    this.createLayer('fill');\n    this.createLayer('fill-extrusion');\n    this.createLayer('circle');\n  }\n\n  private unbind() {\n    const { map } = this.props;\n\n    if (map.getSource(this.id)) {\n      const { layers } = map.getStyle();\n\n      if (layers) {\n        layers\n          .filter(layer => layer.source === this.id)\n          .forEach(layer => map.removeLayer(layer.id));\n      }\n\n      map.removeSource(this.id);\n    }\n\n    types.forEach(type => {\n      const events = Object.keys(eventToHandler) as MapboxEventTypes;\n      events.forEach(event => {\n        const prop = toCamelCase(type) + eventToHandler[event];\n\n        if (this.props[prop]) {\n          map.off(event, this.buildLayerId(type), this.props[prop]);\n        }\n      });\n    });\n\n    this.layerIds.forEach(lId => {\n      if (map.getLayer(lId)) {\n        map.removeLayer(lId);\n      }\n    });\n  }\n\n  public componentDidMount() {\n    const { map } = this.props;\n    this.initialize();\n    map.on('styledata', this.onStyleDataChange);\n  }\n\n  public componentWillUnmount() {\n    const { map } = this.props;\n\n    if (!map || !map.getStyle()) {\n      return;\n    }\n\n    map.off('styledata', this.onStyleDataChange);\n\n    this.unbind();\n  }\n\n  public isGeoJSONSource = (\n    source?: Sources\n  ): source is MapboxGL.GeoJSONSource =>\n    !!source &&\n    typeof (source as MapboxGL.GeoJSONSource).setData === 'function';\n\n  public componentDidUpdate(prevProps: Props) {\n    const { data, before, layerOptions, map } = prevProps;\n    const source = map.getSource(this.id);\n    if (!this.isGeoJSONSource(source)) {\n      return;\n    }\n\n    if (this.props.data !== data) {\n      source.setData(this.props.data);\n\n      this.source = {\n        type: 'geojson',\n        ...this.props.sourceOptions,\n        data: this.props.data\n        // tslint:disable-next-line:no-any\n      } as any;\n    }\n\n    const layerFilterChanged =\n      this.props.layerOptions &&\n      layerOptions &&\n      !isEqual(this.props.layerOptions.filter, layerOptions.filter);\n\n    types.forEach(type => {\n      const layerId = this.buildLayerId(type);\n\n      if (this.props.layerOptions && layerFilterChanged) {\n        map.setFilter(layerId, this.props.layerOptions.filter || []);\n      }\n\n      const paintProp = toCamelCase(type) + 'Paint';\n\n      if (!isEqual(prevProps[paintProp], this.props[paintProp])) {\n        const paintDiff = diff(prevProps[paintProp], this.props[paintProp]);\n\n        Object.keys(paintDiff).forEach(key => {\n          map.setPaintProperty(layerId, key, paintDiff[key]);\n        });\n      }\n\n      const layoutProp = toCamelCase(type) + 'Layout';\n\n      if (!isEqual(prevProps[layoutProp], this.props[layoutProp])) {\n        const layoutDiff = diff(prevProps[layoutProp], this.props[layoutProp]);\n\n        Object.keys(layoutDiff).forEach(key => {\n          map.setLayoutProperty(layerId, key, layoutDiff[key]);\n        });\n      }\n\n      const events = Object.keys(eventToHandler) as MapboxEventTypes;\n\n      events.forEach(event => {\n        const prop = toCamelCase(type) + eventToHandler[event];\n\n        if (prevProps[prop] !== this.props[prop]) {\n          if (prevProps[prop]) {\n            map.off(event, layerId, prevProps[prop]);\n          }\n\n          if (this.props[prop]) {\n            map.on(event, layerId, this.props[prop]);\n          }\n        }\n      });\n\n      if (before !== this.props.before) {\n        map.moveLayer(layerId, this.props.before);\n      }\n    });\n  }\n\n  public render() {\n    return null;\n  }\n}\n\nexport default withMap(GeoJSONLayer);\n"]},"metadata":{},"sourceType":"module"}