{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { withMap } from './context';\n\nvar Source = function (_super) {\n  __extends(Source, _super);\n\n  function Source() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.id = _this.props.id;\n\n    _this.onStyleDataChange = function () {\n      if (!_this.props.map.getLayer(_this.id)) {\n        _this.initialize();\n\n        _this.forceUpdate();\n      }\n    };\n\n    _this.initialize = function () {\n      var map = _this.props.map;\n      var _a = _this.props,\n          geoJsonSource = _a.geoJsonSource,\n          tileJsonSource = _a.tileJsonSource,\n          onSourceAdded = _a.onSourceAdded;\n\n      if (!map.getSource(_this.id) && (geoJsonSource || tileJsonSource)) {\n        if (geoJsonSource) {\n          map.addSource(_this.id, geoJsonSource);\n        } else if (tileJsonSource) {\n          map.addSource(_this.id, tileJsonSource);\n        }\n\n        map.on('sourcedata', _this.onData);\n\n        if (onSourceAdded) {\n          onSourceAdded(map.getSource(_this.id));\n        }\n      }\n    };\n\n    _this.onData = function () {\n      var map = _this.props.map;\n      var source = map.getSource(_this.props.id);\n\n      if (!source || !map.isSourceLoaded(_this.props.id)) {\n        return;\n      }\n\n      var onSourceLoaded = _this.props.onSourceLoaded;\n\n      if (source && onSourceLoaded) {\n        onSourceLoaded(source);\n      }\n\n      if (source && _this.props.geoJsonSource && _this.props.geoJsonSource.data) {\n        source.setData(_this.props.geoJsonSource.data);\n      }\n\n      map.off('sourcedata', _this.onData);\n    };\n\n    return _this;\n  }\n\n  Source.prototype.componentDidMount = function () {\n    var map = this.props.map;\n    map.on('styledata', this.onStyleDataChange);\n    this.initialize();\n  };\n\n  Source.prototype.removeSource = function () {\n    var _this = this;\n\n    var map = this.props.map;\n\n    if (map.getSource(this.id)) {\n      var _a = map.getStyle().layers,\n          layers_1 = _a === void 0 ? [] : _a;\n      layers_1 = layers_1.map(function (layer, idx) {\n        var before = (layers_1[idx + 1] || {\n          id: undefined\n        }).id;\n        return __assign({}, layer, {\n          before: before\n        });\n      }).filter(function (layer) {\n        return layer.source === _this.id;\n      });\n      layers_1.forEach(function (layer) {\n        return map.removeLayer(layer.id);\n      });\n      map.removeSource(this.id);\n      return layers_1.reverse();\n    }\n\n    return [];\n  };\n\n  Source.prototype.componentWillUnmount = function () {\n    var map = this.props.map;\n\n    if (!map || !map.getStyle()) {\n      return;\n    }\n\n    map.off('styledata', this.onStyleDataChange);\n    this.removeSource();\n  };\n\n  Source.prototype.componentDidUpdate = function (prevProps) {\n    var geoJsonSource = prevProps.geoJsonSource,\n        tileJsonSource = prevProps.tileJsonSource,\n        map = prevProps.map;\n    var source = map.getSource(this.id);\n\n    if (tileJsonSource && this.props.tileJsonSource) {\n      var urlUpdated = false;\n      var tilesUpdated = false;\n\n      if (source && source.type === 'vector') {\n        var hasNewSourceUrl = tileJsonSource.url !== this.props.tileJsonSource.url;\n\n        if (hasNewSourceUrl && this.props.tileJsonSource.url !== undefined) {\n          source.setUrl(this.props.tileJsonSource.url);\n          urlUpdated = true;\n        }\n\n        var hasNewSourceTiles = tileJsonSource.tiles !== this.props.tileJsonSource.tiles;\n\n        if (hasNewSourceTiles && this.props.tileJsonSource.tiles !== undefined) {\n          source.setTiles(this.props.tileJsonSource.tiles);\n          tilesUpdated = true;\n        }\n      }\n\n      var hasNewTilesSource = !urlUpdated && tileJsonSource.url !== this.props.tileJsonSource.url || !tilesUpdated && tileJsonSource.tiles !== this.props.tileJsonSource.tiles || tileJsonSource.minzoom !== this.props.tileJsonSource.minzoom || tileJsonSource.maxzoom !== this.props.tileJsonSource.maxzoom;\n\n      if (hasNewTilesSource) {\n        var layers = this.removeSource();\n        map.addSource(this.id, this.props.tileJsonSource);\n        layers.forEach(function (layer) {\n          return map.addLayer(layer, layer.before);\n        });\n      }\n    }\n\n    if (geoJsonSource && this.props.geoJsonSource && this.props.geoJsonSource.data !== geoJsonSource.data && this.props.geoJsonSource.data && source && source.type === 'geojson') {\n      source.setData(this.props.geoJsonSource.data);\n    }\n  };\n\n  Source.prototype.render = function () {\n    return null;\n  };\n\n  return Source;\n}(React.Component);\n\nexport { Source };\nexport default withMap(Source);","map":{"version":3,"mappings":"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","names":["React","withMap","__extends","_this","props","id","map","getLayer","initialize","forceUpdate","geoJsonSource","tileJsonSource","onSourceAdded","getSource","addSource","on","onData","source","isSourceLoaded","onSourceLoaded","data","setData","off","Source","onStyleDataChange","layers_1","layer","idx","before","filter","forEach","removeLayer","removeSource","reverse","getStyle","prevProps","urlUpdated","tilesUpdated","type","hasNewSourceUrl","url","undefined","setUrl","hasNewSourceTiles","tiles","setTiles","hasNewTilesSource","minzoom","maxzoom","layers","addLayer","Component"],"sources":["D:\\Github\\CUSP_DataBase\\CUSP_DB\\src\\main\\mapbox-project\\node_modules\\react-mapbox-gl\\src\\source.ts"],"sourcesContent":["import * as React from 'react';\nimport { Map, GeoJSONSource, GeoJSONSourceRaw, Layer } from 'mapbox-gl';\nimport { TilesJson } from './util/types';\nimport { withMap } from './context';\n\nexport interface Props {\n  id: string;\n  geoJsonSource?: GeoJSONSourceRaw;\n  tileJsonSource?: TilesJson;\n  map: Map;\n  onSourceAdded?: (source: GeoJSONSource | TilesJson) => void;\n  onSourceLoaded?: (source: GeoJSONSource | TilesJson) => void;\n}\n\nexport type LayerWithBefore = Layer & { before?: string };\n\nexport class Source extends React.Component<Props> {\n  private id = this.props.id;\n\n  private onStyleDataChange = () => {\n    // if the style of the map has been updated we won't have any sources anymore,\n    // add it back to the map and force re-rendering to redraw it\n    if (!this.props.map.getLayer(this.id)) {\n      this.initialize();\n      this.forceUpdate();\n    }\n  };\n\n  public componentDidMount() {\n    const { map } = this.props;\n\n    map.on('styledata', this.onStyleDataChange);\n    this.initialize();\n  }\n\n  private initialize = () => {\n    const { map } = this.props;\n    const { geoJsonSource, tileJsonSource, onSourceAdded } = this.props;\n    if (!map.getSource(this.id) && (geoJsonSource || tileJsonSource)) {\n      if (geoJsonSource) {\n        map.addSource(this.id, geoJsonSource);\n      } else if (tileJsonSource) {\n        map.addSource(this.id, tileJsonSource);\n      }\n\n      map.on('sourcedata', this.onData);\n\n      if (onSourceAdded) {\n        onSourceAdded(map.getSource(this.id) as GeoJSONSource | TilesJson);\n      }\n    }\n  };\n\n  private onData = () => {\n    const { map } = this.props;\n\n    const source = map.getSource(this.props.id) as GeoJSONSource;\n    if (!source || !map.isSourceLoaded(this.props.id)) {\n      return;\n    }\n\n    const { onSourceLoaded } = this.props;\n    if (source && onSourceLoaded) {\n      onSourceLoaded(source);\n    }\n    // Will fix datasource being empty\n    if (source && this.props.geoJsonSource && this.props.geoJsonSource.data) {\n      source.setData(this.props.geoJsonSource.data);\n    }\n    map.off('sourcedata', this.onData);\n  };\n\n  public removeSource(): LayerWithBefore[] {\n    const { map } = this.props;\n\n    if (map.getSource(this.id)) {\n      let { layers = [] } = map.getStyle();\n\n      layers = layers\n        .map((layer, idx): LayerWithBefore => {\n          const { id: before } = layers[idx + 1] || { id: undefined };\n          return { ...layer, before };\n        })\n        .filter(layer => layer.source === this.id);\n\n      layers.forEach(layer => map.removeLayer(layer.id));\n\n      map.removeSource(this.id);\n\n      return layers.reverse();\n    }\n\n    return [];\n  }\n\n  public componentWillUnmount() {\n    const { map } = this.props;\n\n    if (!map || !map.getStyle()) {\n      return;\n    }\n\n    map.off('styledata', this.onStyleDataChange);\n    this.removeSource();\n  }\n\n  public componentDidUpdate(prevProps: Props) {\n    const { geoJsonSource, tileJsonSource, map } = prevProps;\n    const source = map.getSource(this.id);\n\n    // Update tilesJsonSource\n    if (tileJsonSource && this.props.tileJsonSource) {\n      let urlUpdated = false;\n      let tilesUpdated = false;\n\n      if (source && source.type === 'vector') {\n        const hasNewSourceUrl =\n          tileJsonSource.url !== this.props.tileJsonSource.url;\n\n        if (hasNewSourceUrl && this.props.tileJsonSource.url !== undefined) {\n          source.setUrl(this.props.tileJsonSource.url);\n          urlUpdated = true;\n        }\n\n        const hasNewSourceTiles =\n          tileJsonSource.tiles !== this.props.tileJsonSource.tiles;\n\n        if (\n          hasNewSourceTiles &&\n          this.props.tileJsonSource.tiles !== undefined\n        ) {\n          source.setTiles(this.props.tileJsonSource.tiles);\n          tilesUpdated = true;\n        }\n      }\n\n      // Prefer the more targetted updates, but fallback to swapping out the entire source\n      // This applies to raster tile sources, for example\n      const hasNewTilesSource =\n        (!urlUpdated && tileJsonSource.url !== this.props.tileJsonSource.url) ||\n        // Check for reference equality on tiles array\n        (!tilesUpdated &&\n          tileJsonSource.tiles !== this.props.tileJsonSource.tiles) ||\n        tileJsonSource.minzoom !== this.props.tileJsonSource.minzoom ||\n        tileJsonSource.maxzoom !== this.props.tileJsonSource.maxzoom;\n\n      if (hasNewTilesSource) {\n        const layers = this.removeSource();\n        map.addSource(this.id, this.props.tileJsonSource);\n\n        layers.forEach(layer => map.addLayer(layer, layer.before));\n      }\n    }\n\n    // Update geoJsonSource data\n    if (\n      geoJsonSource &&\n      this.props.geoJsonSource &&\n      this.props.geoJsonSource.data !== geoJsonSource.data &&\n      this.props.geoJsonSource.data &&\n      source &&\n      source.type === 'geojson'\n    ) {\n      source.setData(this.props.geoJsonSource.data);\n    }\n  }\n\n  public render() {\n    return null;\n  }\n}\n\nexport default withMap(Source);\n"]},"metadata":{},"sourceType":"module"}