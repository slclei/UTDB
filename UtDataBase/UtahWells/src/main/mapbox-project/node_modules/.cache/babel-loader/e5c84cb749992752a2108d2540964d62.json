{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as MapboxGl from 'mapbox-gl';\nimport * as React from 'react';\nimport { listenEvents, events, updateEvents } from './map-events';\nimport { MapContext } from './context';\nimport { createPortal } from 'react-dom';\n\nvar isEqual = require('deep-equal');\n\nvar defaultZoom = [11];\nvar defaultMovingMethod = 'flyTo';\nvar defaultCenter = [-0.2416815, 51.5285582];\n\nvar ReactMapboxFactory = function (_a) {\n  var accessToken = _a.accessToken,\n      apiUrl = _a.apiUrl,\n      _b = _a.minZoom,\n      minZoom = _b === void 0 ? 0 : _b,\n      _c = _a.maxZoom,\n      maxZoom = _c === void 0 ? 20 : _c,\n      _d = _a.hash,\n      hash = _d === void 0 ? false : _d,\n      _e = _a.preserveDrawingBuffer,\n      preserveDrawingBuffer = _e === void 0 ? false : _e,\n      _f = _a.scrollZoom,\n      scrollZoom = _f === void 0 ? true : _f,\n      _g = _a.interactive,\n      interactive = _g === void 0 ? true : _g,\n      _h = _a.dragRotate,\n      dragRotate = _h === void 0 ? true : _h,\n      _j = _a.pitchWithRotate,\n      pitchWithRotate = _j === void 0 ? true : _j,\n      _k = _a.attributionControl,\n      attributionControl = _k === void 0 ? true : _k,\n      customAttribution = _a.customAttribution,\n      _l = _a.logoPosition,\n      logoPosition = _l === void 0 ? 'bottom-left' : _l,\n      _m = _a.renderWorldCopies,\n      renderWorldCopies = _m === void 0 ? true : _m,\n      _o = _a.trackResize,\n      trackResize = _o === void 0 ? true : _o,\n      _p = _a.touchZoomRotate,\n      touchZoomRotate = _p === void 0 ? true : _p,\n      _q = _a.doubleClickZoom,\n      doubleClickZoom = _q === void 0 ? true : _q,\n      _r = _a.keyboard,\n      keyboard = _r === void 0 ? true : _r,\n      _s = _a.dragPan,\n      dragPan = _s === void 0 ? true : _s,\n      _t = _a.boxZoom,\n      boxZoom = _t === void 0 ? true : _t,\n      _u = _a.refreshExpiredTiles,\n      refreshExpiredTiles = _u === void 0 ? true : _u,\n      _v = _a.failIfMajorPerformanceCaveat,\n      failIfMajorPerformanceCaveat = _v === void 0 ? false : _v,\n      _w = _a.bearingSnap,\n      bearingSnap = _w === void 0 ? 7 : _w,\n      _x = _a.antialias,\n      antialias = _x === void 0 ? false : _x,\n      mapInstance = _a.mapInstance,\n      transformRequest = _a.transformRequest;\n\n  var _y;\n\n  return _y = function (_super) {\n    __extends(ReactMapboxGl, _super);\n\n    function ReactMapboxGl() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this.state = {\n        map: mapInstance,\n        ready: false\n      };\n      _this.listeners = {};\n      _this._isMounted = true;\n\n      _this.calcCenter = function (bounds) {\n        return [(bounds[0][0] + bounds[1][0]) / 2, (bounds[0][1] + bounds[1][1]) / 2];\n      };\n\n      _this.setRef = function (x) {\n        _this.container = x;\n      };\n\n      return _this;\n    }\n\n    ReactMapboxGl.prototype.componentDidMount = function () {\n      var _this = this;\n\n      var _a = this.props,\n          style = _a.style,\n          onStyleLoad = _a.onStyleLoad,\n          center = _a.center,\n          pitch = _a.pitch,\n          zoom = _a.zoom,\n          fitBounds = _a.fitBounds,\n          fitBoundsOptions = _a.fitBoundsOptions,\n          bearing = _a.bearing,\n          maxBounds = _a.maxBounds;\n      MapboxGl.accessToken = accessToken;\n\n      if (apiUrl) {\n        MapboxGl.config.API_URL = apiUrl;\n      }\n\n      if (!Array.isArray(zoom)) {\n        throw new Error('zoom need to be an array type of length 1 for reliable update');\n      }\n\n      var opts = {\n        preserveDrawingBuffer: preserveDrawingBuffer,\n        hash: hash,\n        zoom: zoom[0],\n        minZoom: minZoom,\n        maxZoom: maxZoom,\n        maxBounds: maxBounds,\n        container: this.container,\n        center: fitBounds && center === defaultCenter ? this.calcCenter(fitBounds) : center,\n        style: style,\n        scrollZoom: scrollZoom,\n        attributionControl: attributionControl,\n        customAttribution: customAttribution,\n        interactive: interactive,\n        dragRotate: dragRotate,\n        pitchWithRotate: pitchWithRotate,\n        renderWorldCopies: renderWorldCopies,\n        trackResize: trackResize,\n        touchZoomRotate: touchZoomRotate,\n        doubleClickZoom: doubleClickZoom,\n        keyboard: keyboard,\n        dragPan: dragPan,\n        boxZoom: boxZoom,\n        refreshExpiredTiles: refreshExpiredTiles,\n        logoPosition: logoPosition,\n        bearingSnap: bearingSnap,\n        failIfMajorPerformanceCaveat: failIfMajorPerformanceCaveat,\n        antialias: antialias,\n        transformRequest: transformRequest\n      };\n\n      if (bearing) {\n        if (!Array.isArray(bearing)) {\n          throw new Error('bearing need to be an array type of length 1 for reliable update');\n        }\n\n        opts.bearing = bearing[0];\n      }\n\n      if (pitch) {\n        if (!Array.isArray(pitch)) {\n          throw new Error('pitch need to be an array type of length 1 for reliable update');\n        }\n\n        opts.pitch = pitch[0];\n      }\n\n      var map = this.state.map;\n\n      if (!map) {\n        map = new MapboxGl.Map(opts);\n        this.setState({\n          map: map\n        });\n      }\n\n      if (fitBounds) {\n        map.fitBounds(fitBounds, fitBoundsOptions, {\n          fitboundUpdate: true\n        });\n      }\n\n      map.on('load', function (evt) {\n        if (_this._isMounted) {\n          _this.setState({\n            ready: true\n          });\n        }\n\n        if (onStyleLoad) {\n          onStyleLoad(map, evt);\n        }\n      });\n      this.listeners = listenEvents(events, this.props, map);\n    };\n\n    ReactMapboxGl.prototype.componentWillUnmount = function () {\n      var map = this.state.map;\n      this._isMounted = false;\n\n      if (map) {\n        map.remove();\n      }\n    };\n\n    ReactMapboxGl.prototype.componentDidUpdate = function (prevProps) {\n      var _this = this;\n\n      var map = this.state.map;\n\n      if (!map) {\n        return null;\n      }\n\n      this.listeners = updateEvents(this.listeners, this.props, map);\n      var center = map.getCenter();\n      var zoom = map.getZoom();\n      var bearing = map.getBearing();\n      var pitch = map.getPitch();\n      var didZoomUpdate = prevProps.zoom !== this.props.zoom && (this.props.zoom && this.props.zoom[0]) !== zoom;\n      var didCenterUpdate = prevProps.center !== this.props.center && ((this.props.center && this.props.center[0]) !== center.lng || (this.props.center && this.props.center[1]) !== center.lat);\n      var didBearingUpdate = prevProps.bearing !== this.props.bearing && (this.props.bearing && this.props.bearing[0]) !== bearing;\n      var didPitchUpdate = prevProps.pitch !== this.props.pitch && (this.props.pitch && this.props.pitch[0]) !== pitch;\n\n      if (this.props.maxBounds) {\n        var didMaxBoundsUpdate = prevProps.maxBounds !== this.props.maxBounds;\n\n        if (didMaxBoundsUpdate) {\n          map.setMaxBounds(this.props.maxBounds);\n        }\n      }\n\n      if (this.props.fitBounds) {\n        var fitBounds = prevProps.fitBounds;\n        var didFitBoundsUpdate = fitBounds !== this.props.fitBounds || this.props.fitBounds.length !== (fitBounds && fitBounds.length) || !!fitBounds.filter(function (c, i) {\n          var nc = _this.props.fitBounds && _this.props.fitBounds[i];\n          return c[0] !== (nc && nc[0]) || c[1] !== (nc && nc[1]);\n        })[0];\n\n        if (didFitBoundsUpdate || !isEqual(prevProps.fitBoundsOptions, this.props.fitBoundsOptions)) {\n          map.fitBounds(this.props.fitBounds, this.props.fitBoundsOptions, {\n            fitboundUpdate: true\n          });\n        }\n      }\n\n      if (didZoomUpdate || didCenterUpdate || didBearingUpdate || didPitchUpdate) {\n        var mm = this.props.movingMethod || defaultMovingMethod;\n        var _a = this.props,\n            flyToOptions = _a.flyToOptions,\n            animationOptions = _a.animationOptions;\n        map[mm](__assign({}, animationOptions, flyToOptions, {\n          zoom: didZoomUpdate && this.props.zoom ? this.props.zoom[0] : zoom,\n          center: didCenterUpdate ? this.props.center : center,\n          bearing: didBearingUpdate ? this.props.bearing : bearing,\n          pitch: didPitchUpdate ? this.props.pitch : pitch\n        }));\n      }\n\n      if (!isEqual(prevProps.style, this.props.style)) {\n        map.setStyle(this.props.style);\n      }\n\n      return null;\n    };\n\n    ReactMapboxGl.prototype.render = function () {\n      var _a = this.props,\n          containerStyle = _a.containerStyle,\n          className = _a.className,\n          children = _a.children,\n          renderChildrenInPortal = _a.renderChildrenInPortal;\n      var _b = this.state,\n          ready = _b.ready,\n          map = _b.map;\n\n      if (renderChildrenInPortal) {\n        var container = ready && map && typeof map.getCanvasContainer === 'function' ? map.getCanvasContainer() : undefined;\n        return React.createElement(MapContext.Provider, {\n          value: map\n        }, React.createElement(\"div\", {\n          ref: this.setRef,\n          className: className,\n          style: __assign({}, containerStyle)\n        }, ready && container && createPortal(children, container)));\n      }\n\n      return React.createElement(MapContext.Provider, {\n        value: map\n      }, React.createElement(\"div\", {\n        ref: this.setRef,\n        className: className,\n        style: __assign({}, containerStyle)\n      }, ready && children));\n    };\n\n    return ReactMapboxGl;\n  }(React.Component), _y.defaultProps = {\n    onStyleLoad: function (map, evt) {\n      return null;\n    },\n    center: defaultCenter,\n    zoom: defaultZoom,\n    bearing: 0,\n    movingMethod: defaultMovingMethod,\n    pitch: 0,\n    containerStyle: {\n      textAlign: 'left'\n    }\n  }, _y;\n};\n\nexport default ReactMapboxFactory;","map":{"version":3,"mappings":"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","names":["MapboxGl","React","listenEvents","events","updateEvents","MapContext","createPortal","isEqual","require","defaultZoom","defaultMovingMethod","defaultCenter","ReactMapboxFactory","_a","accessToken","apiUrl","_b","minZoom","_c","maxZoom","_d","hash","_e","preserveDrawingBuffer","_f","scrollZoom","_g","interactive","_h","dragRotate","_j","pitchWithRotate","_k","attributionControl","customAttribution","_l","logoPosition","_m","renderWorldCopies","_o","trackResize","_p","touchZoomRotate","_q","doubleClickZoom","_r","keyboard","_s","dragPan","_t","boxZoom","_u","refreshExpiredTiles","_v","failIfMajorPerformanceCaveat","_w","bearingSnap","_x","antialias","mapInstance","transformRequest","__extends","_this","map","ready","bounds","x","container","ReactMapboxGl","style","onStyleLoad","center","pitch","zoom","fitBounds","fitBoundsOptions","bearing","maxBounds","config","API_URL","Array","isArray","Error","opts","calcCenter","state","Map","setState","fitboundUpdate","on","evt","_isMounted","listeners","props","remove","prevProps","getCenter","getZoom","getBearing","getPitch","didZoomUpdate","didCenterUpdate","lng","lat","didBearingUpdate","didPitchUpdate","didMaxBoundsUpdate","setMaxBounds","didFitBoundsUpdate","length","filter","c","i","nc","mm","movingMethod","flyToOptions","animationOptions","__assign","setStyle","containerStyle","className","children","renderChildrenInPortal","getCanvasContainer","undefined","Provider","value","ref","setRef","Component","_y","textAlign"],"sources":["D:\\Github\\CUSP_DataBase\\CUSP_DB\\src\\main\\mapbox-project\\node_modules\\react-mapbox-gl\\src\\map.tsx"],"sourcesContent":["import * as MapboxGl from 'mapbox-gl';\nimport * as React from 'react';\nimport {\n  Events,\n  listenEvents,\n  events,\n  Listeners,\n  updateEvents\n} from './map-events';\nimport { MapContext } from './context';\nimport { createPortal } from 'react-dom';\nconst isEqual = require('deep-equal'); //tslint:disable-line\n\nexport interface PaddingOptions {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n}\n\nexport interface FitBoundsOptions {\n  linear?: boolean;\n  easing?: (time: number) => number;\n  padding?: number | PaddingOptions;\n  offset?: MapboxGl.Point | [number, number];\n  maxZoom?: number;\n  duration?: number;\n}\n\nexport type FitBounds = [[number, number], [number, number]];\n\nexport interface AnimationOptions {\n  duration: number;\n  animate: boolean;\n  easing(time: number): number;\n  offset: number[];\n}\n\nexport interface FlyToOptions {\n  curve: number;\n  minZoom: number;\n  speed: number;\n  screenSpeed: number;\n}\n\n// React Props updated between re-render\nexport interface Props {\n  style: string | MapboxGl.Style;\n  center?: [number, number];\n  zoom?: [number];\n  maxBounds?: MapboxGl.LngLatBounds | FitBounds;\n  fitBounds?: FitBounds;\n  fitBoundsOptions?: FitBoundsOptions;\n  bearing?: [number];\n  pitch?: [number];\n  containerStyle?: React.CSSProperties;\n  className?: string;\n  movingMethod?: 'jumpTo' | 'easeTo' | 'flyTo';\n  animationOptions?: Partial<AnimationOptions>;\n  flyToOptions?: Partial<FlyToOptions>;\n  children?: JSX.Element | JSX.Element[] | Array<JSX.Element | undefined>;\n  renderChildrenInPortal?: boolean;\n}\n\nexport interface State {\n  map?: MapboxGl.Map;\n  ready: boolean;\n}\n\nexport type RequestTransformFunction = (\n  url: string,\n  resourceType: any // tslint:disable-line:no-any\n) => any; // tslint:disable-line:no-any\n\n// Static Properties of the map\nexport interface FactoryParameters {\n  accessToken: string;\n  apiUrl?: string;\n  minZoom?: number;\n  maxZoom?: number;\n  hash?: boolean;\n  preserveDrawingBuffer?: boolean;\n  scrollZoom?: boolean;\n  interactive?: boolean;\n  dragRotate?: boolean;\n  pitchWithRotate?: boolean;\n  attributionControl?: boolean;\n  customAttribution?: string | string[];\n  logoPosition?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n  renderWorldCopies?: boolean;\n  trackResize?: boolean;\n  touchZoomRotate?: boolean;\n  doubleClickZoom?: boolean;\n  keyboard?: boolean;\n  dragPan?: boolean;\n  boxZoom?: boolean;\n  refreshExpiredTiles?: boolean;\n  failIfMajorPerformanceCaveat?: boolean;\n  bearingSnap?: number;\n  transformRequest?: RequestTransformFunction;\n  antialias?: boolean;\n  mapInstance?: MapboxGl.Map;\n}\n\n// Satisfy typescript pitfall with defaultProps\nconst defaultZoom = [11];\nconst defaultMovingMethod = 'flyTo';\nconst defaultCenter = [-0.2416815, 51.5285582];\n\n// tslint:disable-next-line:no-namespace\ndeclare global {\n  namespace mapboxgl {\n    export interface MapboxOptions {\n      failIfMajorPerformanceCaveat?: boolean;\n      transformRequest?: MapboxGl.TransformRequestFunction;\n    }\n  }\n}\n\nconst ReactMapboxFactory = ({\n  accessToken,\n  apiUrl,\n  minZoom = 0,\n  maxZoom = 20,\n  hash = false,\n  preserveDrawingBuffer = false,\n  scrollZoom = true,\n  interactive = true,\n  dragRotate = true,\n  pitchWithRotate = true,\n  attributionControl = true,\n  customAttribution,\n  logoPosition = 'bottom-left',\n  renderWorldCopies = true,\n  trackResize = true,\n  touchZoomRotate = true,\n  doubleClickZoom = true,\n  keyboard = true,\n  dragPan = true,\n  boxZoom = true,\n  refreshExpiredTiles = true,\n  failIfMajorPerformanceCaveat = false,\n  bearingSnap = 7,\n  antialias = false,\n  mapInstance,\n  transformRequest\n}: FactoryParameters) => {\n  return class ReactMapboxGl extends React.Component<Props & Events, State> {\n    public static defaultProps = {\n      // tslint:disable-next-line:no-any\n      onStyleLoad: (map: MapboxGl.Map, evt: any) => null,\n      center: defaultCenter,\n      zoom: defaultZoom,\n      bearing: 0,\n      movingMethod: defaultMovingMethod,\n      pitch: 0,\n      containerStyle: {\n        textAlign: 'left'\n      }\n    };\n\n    public state: State = {\n      map: mapInstance,\n      ready: false\n    };\n\n    public listeners: Listeners = {};\n\n    // tslint:disable-next-line:variable-name\n    public _isMounted = true;\n\n    public container?: HTMLElement;\n\n    public calcCenter = (bounds: FitBounds): [number, number] => [\n      (bounds[0][0] + bounds[1][0]) / 2,\n      (bounds[0][1] + bounds[1][1]) / 2\n    ];\n\n    public componentDidMount() {\n      const {\n        style,\n        onStyleLoad,\n        center,\n        pitch,\n        zoom,\n        fitBounds,\n        fitBoundsOptions,\n        bearing,\n        maxBounds\n      } = this.props;\n\n      // tslint:disable-next-line:no-any\n      (MapboxGl as any).accessToken = accessToken;\n      if (apiUrl) {\n        // tslint:disable-next-line:no-any\n        (MapboxGl as any).config.API_URL = apiUrl;\n      }\n\n      if (!Array.isArray(zoom)) {\n        throw new Error(\n          'zoom need to be an array type of length 1 for reliable update'\n        );\n      }\n\n      const opts: MapboxGl.MapboxOptions = {\n        preserveDrawingBuffer,\n        hash,\n        zoom: zoom[0],\n        minZoom,\n        maxZoom,\n        maxBounds,\n        container: this.container!,\n        center:\n          fitBounds && center === defaultCenter\n            ? this.calcCenter(fitBounds)\n            : center,\n        style,\n        scrollZoom,\n        attributionControl,\n        customAttribution,\n        interactive,\n        dragRotate,\n        pitchWithRotate,\n        renderWorldCopies,\n        trackResize,\n        touchZoomRotate,\n        doubleClickZoom,\n        keyboard,\n        dragPan,\n        boxZoom,\n        refreshExpiredTiles,\n        logoPosition,\n        bearingSnap,\n        failIfMajorPerformanceCaveat,\n        antialias,\n        transformRequest\n      };\n\n      if (bearing) {\n        if (!Array.isArray(bearing)) {\n          throw new Error(\n            'bearing need to be an array type of length 1 for reliable update'\n          );\n        }\n\n        opts.bearing = bearing[0];\n      }\n\n      if (pitch) {\n        if (!Array.isArray(pitch)) {\n          throw new Error(\n            'pitch need to be an array type of length 1 for reliable update'\n          );\n        }\n\n        opts.pitch = pitch[0];\n      }\n\n      // This is a hack to allow injecting the map instance, which assists\n      // in testing and theoretically provides a means for users to inject\n      // their own map instance.\n      let map = this.state.map;\n\n      if (!map) {\n        map = new MapboxGl.Map(opts);\n        this.setState({ map });\n      }\n\n      if (fitBounds) {\n        map.fitBounds(fitBounds, fitBoundsOptions, { fitboundUpdate: true });\n      }\n\n      // tslint:disable-next-line:no-any\n      map.on('load', (evt: React.SyntheticEvent<any>) => {\n        if (this._isMounted) {\n          this.setState({ ready: true });\n        }\n\n        if (onStyleLoad) {\n          onStyleLoad(map!, evt);\n        }\n      });\n\n      this.listeners = listenEvents(events, this.props, map);\n    }\n\n    public componentWillUnmount() {\n      const { map } = this.state;\n      this._isMounted = false;\n\n      if (map) {\n        map.remove();\n      }\n    }\n\n    public componentDidUpdate(prevProps: Props & Events) {\n      const { map } = this.state;\n      if (!map) {\n        return null;\n      }\n\n      // Update event listeners\n      this.listeners = updateEvents(this.listeners, this.props, map);\n\n      const center = map.getCenter();\n      const zoom = map.getZoom();\n      const bearing = map.getBearing();\n      const pitch = map.getPitch();\n\n      const didZoomUpdate =\n        prevProps.zoom !== this.props.zoom &&\n        (this.props.zoom && this.props.zoom[0]) !== zoom;\n\n      const didCenterUpdate =\n        prevProps.center !== this.props.center &&\n        ((this.props.center && this.props.center[0]) !== center.lng ||\n          (this.props.center && this.props.center[1]) !== center.lat);\n\n      const didBearingUpdate =\n        prevProps.bearing !== this.props.bearing &&\n        (this.props.bearing && this.props.bearing[0]) !== bearing;\n\n      const didPitchUpdate =\n        prevProps.pitch !== this.props.pitch &&\n        (this.props.pitch && this.props.pitch[0]) !== pitch;\n\n      if (this.props.maxBounds) {\n        const didMaxBoundsUpdate = prevProps.maxBounds !== this.props.maxBounds;\n\n        if (didMaxBoundsUpdate) {\n          map.setMaxBounds(this.props.maxBounds);\n        }\n      }\n\n      if (this.props.fitBounds) {\n        const { fitBounds } = prevProps;\n\n        const didFitBoundsUpdate =\n          fitBounds !== this.props.fitBounds || // Check for reference equality\n          this.props.fitBounds.length !== (fitBounds && fitBounds.length) || // Added element\n          !!fitBounds.filter((c, i) => {\n            // Check for equality\n            const nc = this.props.fitBounds && this.props.fitBounds[i];\n            return c[0] !== (nc && nc[0]) || c[1] !== (nc && nc[1]);\n          })[0];\n\n        if (\n          didFitBoundsUpdate ||\n          !isEqual(prevProps.fitBoundsOptions, this.props.fitBoundsOptions)\n        ) {\n          map.fitBounds(this.props.fitBounds, this.props.fitBoundsOptions, {\n            fitboundUpdate: true\n          });\n        }\n      }\n\n      if (\n        didZoomUpdate ||\n        didCenterUpdate ||\n        didBearingUpdate ||\n        didPitchUpdate\n      ) {\n        const mm: string = this.props.movingMethod || defaultMovingMethod;\n        const { flyToOptions, animationOptions } = this.props;\n\n        map[mm]({\n          ...animationOptions,\n          ...flyToOptions,\n          zoom: didZoomUpdate && this.props.zoom ? this.props.zoom[0] : zoom,\n          center: didCenterUpdate ? this.props.center : center,\n          bearing: didBearingUpdate ? this.props.bearing : bearing,\n          pitch: didPitchUpdate ? this.props.pitch : pitch\n        });\n      }\n\n      if (!isEqual(prevProps.style, this.props.style)) {\n        map.setStyle(this.props.style);\n      }\n\n      return null;\n    }\n\n    public setRef = (x: HTMLElement | null) => {\n      this.container = x!;\n    };\n\n    public render() {\n      const {\n        containerStyle,\n        className,\n        children,\n        renderChildrenInPortal\n      } = this.props;\n\n      const { ready, map } = this.state;\n\n      if (renderChildrenInPortal) {\n        const container =\n          ready && map && typeof map.getCanvasContainer === 'function'\n            ? map.getCanvasContainer()\n            : undefined;\n\n        return (\n          <MapContext.Provider value={map}>\n            <div\n              ref={this.setRef}\n              className={className}\n              style={{ ...containerStyle }}\n            >\n              {ready && container && createPortal(children, container)}\n            </div>\n          </MapContext.Provider>\n        );\n      }\n\n      return (\n        <MapContext.Provider value={map}>\n          <div\n            ref={this.setRef}\n            className={className}\n            style={{ ...containerStyle }}\n          >\n            {ready && children}\n          </div>\n        </MapContext.Provider>\n      );\n    }\n  };\n};\n\nexport default ReactMapboxFactory;\n"]},"metadata":{},"sourceType":"module"}