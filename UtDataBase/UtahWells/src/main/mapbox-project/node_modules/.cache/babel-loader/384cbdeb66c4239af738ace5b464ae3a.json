{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.getType = getType;\nexports.isPrimitive = void 0;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// get the type of a value with handling the edge cases like `typeof []`\n// and `typeof null`\n\nfunction getType(value) {\n  if (value === undefined) {\n    return 'undefined';\n  } else if (value === null) {\n    return 'null';\n  } else if (Array.isArray(value)) {\n    return 'array';\n  } else if (typeof value === 'boolean') {\n    return 'boolean';\n  } else if (typeof value === 'function') {\n    return 'function';\n  } else if (typeof value === 'number') {\n    return 'number';\n  } else if (typeof value === 'string') {\n    return 'string';\n  } else if (typeof value === 'bigint') {\n    return 'bigint';\n  } else if (typeof value === 'object') {\n    if (value != null) {\n      if (value.constructor === RegExp) {\n        return 'regexp';\n      } else if (value.constructor === Map) {\n        return 'map';\n      } else if (value.constructor === Set) {\n        return 'set';\n      } else if (value.constructor === Date) {\n        return 'date';\n      }\n    }\n\n    return 'object';\n  } else if (typeof value === 'symbol') {\n    return 'symbol';\n  }\n\n  throw new Error(`value of unknown type: ${value}`);\n}\n\nconst isPrimitive = value => Object(value) !== value;\n\nexports.isPrimitive = isPrimitive;","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/mapbox-project/node_modules/jest-get-type/build/index.js"],"names":["Object","defineProperty","exports","value","getType","isPrimitive","undefined","Array","isArray","constructor","RegExp","Map","Set","Date","Error"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBA,OAAlB;AACAF,OAAO,CAACG,WAAR,GAAsB,KAAK,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,OAAT,CAAiBD,KAAjB,EAAwB;AACtB,MAAIA,KAAK,KAAKG,SAAd,EAAyB;AACvB,WAAO,WAAP;AACD,GAFD,MAEO,IAAIH,KAAK,KAAK,IAAd,EAAoB;AACzB,WAAO,MAAP;AACD,GAFM,MAEA,IAAII,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAJ,EAA0B;AAC/B,WAAO,OAAP;AACD,GAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,SAArB,EAAgC;AACrC,WAAO,SAAP;AACD,GAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AACtC,WAAO,UAAP;AACD,GAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpC,WAAO,QAAP;AACD,GAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpC,WAAO,QAAP;AACD,GAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpC,WAAO,QAAP;AACD,GAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpC,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,UAAIA,KAAK,CAACM,WAAN,KAAsBC,MAA1B,EAAkC;AAChC,eAAO,QAAP;AACD,OAFD,MAEO,IAAIP,KAAK,CAACM,WAAN,KAAsBE,GAA1B,EAA+B;AACpC,eAAO,KAAP;AACD,OAFM,MAEA,IAAIR,KAAK,CAACM,WAAN,KAAsBG,GAA1B,EAA+B;AACpC,eAAO,KAAP;AACD,OAFM,MAEA,IAAIT,KAAK,CAACM,WAAN,KAAsBI,IAA1B,EAAgC;AACrC,eAAO,MAAP;AACD;AACF;;AAED,WAAO,QAAP;AACD,GAdM,MAcA,IAAI,OAAOV,KAAP,KAAiB,QAArB,EAA+B;AACpC,WAAO,QAAP;AACD;;AAED,QAAM,IAAIW,KAAJ,CAAW,0BAAyBX,KAAM,EAA1C,CAAN;AACD;;AAED,MAAME,WAAW,GAAGF,KAAK,IAAIH,MAAM,CAACG,KAAD,CAAN,KAAkBA,KAA/C;;AAEAD,OAAO,CAACG,WAAR,GAAsBA,WAAtB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.getType = getType;\nexports.isPrimitive = void 0;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// get the type of a value with handling the edge cases like `typeof []`\n// and `typeof null`\nfunction getType(value) {\n  if (value === undefined) {\n    return 'undefined';\n  } else if (value === null) {\n    return 'null';\n  } else if (Array.isArray(value)) {\n    return 'array';\n  } else if (typeof value === 'boolean') {\n    return 'boolean';\n  } else if (typeof value === 'function') {\n    return 'function';\n  } else if (typeof value === 'number') {\n    return 'number';\n  } else if (typeof value === 'string') {\n    return 'string';\n  } else if (typeof value === 'bigint') {\n    return 'bigint';\n  } else if (typeof value === 'object') {\n    if (value != null) {\n      if (value.constructor === RegExp) {\n        return 'regexp';\n      } else if (value.constructor === Map) {\n        return 'map';\n      } else if (value.constructor === Set) {\n        return 'set';\n      } else if (value.constructor === Date) {\n        return 'date';\n      }\n    }\n\n    return 'object';\n  } else if (typeof value === 'symbol') {\n    return 'symbol';\n  }\n\n  throw new Error(`value of unknown type: ${value}`);\n}\n\nconst isPrimitive = value => Object(value) !== value;\n\nexports.isPrimitive = isPrimitive;\n"]},"metadata":{},"sourceType":"script"}