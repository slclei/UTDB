{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.stringify = exports.printWithType = exports.printReceived = exports.printExpected = exports.printDiffOrStringify = exports.pluralize = exports.matcherHint = exports.matcherErrorMessage = exports.highlightTrailingWhitespace = exports.getLabelPrinter = exports.ensureNumbers = exports.ensureNoExpected = exports.ensureExpectedIsNumber = exports.ensureExpectedIsNonNegativeInteger = exports.ensureActualIsNumber = exports.diff = exports.SUGGEST_TO_CONTAIN_EQUAL = exports.RECEIVED_COLOR = exports.INVERTED_COLOR = exports.EXPECTED_COLOR = exports.DIM_COLOR = exports.BOLD_WEIGHT = void 0;\n\nvar _chalk = _interopRequireDefault(require('chalk'));\n\nvar _jestDiff = require('jest-diff');\n\nvar _jestGetType = require('jest-get-type');\n\nvar _prettyFormat = require('pretty-format');\n\nvar _Replaceable = _interopRequireDefault(require('./Replaceable'));\n\nvar _deepCyclicCopyReplaceable = _interopRequireDefault(require('./deepCyclicCopyReplaceable'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable local/ban-types-eventually */\n\n\nconst {\n  AsymmetricMatcher,\n  DOMCollection,\n  DOMElement,\n  Immutable,\n  ReactElement,\n  ReactTestComponent\n} = _prettyFormat.plugins;\nconst PLUGINS = [ReactTestComponent, ReactElement, DOMElement, DOMCollection, Immutable, AsymmetricMatcher];\nconst EXPECTED_COLOR = _chalk.default.green;\nexports.EXPECTED_COLOR = EXPECTED_COLOR;\nconst RECEIVED_COLOR = _chalk.default.red;\nexports.RECEIVED_COLOR = RECEIVED_COLOR;\nconst INVERTED_COLOR = _chalk.default.inverse;\nexports.INVERTED_COLOR = INVERTED_COLOR;\nconst BOLD_WEIGHT = _chalk.default.bold;\nexports.BOLD_WEIGHT = BOLD_WEIGHT;\nconst DIM_COLOR = _chalk.default.dim;\nexports.DIM_COLOR = DIM_COLOR;\nconst MULTILINE_REGEXP = /\\n/;\nconst SPACE_SYMBOL = '\\u{00B7}'; // middle dot\n\nconst NUMBERS = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen'];\n\nconst SUGGEST_TO_CONTAIN_EQUAL = _chalk.default.dim('Looks like you wanted to test for object/array equality with the stricter `toContain` matcher. You probably need to use `toContainEqual` instead.');\n\nexports.SUGGEST_TO_CONTAIN_EQUAL = SUGGEST_TO_CONTAIN_EQUAL;\n\nconst stringify = function (object) {\n  let maxDepth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  const MAX_LENGTH = 10000;\n  let result;\n\n  try {\n    result = (0, _prettyFormat.format)(object, {\n      maxDepth,\n      min: true,\n      plugins: PLUGINS\n    });\n  } catch {\n    result = (0, _prettyFormat.format)(object, {\n      callToJSON: false,\n      maxDepth,\n      min: true,\n      plugins: PLUGINS\n    });\n  }\n\n  return result.length >= MAX_LENGTH && maxDepth > 1 ? stringify(object, Math.floor(maxDepth / 2)) : result;\n};\n\nexports.stringify = stringify;\n\nconst highlightTrailingWhitespace = text => text.replace(/\\s+$/gm, _chalk.default.inverse('$&')); // Instead of inverse highlight which now implies a change,\n// replace common spaces with middle dot at the end of any line.\n\n\nexports.highlightTrailingWhitespace = highlightTrailingWhitespace;\n\nconst replaceTrailingSpaces = text => text.replace(/\\s+$/gm, spaces => SPACE_SYMBOL.repeat(spaces.length));\n\nconst printReceived = object => RECEIVED_COLOR(replaceTrailingSpaces(stringify(object)));\n\nexports.printReceived = printReceived;\n\nconst printExpected = value => EXPECTED_COLOR(replaceTrailingSpaces(stringify(value)));\n\nexports.printExpected = printExpected;\n\nconst printWithType = (name, value, print // printExpected or printReceived\n) => {\n  const type = (0, _jestGetType.getType)(value);\n  const hasType = type !== 'null' && type !== 'undefined' ? `${name} has type:  ${type}\\n` : '';\n  const hasValue = `${name} has value: ${print(value)}`;\n  return hasType + hasValue;\n};\n\nexports.printWithType = printWithType;\n\nconst ensureNoExpected = (expected, matcherName, options) => {\n  if (typeof expected !== 'undefined') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(matcherErrorMessage(matcherHint(matcherString, undefined, '', options), // Because expected is omitted in hint above,\n    // expected is black instead of green in message below.\n    'this matcher must not have an expected argument', printWithType('Expected', expected, printExpected)));\n  }\n};\n/**\n * Ensures that `actual` is of type `number | bigint`\n */\n\n\nexports.ensureNoExpected = ensureNoExpected;\n\nconst ensureActualIsNumber = (actual, matcherName, options) => {\n  if (typeof actual !== 'number' && typeof actual !== 'bigint') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(matcherErrorMessage(matcherHint(matcherString, undefined, undefined, options), `${RECEIVED_COLOR('received')} value must be a number or bigint`, printWithType('Received', actual, printReceived)));\n  }\n};\n/**\n * Ensures that `expected` is of type `number | bigint`\n */\n\n\nexports.ensureActualIsNumber = ensureActualIsNumber;\n\nconst ensureExpectedIsNumber = (expected, matcherName, options) => {\n  if (typeof expected !== 'number' && typeof expected !== 'bigint') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(matcherErrorMessage(matcherHint(matcherString, undefined, undefined, options), `${EXPECTED_COLOR('expected')} value must be a number or bigint`, printWithType('Expected', expected, printExpected)));\n  }\n};\n/**\n * Ensures that `actual` & `expected` are of type `number | bigint`\n */\n\n\nexports.ensureExpectedIsNumber = ensureExpectedIsNumber;\n\nconst ensureNumbers = (actual, expected, matcherName, options) => {\n  ensureActualIsNumber(actual, matcherName, options);\n  ensureExpectedIsNumber(expected, matcherName, options);\n};\n\nexports.ensureNumbers = ensureNumbers;\n\nconst ensureExpectedIsNonNegativeInteger = (expected, matcherName, options) => {\n  if (typeof expected !== 'number' || !Number.isSafeInteger(expected) || expected < 0) {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(matcherErrorMessage(matcherHint(matcherString, undefined, undefined, options), `${EXPECTED_COLOR('expected')} value must be a non-negative integer`, printWithType('Expected', expected, printExpected)));\n  }\n}; // Given array of diffs, return concatenated string:\n// * include common substrings\n// * exclude change substrings which have opposite op\n// * include change substrings which have argument op\n//   with inverse highlight only if there is a common substring\n\n\nexports.ensureExpectedIsNonNegativeInteger = ensureExpectedIsNonNegativeInteger;\n\nconst getCommonAndChangedSubstrings = (diffs, op, hasCommonDiff) => diffs.reduce((reduced, diff) => reduced + (diff[0] === _jestDiff.DIFF_EQUAL ? diff[1] : diff[0] !== op ? '' : hasCommonDiff ? INVERTED_COLOR(diff[1]) : diff[1]), '');\n\nconst isLineDiffable = (expected, received) => {\n  const expectedType = (0, _jestGetType.getType)(expected);\n  const receivedType = (0, _jestGetType.getType)(received);\n\n  if (expectedType !== receivedType) {\n    return false;\n  }\n\n  if ((0, _jestGetType.isPrimitive)(expected)) {\n    // Print generic line diff for strings only:\n    // * if neither string is empty\n    // * if either string has more than one line\n    return typeof expected === 'string' && typeof received === 'string' && expected.length !== 0 && received.length !== 0 && (MULTILINE_REGEXP.test(expected) || MULTILINE_REGEXP.test(received));\n  }\n\n  if (expectedType === 'date' || expectedType === 'function' || expectedType === 'regexp') {\n    return false;\n  }\n\n  if (expected instanceof Error && received instanceof Error) {\n    return false;\n  }\n\n  if (receivedType === 'object' && typeof received.asymmetricMatch === 'function') {\n    return false;\n  }\n\n  return true;\n};\n\nconst MAX_DIFF_STRING_LENGTH = 20000;\n\nconst printDiffOrStringify = (expected, received, expectedLabel, receivedLabel, expand // CLI options: true if `--expand` or false if `--no-expand`\n) => {\n  if (typeof expected === 'string' && typeof received === 'string' && expected.length !== 0 && received.length !== 0 && expected.length <= MAX_DIFF_STRING_LENGTH && received.length <= MAX_DIFF_STRING_LENGTH && expected !== received) {\n    if (expected.includes('\\n') || received.includes('\\n')) {\n      return (0, _jestDiff.diffStringsUnified)(expected, received, {\n        aAnnotation: expectedLabel,\n        bAnnotation: receivedLabel,\n        changeLineTrailingSpaceColor: _chalk.default.bgYellow,\n        commonLineTrailingSpaceColor: _chalk.default.bgYellow,\n        emptyFirstOrLastLinePlaceholder: 'â†µ',\n        // U+21B5\n        expand,\n        includeChangeCounts: true\n      });\n    }\n\n    const diffs = (0, _jestDiff.diffStringsRaw)(expected, received, true);\n    const hasCommonDiff = diffs.some(diff => diff[0] === _jestDiff.DIFF_EQUAL);\n    const printLabel = getLabelPrinter(expectedLabel, receivedLabel);\n    const expectedLine = printLabel(expectedLabel) + printExpected(getCommonAndChangedSubstrings(diffs, _jestDiff.DIFF_DELETE, hasCommonDiff));\n    const receivedLine = printLabel(receivedLabel) + printReceived(getCommonAndChangedSubstrings(diffs, _jestDiff.DIFF_INSERT, hasCommonDiff));\n    return expectedLine + '\\n' + receivedLine;\n  }\n\n  if (isLineDiffable(expected, received)) {\n    const {\n      replacedExpected,\n      replacedReceived\n    } = replaceMatchedToAsymmetricMatcher((0, _deepCyclicCopyReplaceable.default)(expected), (0, _deepCyclicCopyReplaceable.default)(received), [], []);\n    const difference = (0, _jestDiff.diff)(replacedExpected, replacedReceived, {\n      aAnnotation: expectedLabel,\n      bAnnotation: receivedLabel,\n      expand,\n      includeChangeCounts: true\n    });\n\n    if (typeof difference === 'string' && difference.includes('- ' + expectedLabel) && difference.includes('+ ' + receivedLabel)) {\n      return difference;\n    }\n  }\n\n  const printLabel = getLabelPrinter(expectedLabel, receivedLabel);\n  const expectedLine = printLabel(expectedLabel) + printExpected(expected);\n  const receivedLine = printLabel(receivedLabel) + (stringify(expected) === stringify(received) ? 'serializes to the same string' : printReceived(received));\n  return expectedLine + '\\n' + receivedLine;\n}; // Sometimes, e.g. when comparing two numbers, the output from jest-diff\n// does not contain more information than the `Expected:` / `Received:` already gives.\n// In those cases, we do not print a diff to make the output shorter and not redundant.\n\n\nexports.printDiffOrStringify = printDiffOrStringify;\n\nconst shouldPrintDiff = (actual, expected) => {\n  if (typeof actual === 'number' && typeof expected === 'number') {\n    return false;\n  }\n\n  if (typeof actual === 'bigint' && typeof expected === 'bigint') {\n    return false;\n  }\n\n  if (typeof actual === 'boolean' && typeof expected === 'boolean') {\n    return false;\n  }\n\n  return true;\n};\n\nfunction replaceMatchedToAsymmetricMatcher(replacedExpected, replacedReceived, expectedCycles, receivedCycles) {\n  if (!_Replaceable.default.isReplaceable(replacedExpected, replacedReceived)) {\n    return {\n      replacedExpected,\n      replacedReceived\n    };\n  }\n\n  if (expectedCycles.includes(replacedExpected) || receivedCycles.includes(replacedReceived)) {\n    return {\n      replacedExpected,\n      replacedReceived\n    };\n  }\n\n  expectedCycles.push(replacedExpected);\n  receivedCycles.push(replacedReceived);\n  const expectedReplaceable = new _Replaceable.default(replacedExpected);\n  const receivedReplaceable = new _Replaceable.default(replacedReceived);\n  expectedReplaceable.forEach((expectedValue, key) => {\n    const receivedValue = receivedReplaceable.get(key);\n\n    if (isAsymmetricMatcher(expectedValue)) {\n      if (expectedValue.asymmetricMatch(receivedValue)) {\n        receivedReplaceable.set(key, expectedValue);\n      }\n    } else if (isAsymmetricMatcher(receivedValue)) {\n      if (receivedValue.asymmetricMatch(expectedValue)) {\n        expectedReplaceable.set(key, receivedValue);\n      }\n    } else if (_Replaceable.default.isReplaceable(expectedValue, receivedValue)) {\n      const replaced = replaceMatchedToAsymmetricMatcher(expectedValue, receivedValue, expectedCycles, receivedCycles);\n      expectedReplaceable.set(key, replaced.replacedExpected);\n      receivedReplaceable.set(key, replaced.replacedReceived);\n    }\n  });\n  return {\n    replacedExpected: expectedReplaceable.object,\n    replacedReceived: receivedReplaceable.object\n  };\n}\n\nfunction isAsymmetricMatcher(data) {\n  const type = (0, _jestGetType.getType)(data);\n  return type === 'object' && typeof data.asymmetricMatch === 'function';\n}\n\nconst diff = (a, b, options) => shouldPrintDiff(a, b) ? (0, _jestDiff.diff)(a, b, options) : null;\n\nexports.diff = diff;\n\nconst pluralize = (word, count) => (NUMBERS[count] || count) + ' ' + word + (count === 1 ? '' : 's'); // To display lines of labeled values as two columns with monospace alignment:\n// given the strings which will describe the values,\n// return function which given each string, returns the label:\n// string, colon, space, and enough padding spaces to align the value.\n\n\nexports.pluralize = pluralize;\n\nconst getLabelPrinter = function () {\n  for (var _len = arguments.length, strings = new Array(_len), _key = 0; _key < _len; _key++) {\n    strings[_key] = arguments[_key];\n  }\n\n  const maxLength = strings.reduce((max, string) => string.length > max ? string.length : max, 0);\n  return string => `${string}: ${' '.repeat(maxLength - string.length)}`;\n};\n\nexports.getLabelPrinter = getLabelPrinter;\n\nconst matcherErrorMessage = (hint, generic, specific // incorrect value returned from call to printWithType\n) => `${hint}\\n\\n${_chalk.default.bold('Matcher error')}: ${generic}${typeof specific === 'string' ? '\\n\\n' + specific : ''}`; // Display assertion for the report when a test fails.\n// New format: rejects/resolves, not, and matcher name have black color\n// Old format: matcher name has dim color\n\n\nexports.matcherErrorMessage = matcherErrorMessage;\n\nconst matcherHint = function (matcherName) {\n  let received = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'received';\n  let expected = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'expected';\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const {\n    comment = '',\n    expectedColor = EXPECTED_COLOR,\n    isDirectExpectCall = false,\n    // seems redundant with received === ''\n    isNot = false,\n    promise = '',\n    receivedColor = RECEIVED_COLOR,\n    secondArgument = '',\n    secondArgumentColor = EXPECTED_COLOR\n  } = options;\n  let hint = '';\n  let dimString = 'expect'; // concatenate adjacent dim substrings\n\n  if (!isDirectExpectCall && received !== '') {\n    hint += DIM_COLOR(dimString + '(') + receivedColor(received);\n    dimString = ')';\n  }\n\n  if (promise !== '') {\n    hint += DIM_COLOR(dimString + '.') + promise;\n    dimString = '';\n  }\n\n  if (isNot) {\n    hint += DIM_COLOR(dimString + '.') + 'not';\n    dimString = '';\n  }\n\n  if (matcherName.includes('.')) {\n    // Old format: for backward compatibility,\n    // especially without promise or isNot options\n    dimString += matcherName;\n  } else {\n    // New format: omit period from matcherName arg\n    hint += DIM_COLOR(dimString + '.') + matcherName;\n    dimString = '';\n  }\n\n  if (expected === '') {\n    dimString += '()';\n  } else {\n    hint += DIM_COLOR(dimString + '(') + expectedColor(expected);\n\n    if (secondArgument) {\n      hint += DIM_COLOR(', ') + secondArgumentColor(secondArgument);\n    }\n\n    dimString = ')';\n  }\n\n  if (comment !== '') {\n    dimString += ' // ' + comment;\n  }\n\n  if (dimString !== '') {\n    hint += DIM_COLOR(dimString);\n  }\n\n  return hint;\n};\n\nexports.matcherHint = matcherHint;","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/mapbox-project/node_modules/jest-matcher-utils/build/index.js"],"names":["Object","defineProperty","exports","value","stringify","printWithType","printReceived","printExpected","printDiffOrStringify","pluralize","matcherHint","matcherErrorMessage","highlightTrailingWhitespace","getLabelPrinter","ensureNumbers","ensureNoExpected","ensureExpectedIsNumber","ensureExpectedIsNonNegativeInteger","ensureActualIsNumber","diff","SUGGEST_TO_CONTAIN_EQUAL","RECEIVED_COLOR","INVERTED_COLOR","EXPECTED_COLOR","DIM_COLOR","BOLD_WEIGHT","_chalk","_interopRequireDefault","require","_jestDiff","_jestGetType","_prettyFormat","_Replaceable","_deepCyclicCopyReplaceable","obj","__esModule","default","AsymmetricMatcher","DOMCollection","DOMElement","Immutable","ReactElement","ReactTestComponent","plugins","PLUGINS","green","red","inverse","bold","dim","MULTILINE_REGEXP","SPACE_SYMBOL","NUMBERS","object","maxDepth","MAX_LENGTH","result","format","min","callToJSON","length","Math","floor","text","replace","replaceTrailingSpaces","spaces","repeat","name","print","type","getType","hasType","hasValue","expected","matcherName","options","matcherString","Error","undefined","actual","Number","isSafeInteger","getCommonAndChangedSubstrings","diffs","op","hasCommonDiff","reduce","reduced","DIFF_EQUAL","isLineDiffable","received","expectedType","receivedType","isPrimitive","test","asymmetricMatch","MAX_DIFF_STRING_LENGTH","expectedLabel","receivedLabel","expand","includes","diffStringsUnified","aAnnotation","bAnnotation","changeLineTrailingSpaceColor","bgYellow","commonLineTrailingSpaceColor","emptyFirstOrLastLinePlaceholder","includeChangeCounts","diffStringsRaw","some","printLabel","expectedLine","DIFF_DELETE","receivedLine","DIFF_INSERT","replacedExpected","replacedReceived","replaceMatchedToAsymmetricMatcher","difference","shouldPrintDiff","expectedCycles","receivedCycles","isReplaceable","push","expectedReplaceable","receivedReplaceable","forEach","expectedValue","key","receivedValue","get","isAsymmetricMatcher","set","replaced","data","a","b","word","count","strings","maxLength","max","string","hint","generic","specific","comment","expectedColor","isDirectExpectCall","isNot","promise","receivedColor","secondArgument","secondArgumentColor","dimString"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.stringify =\n  exports.printWithType =\n  exports.printReceived =\n  exports.printExpected =\n  exports.printDiffOrStringify =\n  exports.pluralize =\n  exports.matcherHint =\n  exports.matcherErrorMessage =\n  exports.highlightTrailingWhitespace =\n  exports.getLabelPrinter =\n  exports.ensureNumbers =\n  exports.ensureNoExpected =\n  exports.ensureExpectedIsNumber =\n  exports.ensureExpectedIsNonNegativeInteger =\n  exports.ensureActualIsNumber =\n  exports.diff =\n  exports.SUGGEST_TO_CONTAIN_EQUAL =\n  exports.RECEIVED_COLOR =\n  exports.INVERTED_COLOR =\n  exports.EXPECTED_COLOR =\n  exports.DIM_COLOR =\n  exports.BOLD_WEIGHT =\n    void 0;\n\nvar _chalk = _interopRequireDefault(require('chalk'));\n\nvar _jestDiff = require('jest-diff');\n\nvar _jestGetType = require('jest-get-type');\n\nvar _prettyFormat = require('pretty-format');\n\nvar _Replaceable = _interopRequireDefault(require('./Replaceable'));\n\nvar _deepCyclicCopyReplaceable = _interopRequireDefault(\n  require('./deepCyclicCopyReplaceable')\n);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable local/ban-types-eventually */\nconst {\n  AsymmetricMatcher,\n  DOMCollection,\n  DOMElement,\n  Immutable,\n  ReactElement,\n  ReactTestComponent\n} = _prettyFormat.plugins;\nconst PLUGINS = [\n  ReactTestComponent,\n  ReactElement,\n  DOMElement,\n  DOMCollection,\n  Immutable,\n  AsymmetricMatcher\n];\nconst EXPECTED_COLOR = _chalk.default.green;\nexports.EXPECTED_COLOR = EXPECTED_COLOR;\nconst RECEIVED_COLOR = _chalk.default.red;\nexports.RECEIVED_COLOR = RECEIVED_COLOR;\nconst INVERTED_COLOR = _chalk.default.inverse;\nexports.INVERTED_COLOR = INVERTED_COLOR;\nconst BOLD_WEIGHT = _chalk.default.bold;\nexports.BOLD_WEIGHT = BOLD_WEIGHT;\nconst DIM_COLOR = _chalk.default.dim;\nexports.DIM_COLOR = DIM_COLOR;\nconst MULTILINE_REGEXP = /\\n/;\nconst SPACE_SYMBOL = '\\u{00B7}'; // middle dot\n\nconst NUMBERS = [\n  'zero',\n  'one',\n  'two',\n  'three',\n  'four',\n  'five',\n  'six',\n  'seven',\n  'eight',\n  'nine',\n  'ten',\n  'eleven',\n  'twelve',\n  'thirteen'\n];\n\nconst SUGGEST_TO_CONTAIN_EQUAL = _chalk.default.dim(\n  'Looks like you wanted to test for object/array equality with the stricter `toContain` matcher. You probably need to use `toContainEqual` instead.'\n);\n\nexports.SUGGEST_TO_CONTAIN_EQUAL = SUGGEST_TO_CONTAIN_EQUAL;\n\nconst stringify = (object, maxDepth = 10) => {\n  const MAX_LENGTH = 10000;\n  let result;\n\n  try {\n    result = (0, _prettyFormat.format)(object, {\n      maxDepth,\n      min: true,\n      plugins: PLUGINS\n    });\n  } catch {\n    result = (0, _prettyFormat.format)(object, {\n      callToJSON: false,\n      maxDepth,\n      min: true,\n      plugins: PLUGINS\n    });\n  }\n\n  return result.length >= MAX_LENGTH && maxDepth > 1\n    ? stringify(object, Math.floor(maxDepth / 2))\n    : result;\n};\n\nexports.stringify = stringify;\n\nconst highlightTrailingWhitespace = text =>\n  text.replace(/\\s+$/gm, _chalk.default.inverse('$&')); // Instead of inverse highlight which now implies a change,\n// replace common spaces with middle dot at the end of any line.\n\nexports.highlightTrailingWhitespace = highlightTrailingWhitespace;\n\nconst replaceTrailingSpaces = text =>\n  text.replace(/\\s+$/gm, spaces => SPACE_SYMBOL.repeat(spaces.length));\n\nconst printReceived = object =>\n  RECEIVED_COLOR(replaceTrailingSpaces(stringify(object)));\n\nexports.printReceived = printReceived;\n\nconst printExpected = value =>\n  EXPECTED_COLOR(replaceTrailingSpaces(stringify(value)));\n\nexports.printExpected = printExpected;\n\nconst printWithType = (\n  name,\n  value,\n  print // printExpected or printReceived\n) => {\n  const type = (0, _jestGetType.getType)(value);\n  const hasType =\n    type !== 'null' && type !== 'undefined'\n      ? `${name} has type:  ${type}\\n`\n      : '';\n  const hasValue = `${name} has value: ${print(value)}`;\n  return hasType + hasValue;\n};\n\nexports.printWithType = printWithType;\n\nconst ensureNoExpected = (expected, matcherName, options) => {\n  if (typeof expected !== 'undefined') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(\n      matcherErrorMessage(\n        matcherHint(matcherString, undefined, '', options), // Because expected is omitted in hint above,\n        // expected is black instead of green in message below.\n        'this matcher must not have an expected argument',\n        printWithType('Expected', expected, printExpected)\n      )\n    );\n  }\n};\n/**\n * Ensures that `actual` is of type `number | bigint`\n */\n\nexports.ensureNoExpected = ensureNoExpected;\n\nconst ensureActualIsNumber = (actual, matcherName, options) => {\n  if (typeof actual !== 'number' && typeof actual !== 'bigint') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(\n      matcherErrorMessage(\n        matcherHint(matcherString, undefined, undefined, options),\n        `${RECEIVED_COLOR('received')} value must be a number or bigint`,\n        printWithType('Received', actual, printReceived)\n      )\n    );\n  }\n};\n/**\n * Ensures that `expected` is of type `number | bigint`\n */\n\nexports.ensureActualIsNumber = ensureActualIsNumber;\n\nconst ensureExpectedIsNumber = (expected, matcherName, options) => {\n  if (typeof expected !== 'number' && typeof expected !== 'bigint') {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(\n      matcherErrorMessage(\n        matcherHint(matcherString, undefined, undefined, options),\n        `${EXPECTED_COLOR('expected')} value must be a number or bigint`,\n        printWithType('Expected', expected, printExpected)\n      )\n    );\n  }\n};\n/**\n * Ensures that `actual` & `expected` are of type `number | bigint`\n */\n\nexports.ensureExpectedIsNumber = ensureExpectedIsNumber;\n\nconst ensureNumbers = (actual, expected, matcherName, options) => {\n  ensureActualIsNumber(actual, matcherName, options);\n  ensureExpectedIsNumber(expected, matcherName, options);\n};\n\nexports.ensureNumbers = ensureNumbers;\n\nconst ensureExpectedIsNonNegativeInteger = (expected, matcherName, options) => {\n  if (\n    typeof expected !== 'number' ||\n    !Number.isSafeInteger(expected) ||\n    expected < 0\n  ) {\n    // Prepend maybe not only for backward compatibility.\n    const matcherString = (options ? '' : '[.not]') + matcherName;\n    throw new Error(\n      matcherErrorMessage(\n        matcherHint(matcherString, undefined, undefined, options),\n        `${EXPECTED_COLOR('expected')} value must be a non-negative integer`,\n        printWithType('Expected', expected, printExpected)\n      )\n    );\n  }\n}; // Given array of diffs, return concatenated string:\n// * include common substrings\n// * exclude change substrings which have opposite op\n// * include change substrings which have argument op\n//   with inverse highlight only if there is a common substring\n\nexports.ensureExpectedIsNonNegativeInteger = ensureExpectedIsNonNegativeInteger;\n\nconst getCommonAndChangedSubstrings = (diffs, op, hasCommonDiff) =>\n  diffs.reduce(\n    (reduced, diff) =>\n      reduced +\n      (diff[0] === _jestDiff.DIFF_EQUAL\n        ? diff[1]\n        : diff[0] !== op\n        ? ''\n        : hasCommonDiff\n        ? INVERTED_COLOR(diff[1])\n        : diff[1]),\n    ''\n  );\n\nconst isLineDiffable = (expected, received) => {\n  const expectedType = (0, _jestGetType.getType)(expected);\n  const receivedType = (0, _jestGetType.getType)(received);\n\n  if (expectedType !== receivedType) {\n    return false;\n  }\n\n  if ((0, _jestGetType.isPrimitive)(expected)) {\n    // Print generic line diff for strings only:\n    // * if neither string is empty\n    // * if either string has more than one line\n    return (\n      typeof expected === 'string' &&\n      typeof received === 'string' &&\n      expected.length !== 0 &&\n      received.length !== 0 &&\n      (MULTILINE_REGEXP.test(expected) || MULTILINE_REGEXP.test(received))\n    );\n  }\n\n  if (\n    expectedType === 'date' ||\n    expectedType === 'function' ||\n    expectedType === 'regexp'\n  ) {\n    return false;\n  }\n\n  if (expected instanceof Error && received instanceof Error) {\n    return false;\n  }\n\n  if (\n    receivedType === 'object' &&\n    typeof received.asymmetricMatch === 'function'\n  ) {\n    return false;\n  }\n\n  return true;\n};\n\nconst MAX_DIFF_STRING_LENGTH = 20000;\n\nconst printDiffOrStringify = (\n  expected,\n  received,\n  expectedLabel,\n  receivedLabel,\n  expand // CLI options: true if `--expand` or false if `--no-expand`\n) => {\n  if (\n    typeof expected === 'string' &&\n    typeof received === 'string' &&\n    expected.length !== 0 &&\n    received.length !== 0 &&\n    expected.length <= MAX_DIFF_STRING_LENGTH &&\n    received.length <= MAX_DIFF_STRING_LENGTH &&\n    expected !== received\n  ) {\n    if (expected.includes('\\n') || received.includes('\\n')) {\n      return (0, _jestDiff.diffStringsUnified)(expected, received, {\n        aAnnotation: expectedLabel,\n        bAnnotation: receivedLabel,\n        changeLineTrailingSpaceColor: _chalk.default.bgYellow,\n        commonLineTrailingSpaceColor: _chalk.default.bgYellow,\n        emptyFirstOrLastLinePlaceholder: 'â†µ',\n        // U+21B5\n        expand,\n        includeChangeCounts: true\n      });\n    }\n\n    const diffs = (0, _jestDiff.diffStringsRaw)(expected, received, true);\n    const hasCommonDiff = diffs.some(diff => diff[0] === _jestDiff.DIFF_EQUAL);\n    const printLabel = getLabelPrinter(expectedLabel, receivedLabel);\n    const expectedLine =\n      printLabel(expectedLabel) +\n      printExpected(\n        getCommonAndChangedSubstrings(\n          diffs,\n          _jestDiff.DIFF_DELETE,\n          hasCommonDiff\n        )\n      );\n    const receivedLine =\n      printLabel(receivedLabel) +\n      printReceived(\n        getCommonAndChangedSubstrings(\n          diffs,\n          _jestDiff.DIFF_INSERT,\n          hasCommonDiff\n        )\n      );\n    return expectedLine + '\\n' + receivedLine;\n  }\n\n  if (isLineDiffable(expected, received)) {\n    const {replacedExpected, replacedReceived} =\n      replaceMatchedToAsymmetricMatcher(\n        (0, _deepCyclicCopyReplaceable.default)(expected),\n        (0, _deepCyclicCopyReplaceable.default)(received),\n        [],\n        []\n      );\n    const difference = (0, _jestDiff.diff)(replacedExpected, replacedReceived, {\n      aAnnotation: expectedLabel,\n      bAnnotation: receivedLabel,\n      expand,\n      includeChangeCounts: true\n    });\n\n    if (\n      typeof difference === 'string' &&\n      difference.includes('- ' + expectedLabel) &&\n      difference.includes('+ ' + receivedLabel)\n    ) {\n      return difference;\n    }\n  }\n\n  const printLabel = getLabelPrinter(expectedLabel, receivedLabel);\n  const expectedLine = printLabel(expectedLabel) + printExpected(expected);\n  const receivedLine =\n    printLabel(receivedLabel) +\n    (stringify(expected) === stringify(received)\n      ? 'serializes to the same string'\n      : printReceived(received));\n  return expectedLine + '\\n' + receivedLine;\n}; // Sometimes, e.g. when comparing two numbers, the output from jest-diff\n// does not contain more information than the `Expected:` / `Received:` already gives.\n// In those cases, we do not print a diff to make the output shorter and not redundant.\n\nexports.printDiffOrStringify = printDiffOrStringify;\n\nconst shouldPrintDiff = (actual, expected) => {\n  if (typeof actual === 'number' && typeof expected === 'number') {\n    return false;\n  }\n\n  if (typeof actual === 'bigint' && typeof expected === 'bigint') {\n    return false;\n  }\n\n  if (typeof actual === 'boolean' && typeof expected === 'boolean') {\n    return false;\n  }\n\n  return true;\n};\n\nfunction replaceMatchedToAsymmetricMatcher(\n  replacedExpected,\n  replacedReceived,\n  expectedCycles,\n  receivedCycles\n) {\n  if (!_Replaceable.default.isReplaceable(replacedExpected, replacedReceived)) {\n    return {\n      replacedExpected,\n      replacedReceived\n    };\n  }\n\n  if (\n    expectedCycles.includes(replacedExpected) ||\n    receivedCycles.includes(replacedReceived)\n  ) {\n    return {\n      replacedExpected,\n      replacedReceived\n    };\n  }\n\n  expectedCycles.push(replacedExpected);\n  receivedCycles.push(replacedReceived);\n  const expectedReplaceable = new _Replaceable.default(replacedExpected);\n  const receivedReplaceable = new _Replaceable.default(replacedReceived);\n  expectedReplaceable.forEach((expectedValue, key) => {\n    const receivedValue = receivedReplaceable.get(key);\n\n    if (isAsymmetricMatcher(expectedValue)) {\n      if (expectedValue.asymmetricMatch(receivedValue)) {\n        receivedReplaceable.set(key, expectedValue);\n      }\n    } else if (isAsymmetricMatcher(receivedValue)) {\n      if (receivedValue.asymmetricMatch(expectedValue)) {\n        expectedReplaceable.set(key, receivedValue);\n      }\n    } else if (\n      _Replaceable.default.isReplaceable(expectedValue, receivedValue)\n    ) {\n      const replaced = replaceMatchedToAsymmetricMatcher(\n        expectedValue,\n        receivedValue,\n        expectedCycles,\n        receivedCycles\n      );\n      expectedReplaceable.set(key, replaced.replacedExpected);\n      receivedReplaceable.set(key, replaced.replacedReceived);\n    }\n  });\n  return {\n    replacedExpected: expectedReplaceable.object,\n    replacedReceived: receivedReplaceable.object\n  };\n}\n\nfunction isAsymmetricMatcher(data) {\n  const type = (0, _jestGetType.getType)(data);\n  return type === 'object' && typeof data.asymmetricMatch === 'function';\n}\n\nconst diff = (a, b, options) =>\n  shouldPrintDiff(a, b) ? (0, _jestDiff.diff)(a, b, options) : null;\n\nexports.diff = diff;\n\nconst pluralize = (word, count) =>\n  (NUMBERS[count] || count) + ' ' + word + (count === 1 ? '' : 's'); // To display lines of labeled values as two columns with monospace alignment:\n// given the strings which will describe the values,\n// return function which given each string, returns the label:\n// string, colon, space, and enough padding spaces to align the value.\n\nexports.pluralize = pluralize;\n\nconst getLabelPrinter = (...strings) => {\n  const maxLength = strings.reduce(\n    (max, string) => (string.length > max ? string.length : max),\n    0\n  );\n  return string => `${string}: ${' '.repeat(maxLength - string.length)}`;\n};\n\nexports.getLabelPrinter = getLabelPrinter;\n\nconst matcherErrorMessage = (\n  hint,\n  generic,\n  specific // incorrect value returned from call to printWithType\n) =>\n  `${hint}\\n\\n${_chalk.default.bold('Matcher error')}: ${generic}${\n    typeof specific === 'string' ? '\\n\\n' + specific : ''\n  }`; // Display assertion for the report when a test fails.\n// New format: rejects/resolves, not, and matcher name have black color\n// Old format: matcher name has dim color\n\nexports.matcherErrorMessage = matcherErrorMessage;\n\nconst matcherHint = (\n  matcherName,\n  received = 'received',\n  expected = 'expected',\n  options = {}\n) => {\n  const {\n    comment = '',\n    expectedColor = EXPECTED_COLOR,\n    isDirectExpectCall = false,\n    // seems redundant with received === ''\n    isNot = false,\n    promise = '',\n    receivedColor = RECEIVED_COLOR,\n    secondArgument = '',\n    secondArgumentColor = EXPECTED_COLOR\n  } = options;\n  let hint = '';\n  let dimString = 'expect'; // concatenate adjacent dim substrings\n\n  if (!isDirectExpectCall && received !== '') {\n    hint += DIM_COLOR(dimString + '(') + receivedColor(received);\n    dimString = ')';\n  }\n\n  if (promise !== '') {\n    hint += DIM_COLOR(dimString + '.') + promise;\n    dimString = '';\n  }\n\n  if (isNot) {\n    hint += DIM_COLOR(dimString + '.') + 'not';\n    dimString = '';\n  }\n\n  if (matcherName.includes('.')) {\n    // Old format: for backward compatibility,\n    // especially without promise or isNot options\n    dimString += matcherName;\n  } else {\n    // New format: omit period from matcherName arg\n    hint += DIM_COLOR(dimString + '.') + matcherName;\n    dimString = '';\n  }\n\n  if (expected === '') {\n    dimString += '()';\n  } else {\n    hint += DIM_COLOR(dimString + '(') + expectedColor(expected);\n\n    if (secondArgument) {\n      hint += DIM_COLOR(', ') + secondArgumentColor(secondArgument);\n    }\n\n    dimString = ')';\n  }\n\n  if (comment !== '') {\n    dimString += ' // ' + comment;\n  }\n\n  if (dimString !== '') {\n    hint += DIM_COLOR(dimString);\n  }\n\n  return hint;\n};\n\nexports.matcherHint = matcherHint;\n"]},"metadata":{},"sourceType":"script"}