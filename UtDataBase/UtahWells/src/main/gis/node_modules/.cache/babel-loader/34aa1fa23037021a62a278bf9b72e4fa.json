{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport { isNone as e, isSome as t } from \"../../../core/maybe.js\";\nimport { polygonCentroid as i, extentCentroid as s } from \"../../../geometry/support/centroid.js\";\nimport { getPolygonExtent as a, getGeometryExtent as r } from \"../../../geometry/support/extentUtils.js\";\nimport { toQuantizationTransform as n } from \"../../../geometry/support/quantizationUtils.js\";\nimport { isValid as o, equals as l } from \"../../../geometry/support/spatialReferenceUtils.js\";\nimport { convertFromGeometry as u } from \"../featureConversionUtils.js\";\nimport c from \"./AttributesBuilder.js\";\nimport { getWhereClause as m } from \"./attributeSupport.js\";\nimport { project as d, projectMany as h } from \"./projectionSupport.js\";\nimport { getTimeOperator as f } from \"./timeSupport.js\";\nimport { cleanFromGeometryEngine as p, getGeometry as g, transformCentroid as y } from \"./utils.js\";\nimport { isStringField as I } from \"../../support/fieldUtils.js\";\nimport { isNullCountSupported as x, calculateStringStatistics as T, calculateStatistics as F, processSummaryStatisticsResult as V, calculateUniqueValuesCount as v, createUVResult as b, calculateClassBreaks as z, resolveCBResult as A, calculateHistogram as S, getAttributeComparator as _, calculatePercentile as E } from \"../../../statistics/utils.js\";\nimport { loadArcade as R } from \"../../../support/arcadeOnDemand.js\";\n\nclass G {\n  constructor(e, t, i) {\n    this.items = e, this.queryGeometry = t, this.definitionExpression = i.definitionExpression, this.geometryType = i.geometryType, this.hasM = i.hasM, this.hasZ = i.hasZ, this.objectIdField = i.objectIdField, this.spatialReference = i.spatialReference, this.fieldsIndex = i.fieldsIndex, this.timeInfo = i.timeInfo, this.featureAdapter = i.featureAdapter, this.aggregateAdapter = i.aggregateAdapter;\n  }\n\n  get size() {\n    return this.items.length;\n  }\n\n  createQueryResponseForCount(e) {\n    const t = new c(e, this.featureAdapter, this.fieldsIndex);\n    if (!e.outStatistics) return t.countDistinctValues(this.items);\n    const {\n      groupByFieldsForStatistics: i,\n      having: s\n    } = e;\n    if (!!!(null == i ? void 0 : i.length)) return 1;\n    const a = new Map(),\n          r = new Map(),\n          n = new Set(),\n          o = e.outStatistics;\n\n    for (const l of o) {\n      const {\n        statisticType: e\n      } = l,\n            o = \"exceedslimit\" !== e ? l.onStatisticField : void 0;\n\n      if (!r.has(o)) {\n        const e = [];\n\n        for (const s of i) {\n          const i = this._getAttributeValues(t, s, a);\n\n          e.push(i);\n        }\n\n        r.set(o, this._calculateUniqueValues(e, t.returnDistinctValues));\n      }\n\n      const u = r.get(o);\n\n      for (const i in u) {\n        const {\n          data: e,\n          items: a\n        } = u[i],\n              r = e.join(\",\");\n        s && !t.validateItems(a, s) || n.add(r);\n      }\n    }\n\n    return n.size;\n  }\n\n  async createQueryResponse(e) {\n    let t;\n\n    if (e.outStatistics) {\n      t = e.outStatistics.some(e => \"exceedslimit\" === e.statisticType) ? this._createExceedsLimitQueryResponse(e) : await this._createStatisticsQueryResponse(e);\n    } else t = this._createFeatureQueryResponse(e);\n\n    return e.returnQueryGeometry && (o(e.outSR) && !l(this.queryGeometry.spatialReference, e.outSR) ? t.queryGeometry = p({\n      spatialReference: e.outSR,\n      ...d(this.queryGeometry, this.queryGeometry.spatialReference, e.outSR)\n    }) : t.queryGeometry = p({\n      spatialReference: e.outSR,\n      ...this.queryGeometry\n    })), t;\n  }\n\n  createSnappingResponse(t, i) {\n    const s = this.featureAdapter,\n          a = w(this.hasZ, this.hasM),\n          {\n      x: r,\n      y: n\n    } = t.point,\n          o = \"number\" == typeof t.distance ? t.distance : t.distance.x,\n          l = \"number\" == typeof t.distance ? t.distance : t.distance.y,\n          u = {\n      candidates: []\n    },\n          c = \"esriGeometryPolygon\" === this.geometryType,\n          m = this._getPointCreator(t.point, this.spatialReference, i);\n\n    for (const d of this.items) {\n      const i = s.getGeometry(d);\n      if (e(i)) continue;\n      const {\n        coords: h,\n        lengths: f\n      } = i;\n\n      if (t.types & N.EDGE) {\n        let e = 0;\n\n        for (let t = 0; t < f.length; t++) {\n          const i = f[t];\n\n          for (let t = 0; t < i; t++, e += a) {\n            const c = h[e],\n                  f = h[e + 1];\n\n            if (t !== i - 1) {\n              const t = h[e + a],\n                    i = h[e + a + 1],\n                    {\n                x: p,\n                y: g\n              } = j(r, n, c, f, t, i),\n                    y = (r - p) / o,\n                    I = (n - g) / l,\n                    x = y * y + I * I;\n              x <= 1 && u.candidates.push({\n                type: \"edge\",\n                objectId: s.getObjectId(d),\n                distance: Math.sqrt(x),\n                target: m(p, g),\n                start: m(c, f),\n                end: m(t, i)\n              });\n            }\n          }\n        }\n      }\n\n      if (t.types & N.VERTEX) {\n        const e = c ? h.length - a : h.length;\n\n        for (let t = 0; t < e; t += a) {\n          const e = h[t],\n                i = h[t + 1],\n                a = (r - e) / o,\n                c = (n - i) / l,\n                f = a * a + c * c;\n          f <= 1 && u.candidates.push({\n            type: \"vertex\",\n            objectId: s.getObjectId(d),\n            distance: Math.sqrt(f),\n            target: m(e, i)\n          });\n        }\n      }\n    }\n\n    return u.candidates.sort((e, t) => e.distance - t.distance), u;\n  }\n\n  _getPointCreator(e, i, s) {\n    const a = t(s) && !l(i, s) ? e => d(e, i, s) : e => e;\n    return null != e.z && null != e.m ? (t, i) => a({\n      x: t,\n      y: i,\n      z: e.z,\n      m: e.m\n    }) : null != e.z ? (t, i) => a({\n      x: t,\n      y: i,\n      z: e.z\n    }) : null != e.m ? (t, i) => a({\n      x: t,\n      y: i,\n      m: e.m\n    }) : (e, t) => a({\n      x: e,\n      y: t\n    });\n  }\n\n  executeAttributesQuery(e) {\n    const t = m(e.where, this.fieldsIndex);\n    if (!t) return Promise.resolve(this);\n\n    if (t.isStandardized) {\n      let i = 0;\n      const s = [];\n\n      for (const e of this.items) t.testFeature(e, this.featureAdapter) && (s[i++] = e);\n\n      const a = new G(s, this.queryGeometry, this);\n      return a.definitionExpression = e.where, Promise.resolve(a);\n    }\n\n    return Promise.reject(new TypeError(\"Where clause is not standardized\"));\n  }\n\n  executeAggregateIdsQuery(t) {\n    if (!t.aggregateIds || !t.aggregateIds.length || e(this.aggregateAdapter)) return Promise.resolve(this);\n    const i = new Set();\n\n    for (const e of t.aggregateIds) {\n      this.aggregateAdapter.getFeatureObjectIds(e).forEach(e => i.add(e));\n    }\n\n    const s = this.featureAdapter.getObjectId;\n    return Promise.resolve(new G(this.items.filter(e => i.has(s(e))), this.queryGeometry, this));\n  }\n\n  executeObjectIdsQuery(e) {\n    if (!e.objectIds || !e.objectIds.length) return Promise.resolve(this);\n    const t = new Set(e.objectIds),\n          i = this.featureAdapter.getObjectId;\n    return Promise.resolve(new G(this.items.filter(e => t.has(i(e))), this.queryGeometry, this));\n  }\n\n  executeTimeQuery(e) {\n    const i = f(this.timeInfo, e.timeExtent, this.featureAdapter);\n    if (!t(i)) return Promise.resolve(this);\n    const s = this.items.filter(i);\n    return Promise.resolve(new G(s, this.queryGeometry, this));\n  }\n\n  filterLatest() {\n    const {\n      trackIdField: e,\n      startTimeField: t,\n      endTimeField: i\n    } = this.timeInfo,\n          s = i || t,\n          a = new Map(),\n          r = this.featureAdapter.getAttribute;\n\n    for (const o of this.items) {\n      const t = r(o, e),\n            i = r(o, s),\n            n = a.get(t);\n      (!n || i > r(n, s)) && a.set(t, o);\n    }\n\n    const n = Array.from(a.values());\n    return Promise.resolve(new G(n, this.queryGeometry, this));\n  }\n\n  async project(e) {\n    if (!e || l(this.spatialReference, e)) return this;\n    const t = this.featureAdapter,\n          i = (await h(this.items.map(e => g(this.geometryType, this.hasZ, this.hasM, t.getGeometry(e))), this.spatialReference, e)).map((e, i) => t.cloneWithGeometry(this.items[i], u(e, this.hasZ, this.hasM)));\n    return new G(i, this.queryGeometry, {\n      definitionExpression: this.definitionExpression,\n      geometryType: this.geometryType,\n      hasM: this.hasM,\n      hasZ: this.hasZ,\n      objectIdField: this.objectIdField,\n      spatialReference: e,\n      fieldsIndex: this.fieldsIndex,\n      timeInfo: this.timeInfo,\n      featureAdapter: this.featureAdapter\n    });\n  }\n\n  async createSummaryStatisticsResponse(e, t) {\n    const {\n      field: i,\n      valueExpression: s,\n      normalizationField: a,\n      normalizationType: r,\n      normalizationTotal: n,\n      minValue: o,\n      maxValue: l,\n      scale: u\n    } = t,\n          c = this.fieldsIndex.isDateField(i),\n          m = await this._getDataValues(e, {\n      field: i,\n      valueExpression: s,\n      normalizationField: a,\n      normalizationType: r,\n      normalizationTotal: n,\n      scale: u\n    }),\n          d = x({\n      normalizationType: r,\n      normalizationField: a,\n      minValue: o,\n      maxValue: l\n    }),\n          h = this.fieldsIndex.get(i),\n          f = {\n      value: .5,\n      fieldType: null == h ? void 0 : h.type\n    },\n          p = I(h) ? T({\n      values: m,\n      supportsNullCount: d,\n      percentileParams: f\n    }) : F({\n      values: m,\n      minValue: o,\n      maxValue: l,\n      useSampleStdDev: !r,\n      supportsNullCount: d,\n      percentileParams: f\n    });\n    return V(p, c);\n  }\n\n  async createUniqueValuesResponse(e, t) {\n    const {\n      field: i,\n      valueExpression: s,\n      domain: a,\n      returnAllCodedValues: r,\n      scale: n\n    } = t,\n          o = await this._getDataValues(e, {\n      field: i,\n      valueExpression: s,\n      scale: n\n    }),\n          l = v(o);\n    return b(l, a, r);\n  }\n\n  async createClassBreaksResponse(e, t) {\n    const {\n      field: i,\n      valueExpression: s,\n      normalizationField: a,\n      normalizationType: r,\n      normalizationTotal: n,\n      classificationMethod: o,\n      standardDeviationInterval: l,\n      minValue: u,\n      maxValue: c,\n      numClasses: m,\n      scale: d\n    } = t,\n          h = await this._getDataValues(e, {\n      field: i,\n      valueExpression: s,\n      normalizationField: a,\n      normalizationType: r,\n      normalizationTotal: n,\n      scale: d\n    }),\n          f = z(h, {\n      field: i,\n      normalizationField: a,\n      normalizationType: r,\n      normalizationTotal: n,\n      classificationMethod: o,\n      standardDeviationInterval: l,\n      minValue: u,\n      maxValue: c,\n      numClasses: m\n    });\n    return A(f, o);\n  }\n\n  async createHistogramResponse(e, t) {\n    const {\n      field: i,\n      valueExpression: s,\n      normalizationField: a,\n      normalizationType: r,\n      normalizationTotal: n,\n      classificationMethod: o,\n      standardDeviationInterval: l,\n      minValue: u,\n      maxValue: c,\n      numBins: m,\n      scale: d\n    } = t,\n          h = await this._getDataValues(e, {\n      field: i,\n      valueExpression: s,\n      normalizationField: a,\n      normalizationType: r,\n      normalizationTotal: n,\n      scale: d\n    });\n    return S(h, {\n      field: i,\n      normalizationField: a,\n      normalizationType: r,\n      normalizationTotal: n,\n      classificationMethod: o,\n      standardDeviationInterval: l,\n      minValue: u,\n      maxValue: c,\n      numBins: m\n    });\n  }\n\n  _sortFeatures(e, t, i) {\n    if (e.length > 1 && t && t.length) for (const s of t.reverse()) {\n      const t = s.split(\" \"),\n            a = t[0],\n            r = this.fieldsIndex.get(a),\n            n = t[1] && \"desc\" === t[1].toLowerCase(),\n            o = _(null == r ? void 0 : r.type, n);\n\n      e.sort((e, t) => {\n        const s = i(e, a, r),\n              n = i(t, a, r);\n        return o(s, n);\n      });\n    }\n  }\n\n  _createFeatureQueryResponse(e) {\n    const t = this.items,\n          {\n      geometryType: i,\n      hasM: s,\n      hasZ: a,\n      objectIdField: r,\n      spatialReference: o\n    } = this,\n          {\n      outFields: l,\n      outSR: u,\n      quantizationParameters: c,\n      resultRecordCount: m,\n      resultOffset: d,\n      returnZ: h,\n      returnM: f\n    } = e,\n          g = null != m && t.length > (d || 0) + m,\n          y = l && (l.includes(\"*\") ? [...this.fieldsIndex.fields] : l.map(e => this.fieldsIndex.get(e)));\n    return {\n      exceededTransferLimit: g,\n      features: this._createFeatures(e, t),\n      fields: y,\n      geometryType: i,\n      hasM: s && f,\n      hasZ: a && h,\n      objectIdFieldName: r,\n      spatialReference: p(u || o),\n      transform: c && n(c) || null\n    };\n  }\n\n  _createFeatures(e, t) {\n    const i = new c(e, this.featureAdapter, this.fieldsIndex),\n          {\n      hasM: s,\n      hasZ: a\n    } = this,\n          {\n      orderByFields: r,\n      quantizationParameters: o,\n      returnGeometry: l,\n      returnCentroid: u,\n      maxAllowableOffset: m,\n      resultOffset: d,\n      resultRecordCount: h,\n      returnZ: f = !1,\n      returnM: p = !1\n    } = e,\n          I = a && f,\n          x = s && p;\n    let T = [],\n        F = 0;\n    const V = [...t];\n\n    if (this._sortFeatures(V, r, (e, t, s) => i.getFieldValue(e, t, s)), l || u) {\n      const e = n(o);\n      if (l && !u) for (const t of V) T[F++] = {\n        attributes: i.getAttributes(t),\n        geometry: g(this.geometryType, this.hasZ, this.hasM, this.featureAdapter.getGeometry(t), m, e, I, x)\n      };else if (!l && u) for (const t of V) T[F++] = {\n        attributes: i.getAttributes(t),\n        centroid: y(this, this.featureAdapter.getCentroid(t, this), e)\n      };else for (const t of V) T[F++] = {\n        attributes: i.getAttributes(t),\n        centroid: y(this, this.featureAdapter.getCentroid(t, this), e),\n        geometry: g(this.geometryType, this.hasZ, this.hasM, this.featureAdapter.getGeometry(t), m, e, I, x)\n      };\n    } else for (const n of V) {\n      const e = i.getAttributes(n);\n      e && (T[F++] = {\n        attributes: e\n      });\n    }\n\n    const v = d || 0;\n\n    if (null != h) {\n      const e = v + h;\n      T = T.slice(v, Math.min(T.length, e));\n    }\n\n    return T;\n  }\n\n  _createExceedsLimitQueryResponse(e) {\n    let i = !1,\n        s = Number.POSITIVE_INFINITY,\n        a = Number.POSITIVE_INFINITY,\n        r = Number.POSITIVE_INFINITY;\n\n    for (const t of e.outStatistics) if (\"exceedslimit\" === t.statisticType) {\n      s = null != t.maxPointCount ? t.maxPointCount : Number.POSITIVE_INFINITY, a = null != t.maxRecordCount ? t.maxRecordCount : Number.POSITIVE_INFINITY, r = null != t.maxVertexCount ? t.maxVertexCount : Number.POSITIVE_INFINITY;\n      break;\n    }\n\n    if (\"esriGeometryPoint\" === this.geometryType) i = this.items.length > s;else if (this.items.length > a) i = !0;else {\n      const e = this.hasZ ? this.hasM ? 4 : 3 : this.hasM ? 3 : 2,\n            s = this.featureAdapter;\n      i = this.items.reduce((e, i) => {\n        const a = s.getGeometry(i);\n        return e + (t(a) && a.coords.length || 0);\n      }, 0) / e > r;\n    }\n    return {\n      fields: [{\n        name: \"exceedslimit\",\n        type: \"esriFieldTypeInteger\",\n        alias: \"exceedslimit\",\n        sqlType: \"sqlTypeInteger\",\n        domain: null,\n        defaultValue: null\n      }],\n      features: [{\n        attributes: {\n          exceedslimit: Number(i)\n        }\n      }]\n    };\n  }\n\n  async _createStatisticsQueryResponse(e) {\n    const t = {\n      attributes: {}\n    },\n          i = [],\n          s = new Map(),\n          a = new Map(),\n          r = new Map(),\n          n = new Map(),\n          o = new c(e, this.featureAdapter, this.fieldsIndex),\n          l = e.outStatistics,\n          {\n      groupByFieldsForStatistics: u,\n      having: m,\n      orderByFields: d\n    } = e,\n          h = u && u.length,\n          f = !!h,\n          p = f && u[0],\n          g = f && !this.fieldsIndex.get(p);\n\n    for (const c of l) {\n      const {\n        outStatisticFieldName: e,\n        statisticType: l\n      } = c,\n            d = c,\n            y = \"exceedslimit\" !== l ? c.onStatisticField : void 0,\n            I = \"percentile_disc\" === l || \"percentile_cont\" === l,\n            x = \"EnvelopeAggregate\" === l || \"CentroidAggregate\" === l || \"ConvexHullAggregate\" === l,\n            T = f && 1 === h && (y === p || g) && \"count\" === l;\n\n      if (f) {\n        if (!r.has(y)) {\n          const e = [];\n\n          for (const t of u) {\n            const i = this._getAttributeValues(o, t, s);\n\n            e.push(i);\n          }\n\n          r.set(y, this._calculateUniqueValues(e, o.returnDistinctValues));\n        }\n\n        const t = r.get(y);\n\n        for (const i in t) {\n          const {\n            count: a,\n            data: r,\n            items: l,\n            itemPositions: c\n          } = t[i],\n                h = r.join(\",\");\n\n          if (!m || o.validateItems(l, m)) {\n            const t = n.get(h) || {\n              attributes: {}\n            };\n\n            if (x) {\n              t.aggregateGeometries || (t.aggregateGeometries = {});\n              const {\n                aggregateGeometries: e,\n                outStatisticFieldName: i\n              } = await this._getAggregateGeometry(d, l);\n              t.aggregateGeometries[i] = e;\n            } else {\n              let i = null;\n              if (T) i = a;else {\n                const e = this._getAttributeValues(o, y, s),\n                      t = c.map(t => e[t]);\n\n                i = I && \"statisticParameters\" in d ? this._getPercentileValue(d, t) : this._getStatisticValue(d, t, null, o.returnDistinctValues);\n              }\n              t.attributes[e] = i;\n            }\n\n            u.forEach((e, i) => t.attributes[this.fieldsIndex.get(e) ? e : `EXPR_${i + 1}`] = r[i]), n.set(h, t);\n          }\n        }\n      } else if (x) {\n        t.aggregateGeometries || (t.aggregateGeometries = {});\n        const {\n          aggregateGeometries: e,\n          outStatisticFieldName: i\n        } = await this._getAggregateGeometry(d, this.items);\n        t.aggregateGeometries[i] = e;\n      } else {\n        const i = this._getAttributeValues(o, y, s);\n\n        t.attributes[e] = I && \"statisticParameters\" in d ? this._getPercentileValue(d, i) : this._getStatisticValue(d, i, a, o.returnDistinctValues);\n      }\n\n      i.push({\n        name: e,\n        alias: e,\n        type: \"esriFieldTypeDouble\"\n      });\n    }\n\n    const y = f ? Array.from(n.values()) : [t];\n    return this._sortFeatures(y, d, (e, t) => e.attributes[t]), {\n      fields: i,\n      features: y\n    };\n  }\n\n  async _getAggregateGeometry(e, t) {\n    const n = await import(\"../../../geometry/geometryEngineJSON.js\"),\n          {\n      statisticType: o,\n      outStatisticFieldName: l\n    } = e,\n          {\n      featureAdapter: u,\n      spatialReference: c,\n      geometryType: m,\n      hasZ: d,\n      hasM: h\n    } = this,\n          f = t.map(e => g(m, d, h, u.getGeometry(e))),\n          p = n.convexHull(c, f, !0)[0],\n          y = {\n      aggregateGeometries: null,\n      outStatisticFieldName: null\n    };\n\n    if (\"EnvelopeAggregate\" === o) {\n      const e = p ? a(p) : r(n.union(c, f));\n      y.aggregateGeometries = { ...e,\n        spatialReference: c\n      }, y.outStatisticFieldName = l || \"extent\";\n    } else if (\"CentroidAggregate\" === o) {\n      const e = p ? i(p) : s(r(n.union(c, f)));\n      y.aggregateGeometries = {\n        x: e[0],\n        y: e[1],\n        spatialReference: c\n      }, y.outStatisticFieldName = l || \"centroid\";\n    } else \"ConvexHullAggregate\" === o && (y.aggregateGeometries = p, y.outStatisticFieldName = l || \"convexHull\");\n\n    return y;\n  }\n\n  _getStatisticValue(e, t, i, s) {\n    const {\n      onStatisticField: a,\n      statisticType: r\n    } = e;\n    let n = null;\n    n = null != i && i.has(a) ? i.get(a) : I(this.fieldsIndex.get(a)) ? T({\n      values: t,\n      returnDistinct: s\n    }) : F({\n      values: t,\n      minValue: null,\n      maxValue: null,\n      useSampleStdDev: !0\n    }), i && i.set(a, n);\n    return n[\"var\" === r ? \"variance\" : r];\n  }\n\n  _getPercentileValue(e, t) {\n    const {\n      onStatisticField: i,\n      statisticParameters: s,\n      statisticType: a\n    } = e,\n          {\n      value: r,\n      orderBy: n\n    } = s,\n          o = this.fieldsIndex.get(i),\n          l = {\n      value: r,\n      orderBy: n,\n      fieldType: null == o ? void 0 : o.type,\n      isDiscrete: \"percentile_disc\" === a\n    };\n    return E(t, l);\n  }\n\n  _getAttributeValues(e, t, i) {\n    if (i.has(t)) return i.get(t);\n    const s = this.fieldsIndex.get(t),\n          a = this.items.map(i => e.getFieldValue(i, t, s));\n    return i.set(t, a), a;\n  }\n\n  _getAttributeNormalizedValues(e, t) {\n    return this.items.map(i => e.getNormalizedValue(i, {\n      field: t.field,\n      fieldInfo: this.fieldsIndex.get(t.field),\n      normalizationField: t.normalizationField,\n      normalizationFieldInfo: this.fieldsIndex.get(t.normalizationField),\n      normalizationType: t.normalizationType,\n      normalizationTotal: t.normalizationTotal\n    }));\n  }\n\n  async _getAttributeExpressionValues(e, t, i) {\n    const {\n      arcadeUtils: s\n    } = await R(),\n          a = s.createFunction(t),\n          r = i && s.getViewInfo(i);\n    return this.items.map(t => e.getExpressionValue(t, {\n      compiledFunc: a,\n      viewInfo: r\n    }, s));\n  }\n\n  _calculateUniqueValues(e, t) {\n    const i = {},\n          s = this.items,\n          a = s.length;\n\n    for (let r = 0; r < a; r++) {\n      const a = s[r],\n            n = [];\n\n      for (const t of e) n.push(t[r]);\n\n      const o = n.join(\",\");\n      t ? null == i[o] && (i[o] = {\n        count: 1,\n        data: n,\n        items: [a],\n        itemPositions: [r]\n      }) : null == i[o] ? i[o] = {\n        count: 1,\n        data: n,\n        items: [a],\n        itemPositions: [r]\n      } : (i[o].count++, i[o].items.push(a), i[o].itemPositions.push(r));\n    }\n\n    return i;\n  }\n\n  async _getDataValues(e, t) {\n    const i = new c(e, this.featureAdapter, this.fieldsIndex),\n          {\n      valueExpression: s,\n      field: a,\n      normalizationField: r,\n      normalizationType: n,\n      normalizationTotal: o,\n      scale: l\n    } = t,\n          u = s ? {\n      viewingMode: \"map\",\n      scale: l,\n      spatialReference: e.outSR || this.spatialReference\n    } : null;\n    return s ? this._getAttributeExpressionValues(i, s, u) : this._getAttributeNormalizedValues(i, {\n      field: a,\n      normalizationField: r,\n      normalizationType: n,\n      normalizationTotal: o\n    });\n  }\n\n}\n\nfunction j(e, t, i, s, a, r) {\n  const n = a - i,\n        o = r - s,\n        l = n * n + o * o,\n        u = (e - i) * n + (t - s) * o,\n        c = Math.min(1, Math.max(0, u / l));\n  return {\n    x: i + n * c,\n    y: s + o * c\n  };\n}\n\nfunction w(e, t) {\n  return e ? t ? 4 : 3 : t ? 3 : 2;\n}\n\nvar N;\n!function (e) {\n  e[e.NONE = 0] = \"NONE\", e[e.EDGE = 1] = \"EDGE\", e[e.VERTEX = 2] = \"VERTEX\";\n}(N || (N = {}));\nexport { N as SnappingTypes, G as default };","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/gis/node_modules/@arcgis/core/layers/graphics/data/QueryEngineResult.js"],"names":["isNone","e","isSome","t","polygonCentroid","i","extentCentroid","s","getPolygonExtent","a","getGeometryExtent","r","toQuantizationTransform","n","isValid","o","equals","l","convertFromGeometry","u","c","getWhereClause","m","project","d","projectMany","h","getTimeOperator","f","cleanFromGeometryEngine","p","getGeometry","g","transformCentroid","y","isStringField","I","isNullCountSupported","x","calculateStringStatistics","T","calculateStatistics","F","processSummaryStatisticsResult","V","calculateUniqueValuesCount","v","createUVResult","b","calculateClassBreaks","z","resolveCBResult","A","calculateHistogram","S","getAttributeComparator","_","calculatePercentile","E","loadArcade","R","G","constructor","items","queryGeometry","definitionExpression","geometryType","hasM","hasZ","objectIdField","spatialReference","fieldsIndex","timeInfo","featureAdapter","aggregateAdapter","size","length","createQueryResponseForCount","outStatistics","countDistinctValues","groupByFieldsForStatistics","having","Map","Set","statisticType","onStatisticField","has","_getAttributeValues","push","set","_calculateUniqueValues","returnDistinctValues","get","data","join","validateItems","add","createQueryResponse","some","_createExceedsLimitQueryResponse","_createStatisticsQueryResponse","_createFeatureQueryResponse","returnQueryGeometry","outSR","createSnappingResponse","w","point","distance","candidates","_getPointCreator","coords","lengths","types","N","EDGE","j","type","objectId","getObjectId","Math","sqrt","target","start","end","VERTEX","sort","executeAttributesQuery","where","Promise","resolve","isStandardized","testFeature","reject","TypeError","executeAggregateIdsQuery","aggregateIds","getFeatureObjectIds","forEach","filter","executeObjectIdsQuery","objectIds","executeTimeQuery","timeExtent","filterLatest","trackIdField","startTimeField","endTimeField","getAttribute","Array","from","values","map","cloneWithGeometry","createSummaryStatisticsResponse","field","valueExpression","normalizationField","normalizationType","normalizationTotal","minValue","maxValue","scale","isDateField","_getDataValues","value","fieldType","supportsNullCount","percentileParams","useSampleStdDev","createUniqueValuesResponse","domain","returnAllCodedValues","createClassBreaksResponse","classificationMethod","standardDeviationInterval","numClasses","createHistogramResponse","numBins","_sortFeatures","reverse","split","toLowerCase","outFields","quantizationParameters","resultRecordCount","resultOffset","returnZ","returnM","includes","fields","exceededTransferLimit","features","_createFeatures","objectIdFieldName","transform","orderByFields","returnGeometry","returnCentroid","maxAllowableOffset","getFieldValue","attributes","getAttributes","geometry","centroid","getCentroid","slice","min","Number","POSITIVE_INFINITY","maxPointCount","maxRecordCount","maxVertexCount","reduce","name","alias","sqlType","defaultValue","exceedslimit","outStatisticFieldName","count","itemPositions","aggregateGeometries","_getAggregateGeometry","_getPercentileValue","_getStatisticValue","convexHull","union","returnDistinct","statisticParameters","orderBy","isDiscrete","_getAttributeNormalizedValues","getNormalizedValue","fieldInfo","normalizationFieldInfo","_getAttributeExpressionValues","arcadeUtils","createFunction","getViewInfo","getExpressionValue","compiledFunc","viewInfo","viewingMode","max","NONE","SnappingTypes","default"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,MAAM,IAAIC,CAAjB,EAAmBC,MAAM,IAAIC,CAA7B,QAAmC,wBAAnC;AAA4D,SAAOC,eAAe,IAAIC,CAA1B,EAA4BC,cAAc,IAAIC,CAA9C,QAAoD,uCAApD;AAA4F,SAAOC,gBAAgB,IAAIC,CAA3B,EAA6BC,iBAAiB,IAAIC,CAAlD,QAAwD,0CAAxD;AAAmG,SAAOC,uBAAuB,IAAIC,CAAlC,QAAwC,gDAAxC;AAAyF,SAAOC,OAAO,IAAIC,CAAlB,EAAoBC,MAAM,IAAIC,CAA9B,QAAoC,oDAApC;AAAyF,SAAOC,mBAAmB,IAAIC,CAA9B,QAAoC,8BAApC;AAAmE,OAAOC,CAAP,MAAa,wBAAb;AAAsC,SAAOC,cAAc,IAAIC,CAAzB,QAA+B,uBAA/B;AAAuD,SAAOC,OAAO,IAAIC,CAAlB,EAAoBC,WAAW,IAAIC,CAAnC,QAAyC,wBAAzC;AAAkE,SAAOC,eAAe,IAAIC,CAA1B,QAAgC,kBAAhC;AAAmD,SAAOC,uBAAuB,IAAIC,CAAlC,EAAoCC,WAAW,IAAIC,CAAnD,EAAqDC,iBAAiB,IAAIC,CAA1E,QAAgF,YAAhF;AAA6F,SAAOC,aAAa,IAAIC,CAAxB,QAA8B,6BAA9B;AAA4D,SAAOC,oBAAoB,IAAIC,CAA/B,EAAiCC,yBAAyB,IAAIC,CAA9D,EAAgEC,mBAAmB,IAAIC,CAAvF,EAAyFC,8BAA8B,IAAIC,CAA3H,EAA6HC,0BAA0B,IAAIC,CAA3J,EAA6JC,cAAc,IAAIC,CAA/K,EAAiLC,oBAAoB,IAAIC,CAAzM,EAA2MC,eAAe,IAAIC,CAA9N,EAAgOC,kBAAkB,IAAIC,CAAtP,EAAwPC,sBAAsB,IAAIC,CAAlR,EAAoRC,mBAAmB,IAAIC,CAA3S,QAAiT,8BAAjT;AAAgV,SAAOC,UAAU,IAAIC,CAArB,QAA2B,oCAA3B;;AAAgE,MAAMC,CAAN,CAAO;AAACC,EAAAA,WAAW,CAAC7D,CAAD,EAAGE,CAAH,EAAKE,CAAL,EAAO;AAAC,SAAK0D,KAAL,GAAW9D,CAAX,EAAa,KAAK+D,aAAL,GAAmB7D,CAAhC,EAAkC,KAAK8D,oBAAL,GAA0B5D,CAAC,CAAC4D,oBAA9D,EAAmF,KAAKC,YAAL,GAAkB7D,CAAC,CAAC6D,YAAvG,EAAoH,KAAKC,IAAL,GAAU9D,CAAC,CAAC8D,IAAhI,EAAqI,KAAKC,IAAL,GAAU/D,CAAC,CAAC+D,IAAjJ,EAAsJ,KAAKC,aAAL,GAAmBhE,CAAC,CAACgE,aAA3K,EAAyL,KAAKC,gBAAL,GAAsBjE,CAAC,CAACiE,gBAAjN,EAAkO,KAAKC,WAAL,GAAiBlE,CAAC,CAACkE,WAArP,EAAiQ,KAAKC,QAAL,GAAcnE,CAAC,CAACmE,QAAjR,EAA0R,KAAKC,cAAL,GAAoBpE,CAAC,CAACoE,cAAhT,EAA+T,KAAKC,gBAAL,GAAsBrE,CAAC,CAACqE,gBAAvV;AAAwW;;AAAQ,MAAJC,IAAI,GAAE;AAAC,WAAO,KAAKZ,KAAL,CAAWa,MAAlB;AAAyB;;AAAAC,EAAAA,2BAA2B,CAAC5E,CAAD,EAAG;AAAC,UAAME,CAAC,GAAC,IAAIiB,CAAJ,CAAMnB,CAAN,EAAQ,KAAKwE,cAAb,EAA4B,KAAKF,WAAjC,CAAR;AAAsD,QAAG,CAACtE,CAAC,CAAC6E,aAAN,EAAoB,OAAO3E,CAAC,CAAC4E,mBAAF,CAAsB,KAAKhB,KAA3B,CAAP;AAAyC,UAAK;AAACiB,MAAAA,0BAA0B,EAAC3E,CAA5B;AAA8B4E,MAAAA,MAAM,EAAC1E;AAArC,QAAwCN,CAA7C;AAA+C,QAAG,CAAC,CAAC,EAAE,QAAMI,CAAN,GAAQ,KAAK,CAAb,GAAeA,CAAC,CAACuE,MAAnB,CAAL,EAAgC,OAAO,CAAP;AAAS,UAAMnE,CAAC,GAAC,IAAIyE,GAAJ,EAAR;AAAA,UAAgBvE,CAAC,GAAC,IAAIuE,GAAJ,EAAlB;AAAA,UAA0BrE,CAAC,GAAC,IAAIsE,GAAJ,EAA5B;AAAA,UAAoCpE,CAAC,GAACd,CAAC,CAAC6E,aAAxC;;AAAsD,SAAI,MAAM7D,CAAV,IAAeF,CAAf,EAAiB;AAAC,YAAK;AAACqE,QAAAA,aAAa,EAACnF;AAAf,UAAkBgB,CAAvB;AAAA,YAAyBF,CAAC,GAAC,mBAAiBd,CAAjB,GAAmBgB,CAAC,CAACoE,gBAArB,GAAsC,KAAK,CAAtE;;AAAwE,UAAG,CAAC1E,CAAC,CAAC2E,GAAF,CAAMvE,CAAN,CAAJ,EAAa;AAAC,cAAMd,CAAC,GAAC,EAAR;;AAAW,aAAI,MAAMM,CAAV,IAAeF,CAAf,EAAiB;AAAC,gBAAMA,CAAC,GAAC,KAAKkF,mBAAL,CAAyBpF,CAAzB,EAA2BI,CAA3B,EAA6BE,CAA7B,CAAR;;AAAwCR,UAAAA,CAAC,CAACuF,IAAF,CAAOnF,CAAP;AAAU;;AAAAM,QAAAA,CAAC,CAAC8E,GAAF,CAAM1E,CAAN,EAAQ,KAAK2E,sBAAL,CAA4BzF,CAA5B,EAA8BE,CAAC,CAACwF,oBAAhC,CAAR;AAA+D;;AAAA,YAAMxE,CAAC,GAACR,CAAC,CAACiF,GAAF,CAAM7E,CAAN,CAAR;;AAAiB,WAAI,MAAMV,CAAV,IAAec,CAAf,EAAiB;AAAC,cAAK;AAAC0E,UAAAA,IAAI,EAAC5F,CAAN;AAAQ8D,UAAAA,KAAK,EAACtD;AAAd,YAAiBU,CAAC,CAACd,CAAD,CAAvB;AAAA,cAA2BM,CAAC,GAACV,CAAC,CAAC6F,IAAF,CAAO,GAAP,CAA7B;AAAyCvF,QAAAA,CAAC,IAAE,CAACJ,CAAC,CAAC4F,aAAF,CAAgBtF,CAAhB,EAAkBF,CAAlB,CAAJ,IAA0BM,CAAC,CAACmF,GAAF,CAAMrF,CAAN,CAA1B;AAAmC;AAAC;;AAAA,WAAOE,CAAC,CAAC8D,IAAT;AAAc;;AAAyB,QAAnBsB,mBAAmB,CAAChG,CAAD,EAAG;AAAC,QAAIE,CAAJ;;AAAM,QAAGF,CAAC,CAAC6E,aAAL,EAAmB;AAAC3E,MAAAA,CAAC,GAACF,CAAC,CAAC6E,aAAF,CAAgBoB,IAAhB,CAAsBjG,CAAC,IAAE,mBAAiBA,CAAC,CAACmF,aAA5C,IAA4D,KAAKe,gCAAL,CAAsClG,CAAtC,CAA5D,GAAqG,MAAM,KAAKmG,8BAAL,CAAoCnG,CAApC,CAA7G;AAAoJ,KAAxK,MAA6KE,CAAC,GAAC,KAAKkG,2BAAL,CAAiCpG,CAAjC,CAAF;;AAAsC,WAAOA,CAAC,CAACqG,mBAAF,KAAwBvF,CAAC,CAACd,CAAC,CAACsG,KAAH,CAAD,IAAY,CAACtF,CAAC,CAAC,KAAK+C,aAAL,CAAmBM,gBAApB,EAAqCrE,CAAC,CAACsG,KAAvC,CAAd,GAA4DpG,CAAC,CAAC6D,aAAF,GAAgBlC,CAAC,CAAC;AAACwC,MAAAA,gBAAgB,EAACrE,CAAC,CAACsG,KAApB;AAA0B,SAAG/E,CAAC,CAAC,KAAKwC,aAAN,EAAoB,KAAKA,aAAL,CAAmBM,gBAAvC,EAAwDrE,CAAC,CAACsG,KAA1D;AAA9B,KAAD,CAA7E,GAA+KpG,CAAC,CAAC6D,aAAF,GAAgBlC,CAAC,CAAC;AAACwC,MAAAA,gBAAgB,EAACrE,CAAC,CAACsG,KAApB;AAA0B,SAAG,KAAKvC;AAAlC,KAAD,CAAxN,GAA4Q7D,CAAnR;AAAqR;;AAAAqG,EAAAA,sBAAsB,CAACrG,CAAD,EAAGE,CAAH,EAAK;AAAC,UAAME,CAAC,GAAC,KAAKkE,cAAb;AAAA,UAA4BhE,CAAC,GAACgG,CAAC,CAAC,KAAKrC,IAAN,EAAW,KAAKD,IAAhB,CAA/B;AAAA,UAAqD;AAAC7B,MAAAA,CAAC,EAAC3B,CAAH;AAAKuB,MAAAA,CAAC,EAACrB;AAAP,QAAUV,CAAC,CAACuG,KAAjE;AAAA,UAAuE3F,CAAC,GAAC,YAAU,OAAOZ,CAAC,CAACwG,QAAnB,GAA4BxG,CAAC,CAACwG,QAA9B,GAAuCxG,CAAC,CAACwG,QAAF,CAAWrE,CAA3H;AAAA,UAA6HrB,CAAC,GAAC,YAAU,OAAOd,CAAC,CAACwG,QAAnB,GAA4BxG,CAAC,CAACwG,QAA9B,GAAuCxG,CAAC,CAACwG,QAAF,CAAWzE,CAAjL;AAAA,UAAmLf,CAAC,GAAC;AAACyF,MAAAA,UAAU,EAAC;AAAZ,KAArL;AAAA,UAAqMxF,CAAC,GAAC,0BAAwB,KAAK8C,YAApO;AAAA,UAAiP5C,CAAC,GAAC,KAAKuF,gBAAL,CAAsB1G,CAAC,CAACuG,KAAxB,EAA8B,KAAKpC,gBAAnC,EAAoDjE,CAApD,CAAnP;;AAA0S,SAAI,MAAMmB,CAAV,IAAe,KAAKuC,KAApB,EAA0B;AAAC,YAAM1D,CAAC,GAACE,CAAC,CAACwB,WAAF,CAAcP,CAAd,CAAR;AAAyB,UAAGvB,CAAC,CAACI,CAAD,CAAJ,EAAQ;AAAS,YAAK;AAACyG,QAAAA,MAAM,EAACpF,CAAR;AAAUqF,QAAAA,OAAO,EAACnF;AAAlB,UAAqBvB,CAA1B;;AAA4B,UAAGF,CAAC,CAAC6G,KAAF,GAAQC,CAAC,CAACC,IAAb,EAAkB;AAAC,YAAIjH,CAAC,GAAC,CAAN;;AAAQ,aAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACyB,CAAC,CAACgD,MAAhB,EAAuBzE,CAAC,EAAxB,EAA2B;AAAC,gBAAME,CAAC,GAACuB,CAAC,CAACzB,CAAD,CAAT;;AAAa,eAAI,IAAIA,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACE,CAAd,EAAgBF,CAAC,IAAGF,CAAC,IAAEQ,CAAvB,EAAyB;AAAC,kBAAMW,CAAC,GAACM,CAAC,CAACzB,CAAD,CAAT;AAAA,kBAAa2B,CAAC,GAACF,CAAC,CAACzB,CAAC,GAAC,CAAH,CAAhB;;AAAsB,gBAAGE,CAAC,KAAGE,CAAC,GAAC,CAAT,EAAW;AAAC,oBAAMF,CAAC,GAACuB,CAAC,CAACzB,CAAC,GAACQ,CAAH,CAAT;AAAA,oBAAeJ,CAAC,GAACqB,CAAC,CAACzB,CAAC,GAACQ,CAAF,GAAI,CAAL,CAAlB;AAAA,oBAA0B;AAAC6B,gBAAAA,CAAC,EAACR,CAAH;AAAKI,gBAAAA,CAAC,EAACF;AAAP,kBAAUmF,CAAC,CAACxG,CAAD,EAAGE,CAAH,EAAKO,CAAL,EAAOQ,CAAP,EAASzB,CAAT,EAAWE,CAAX,CAArC;AAAA,oBAAmD6B,CAAC,GAAC,CAACvB,CAAC,GAACmB,CAAH,IAAMf,CAA3D;AAAA,oBAA6DqB,CAAC,GAAC,CAACvB,CAAC,GAACmB,CAAH,IAAMf,CAArE;AAAA,oBAAuEqB,CAAC,GAACJ,CAAC,GAACA,CAAF,GAAIE,CAAC,GAACA,CAA/E;AAAiFE,cAAAA,CAAC,IAAE,CAAH,IAAMnB,CAAC,CAACyF,UAAF,CAAapB,IAAb,CAAkB;AAAC4B,gBAAAA,IAAI,EAAC,MAAN;AAAaC,gBAAAA,QAAQ,EAAC9G,CAAC,CAAC+G,WAAF,CAAc9F,CAAd,CAAtB;AAAuCmF,gBAAAA,QAAQ,EAACY,IAAI,CAACC,IAAL,CAAUlF,CAAV,CAAhD;AAA6DmF,gBAAAA,MAAM,EAACnG,CAAC,CAACQ,CAAD,EAAGE,CAAH,CAArE;AAA2E0F,gBAAAA,KAAK,EAACpG,CAAC,CAACF,CAAD,EAAGQ,CAAH,CAAlF;AAAwF+F,gBAAAA,GAAG,EAACrG,CAAC,CAACnB,CAAD,EAAGE,CAAH;AAA7F,eAAlB,CAAN;AAA6H;AAAC;AAAC;AAAC;;AAAA,UAAGF,CAAC,CAAC6G,KAAF,GAAQC,CAAC,CAACW,MAAb,EAAoB;AAAC,cAAM3H,CAAC,GAACmB,CAAC,GAACM,CAAC,CAACkD,MAAF,GAASnE,CAAV,GAAYiB,CAAC,CAACkD,MAAvB;;AAA8B,aAAI,IAAIzE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,CAAd,EAAgBE,CAAC,IAAEM,CAAnB,EAAqB;AAAC,gBAAMR,CAAC,GAACyB,CAAC,CAACvB,CAAD,CAAT;AAAA,gBAAaE,CAAC,GAACqB,CAAC,CAACvB,CAAC,GAAC,CAAH,CAAhB;AAAA,gBAAsBM,CAAC,GAAC,CAACE,CAAC,GAACV,CAAH,IAAMc,CAA9B;AAAA,gBAAgCK,CAAC,GAAC,CAACP,CAAC,GAACR,CAAH,IAAMY,CAAxC;AAAA,gBAA0CW,CAAC,GAACnB,CAAC,GAACA,CAAF,GAAIW,CAAC,GAACA,CAAlD;AAAoDQ,UAAAA,CAAC,IAAE,CAAH,IAAMT,CAAC,CAACyF,UAAF,CAAapB,IAAb,CAAkB;AAAC4B,YAAAA,IAAI,EAAC,QAAN;AAAeC,YAAAA,QAAQ,EAAC9G,CAAC,CAAC+G,WAAF,CAAc9F,CAAd,CAAxB;AAAyCmF,YAAAA,QAAQ,EAACY,IAAI,CAACC,IAAL,CAAU5F,CAAV,CAAlD;AAA+D6F,YAAAA,MAAM,EAACnG,CAAC,CAACrB,CAAD,EAAGI,CAAH;AAAvE,WAAlB,CAAN;AAAuG;AAAC;AAAC;;AAAA,WAAOc,CAAC,CAACyF,UAAF,CAAaiB,IAAb,CAAmB,CAAC5H,CAAD,EAAGE,CAAH,KAAOF,CAAC,CAAC0G,QAAF,GAAWxG,CAAC,CAACwG,QAAvC,GAAkDxF,CAAzD;AAA2D;;AAAA0F,EAAAA,gBAAgB,CAAC5G,CAAD,EAAGI,CAAH,EAAKE,CAAL,EAAO;AAAC,UAAME,CAAC,GAACN,CAAC,CAACI,CAAD,CAAD,IAAM,CAACU,CAAC,CAACZ,CAAD,EAAGE,CAAH,CAAR,GAAcN,CAAC,IAAEuB,CAAC,CAACvB,CAAD,EAAGI,CAAH,EAAKE,CAAL,CAAlB,GAA0BN,CAAC,IAAEA,CAArC;AAAuC,WAAO,QAAMA,CAAC,CAACiD,CAAR,IAAW,QAAMjD,CAAC,CAACqB,CAAnB,GAAqB,CAACnB,CAAD,EAAGE,CAAH,KAAOI,CAAC,CAAC;AAAC6B,MAAAA,CAAC,EAACnC,CAAH;AAAK+B,MAAAA,CAAC,EAAC7B,CAAP;AAAS6C,MAAAA,CAAC,EAACjD,CAAC,CAACiD,CAAb;AAAe5B,MAAAA,CAAC,EAACrB,CAAC,CAACqB;AAAnB,KAAD,CAA7B,GAAqD,QAAMrB,CAAC,CAACiD,CAAR,GAAU,CAAC/C,CAAD,EAAGE,CAAH,KAAOI,CAAC,CAAC;AAAC6B,MAAAA,CAAC,EAACnC,CAAH;AAAK+B,MAAAA,CAAC,EAAC7B,CAAP;AAAS6C,MAAAA,CAAC,EAACjD,CAAC,CAACiD;AAAb,KAAD,CAAlB,GAAoC,QAAMjD,CAAC,CAACqB,CAAR,GAAU,CAACnB,CAAD,EAAGE,CAAH,KAAOI,CAAC,CAAC;AAAC6B,MAAAA,CAAC,EAACnC,CAAH;AAAK+B,MAAAA,CAAC,EAAC7B,CAAP;AAASiB,MAAAA,CAAC,EAACrB,CAAC,CAACqB;AAAb,KAAD,CAAlB,GAAoC,CAACrB,CAAD,EAAGE,CAAH,KAAOM,CAAC,CAAC;AAAC6B,MAAAA,CAAC,EAACrC,CAAH;AAAKiC,MAAAA,CAAC,EAAC/B;AAAP,KAAD,CAA5I;AAAwJ;;AAAA2H,EAAAA,sBAAsB,CAAC7H,CAAD,EAAG;AAAC,UAAME,CAAC,GAACmB,CAAC,CAACrB,CAAC,CAAC8H,KAAH,EAAS,KAAKxD,WAAd,CAAT;AAAoC,QAAG,CAACpE,CAAJ,EAAM,OAAO6H,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;;AAA6B,QAAG9H,CAAC,CAAC+H,cAAL,EAAoB;AAAC,UAAI7H,CAAC,GAAC,CAAN;AAAQ,YAAME,CAAC,GAAC,EAAR;;AAAW,WAAI,MAAMN,CAAV,IAAe,KAAK8D,KAApB,EAA0B5D,CAAC,CAACgI,WAAF,CAAclI,CAAd,EAAgB,KAAKwE,cAArB,MAAuClE,CAAC,CAACF,CAAC,EAAF,CAAD,GAAOJ,CAA9C;;AAAiD,YAAMQ,CAAC,GAAC,IAAIoD,CAAJ,CAAMtD,CAAN,EAAQ,KAAKyD,aAAb,EAA2B,IAA3B,CAAR;AAAyC,aAAOvD,CAAC,CAACwD,oBAAF,GAAuBhE,CAAC,CAAC8H,KAAzB,EAA+BC,OAAO,CAACC,OAAR,CAAgBxH,CAAhB,CAAtC;AAAyD;;AAAA,WAAOuH,OAAO,CAACI,MAAR,CAAe,IAAIC,SAAJ,CAAc,kCAAd,CAAf,CAAP;AAAyE;;AAAAC,EAAAA,wBAAwB,CAACnI,CAAD,EAAG;AAAC,QAAG,CAACA,CAAC,CAACoI,YAAH,IAAiB,CAACpI,CAAC,CAACoI,YAAF,CAAe3D,MAAjC,IAAyC3E,CAAC,CAAC,KAAKyE,gBAAN,CAA7C,EAAqE,OAAOsD,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AAA6B,UAAM5H,CAAC,GAAC,IAAI8E,GAAJ,EAAR;;AAAgB,SAAI,MAAMlF,CAAV,IAAeE,CAAC,CAACoI,YAAjB,EAA8B;AAAC,WAAK7D,gBAAL,CAAsB8D,mBAAtB,CAA0CvI,CAA1C,EAA6CwI,OAA7C,CAAsDxI,CAAC,IAAEI,CAAC,CAAC2F,GAAF,CAAM/F,CAAN,CAAzD;AAAoE;;AAAA,UAAMM,CAAC,GAAC,KAAKkE,cAAL,CAAoB6C,WAA5B;AAAwC,WAAOU,OAAO,CAACC,OAAR,CAAgB,IAAIpE,CAAJ,CAAM,KAAKE,KAAL,CAAW2E,MAAX,CAAmBzI,CAAC,IAAEI,CAAC,CAACiF,GAAF,CAAM/E,CAAC,CAACN,CAAD,CAAP,CAAtB,CAAN,EAA0C,KAAK+D,aAA/C,EAA6D,IAA7D,CAAhB,CAAP;AAA2F;;AAAA2E,EAAAA,qBAAqB,CAAC1I,CAAD,EAAG;AAAC,QAAG,CAACA,CAAC,CAAC2I,SAAH,IAAc,CAAC3I,CAAC,CAAC2I,SAAF,CAAYhE,MAA9B,EAAqC,OAAOoD,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AAA6B,UAAM9H,CAAC,GAAC,IAAIgF,GAAJ,CAAQlF,CAAC,CAAC2I,SAAV,CAAR;AAAA,UAA6BvI,CAAC,GAAC,KAAKoE,cAAL,CAAoB6C,WAAnD;AAA+D,WAAOU,OAAO,CAACC,OAAR,CAAgB,IAAIpE,CAAJ,CAAM,KAAKE,KAAL,CAAW2E,MAAX,CAAmBzI,CAAC,IAAEE,CAAC,CAACmF,GAAF,CAAMjF,CAAC,CAACJ,CAAD,CAAP,CAAtB,CAAN,EAA0C,KAAK+D,aAA/C,EAA6D,IAA7D,CAAhB,CAAP;AAA2F;;AAAA6E,EAAAA,gBAAgB,CAAC5I,CAAD,EAAG;AAAC,UAAMI,CAAC,GAACuB,CAAC,CAAC,KAAK4C,QAAN,EAAevE,CAAC,CAAC6I,UAAjB,EAA4B,KAAKrE,cAAjC,CAAT;AAA0D,QAAG,CAACtE,CAAC,CAACE,CAAD,CAAL,EAAS,OAAO2H,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AAA6B,UAAM1H,CAAC,GAAC,KAAKwD,KAAL,CAAW2E,MAAX,CAAkBrI,CAAlB,CAAR;AAA6B,WAAO2H,OAAO,CAACC,OAAR,CAAgB,IAAIpE,CAAJ,CAAMtD,CAAN,EAAQ,KAAKyD,aAAb,EAA2B,IAA3B,CAAhB,CAAP;AAAyD;;AAAA+E,EAAAA,YAAY,GAAE;AAAC,UAAK;AAACC,MAAAA,YAAY,EAAC/I,CAAd;AAAgBgJ,MAAAA,cAAc,EAAC9I,CAA/B;AAAiC+I,MAAAA,YAAY,EAAC7I;AAA9C,QAAiD,KAAKmE,QAA3D;AAAA,UAAoEjE,CAAC,GAACF,CAAC,IAAEF,CAAzE;AAAA,UAA2EM,CAAC,GAAC,IAAIyE,GAAJ,EAA7E;AAAA,UAAqFvE,CAAC,GAAC,KAAK8D,cAAL,CAAoB0E,YAA3G;;AAAwH,SAAI,MAAMpI,CAAV,IAAe,KAAKgD,KAApB,EAA0B;AAAC,YAAM5D,CAAC,GAACQ,CAAC,CAACI,CAAD,EAAGd,CAAH,CAAT;AAAA,YAAeI,CAAC,GAACM,CAAC,CAACI,CAAD,EAAGR,CAAH,CAAlB;AAAA,YAAwBM,CAAC,GAACJ,CAAC,CAACmF,GAAF,CAAMzF,CAAN,CAA1B;AAAmC,OAAC,CAACU,CAAD,IAAIR,CAAC,GAACM,CAAC,CAACE,CAAD,EAAGN,CAAH,CAAR,KAAgBE,CAAC,CAACgF,GAAF,CAAMtF,CAAN,EAAQY,CAAR,CAAhB;AAA2B;;AAAA,UAAMF,CAAC,GAACuI,KAAK,CAACC,IAAN,CAAW5I,CAAC,CAAC6I,MAAF,EAAX,CAAR;AAA+B,WAAOtB,OAAO,CAACC,OAAR,CAAgB,IAAIpE,CAAJ,CAAMhD,CAAN,EAAQ,KAAKmD,aAAb,EAA2B,IAA3B,CAAhB,CAAP;AAAyD;;AAAa,QAAPzC,OAAO,CAACtB,CAAD,EAAG;AAAC,QAAG,CAACA,CAAD,IAAIgB,CAAC,CAAC,KAAKqD,gBAAN,EAAuBrE,CAAvB,CAAR,EAAkC,OAAO,IAAP;AAAY,UAAME,CAAC,GAAC,KAAKsE,cAAb;AAAA,UAA4BpE,CAAC,GAAC,CAAC,MAAMqB,CAAC,CAAC,KAAKqC,KAAL,CAAWwF,GAAX,CAAgBtJ,CAAC,IAAE+B,CAAC,CAAC,KAAKkC,YAAN,EAAmB,KAAKE,IAAxB,EAA6B,KAAKD,IAAlC,EAAuChE,CAAC,CAAC4B,WAAF,CAAc9B,CAAd,CAAvC,CAApB,CAAD,EAAgF,KAAKqE,gBAArF,EAAsGrE,CAAtG,CAAR,EAAkHsJ,GAAlH,CAAuH,CAACtJ,CAAD,EAAGI,CAAH,KAAOF,CAAC,CAACqJ,iBAAF,CAAoB,KAAKzF,KAAL,CAAW1D,CAAX,CAApB,EAAkCc,CAAC,CAAClB,CAAD,EAAG,KAAKmE,IAAR,EAAa,KAAKD,IAAlB,CAAnC,CAA9H,CAA9B;AAA0N,WAAO,IAAIN,CAAJ,CAAMxD,CAAN,EAAQ,KAAK2D,aAAb,EAA2B;AAACC,MAAAA,oBAAoB,EAAC,KAAKA,oBAA3B;AAAgDC,MAAAA,YAAY,EAAC,KAAKA,YAAlE;AAA+EC,MAAAA,IAAI,EAAC,KAAKA,IAAzF;AAA8FC,MAAAA,IAAI,EAAC,KAAKA,IAAxG;AAA6GC,MAAAA,aAAa,EAAC,KAAKA,aAAhI;AAA8IC,MAAAA,gBAAgB,EAACrE,CAA/J;AAAiKsE,MAAAA,WAAW,EAAC,KAAKA,WAAlL;AAA8LC,MAAAA,QAAQ,EAAC,KAAKA,QAA5M;AAAqNC,MAAAA,cAAc,EAAC,KAAKA;AAAzO,KAA3B,CAAP;AAA4R;;AAAqC,QAA/BgF,+BAA+B,CAACxJ,CAAD,EAAGE,CAAH,EAAK;AAAC,UAAK;AAACuJ,MAAAA,KAAK,EAACrJ,CAAP;AAASsJ,MAAAA,eAAe,EAACpJ,CAAzB;AAA2BqJ,MAAAA,kBAAkB,EAACnJ,CAA9C;AAAgDoJ,MAAAA,iBAAiB,EAAClJ,CAAlE;AAAoEmJ,MAAAA,kBAAkB,EAACjJ,CAAvF;AAAyFkJ,MAAAA,QAAQ,EAAChJ,CAAlG;AAAoGiJ,MAAAA,QAAQ,EAAC/I,CAA7G;AAA+GgJ,MAAAA,KAAK,EAAC9I;AAArH,QAAwHhB,CAA7H;AAAA,UAA+HiB,CAAC,GAAC,KAAKmD,WAAL,CAAiB2F,WAAjB,CAA6B7J,CAA7B,CAAjI;AAAA,UAAiKiB,CAAC,GAAC,MAAM,KAAK6I,cAAL,CAAoBlK,CAApB,EAAsB;AAACyJ,MAAAA,KAAK,EAACrJ,CAAP;AAASsJ,MAAAA,eAAe,EAACpJ,CAAzB;AAA2BqJ,MAAAA,kBAAkB,EAACnJ,CAA9C;AAAgDoJ,MAAAA,iBAAiB,EAAClJ,CAAlE;AAAoEmJ,MAAAA,kBAAkB,EAACjJ,CAAvF;AAAyFoJ,MAAAA,KAAK,EAAC9I;AAA/F,KAAtB,CAAzK;AAAA,UAAkSK,CAAC,GAACc,CAAC,CAAC;AAACuH,MAAAA,iBAAiB,EAAClJ,CAAnB;AAAqBiJ,MAAAA,kBAAkB,EAACnJ,CAAxC;AAA0CsJ,MAAAA,QAAQ,EAAChJ,CAAnD;AAAqDiJ,MAAAA,QAAQ,EAAC/I;AAA9D,KAAD,CAArS;AAAA,UAAwWS,CAAC,GAAC,KAAK6C,WAAL,CAAiBqB,GAAjB,CAAqBvF,CAArB,CAA1W;AAAA,UAAkYuB,CAAC,GAAC;AAACwI,MAAAA,KAAK,EAAC,EAAP;AAAUC,MAAAA,SAAS,EAAC,QAAM3I,CAAN,GAAQ,KAAK,CAAb,GAAeA,CAAC,CAAC0F;AAArC,KAApY;AAAA,UAA+atF,CAAC,GAACM,CAAC,CAACV,CAAD,CAAD,GAAKc,CAAC,CAAC;AAAC8G,MAAAA,MAAM,EAAChI,CAAR;AAAUgJ,MAAAA,iBAAiB,EAAC9I,CAA5B;AAA8B+I,MAAAA,gBAAgB,EAAC3I;AAA/C,KAAD,CAAN,GAA0Dc,CAAC,CAAC;AAAC4G,MAAAA,MAAM,EAAChI,CAAR;AAAUyI,MAAAA,QAAQ,EAAChJ,CAAnB;AAAqBiJ,MAAAA,QAAQ,EAAC/I,CAA9B;AAAgCuJ,MAAAA,eAAe,EAAC,CAAC7J,CAAjD;AAAmD2J,MAAAA,iBAAiB,EAAC9I,CAArE;AAAuE+I,MAAAA,gBAAgB,EAAC3I;AAAxF,KAAD,CAA5e;AAAykB,WAAOgB,CAAC,CAACd,CAAD,EAAGV,CAAH,CAAR;AAAc;;AAAgC,QAA1BqJ,0BAA0B,CAACxK,CAAD,EAAGE,CAAH,EAAK;AAAC,UAAK;AAACuJ,MAAAA,KAAK,EAACrJ,CAAP;AAASsJ,MAAAA,eAAe,EAACpJ,CAAzB;AAA2BmK,MAAAA,MAAM,EAACjK,CAAlC;AAAoCkK,MAAAA,oBAAoB,EAAChK,CAAzD;AAA2DsJ,MAAAA,KAAK,EAACpJ;AAAjE,QAAoEV,CAAzE;AAAA,UAA2EY,CAAC,GAAC,MAAM,KAAKoJ,cAAL,CAAoBlK,CAApB,EAAsB;AAACyJ,MAAAA,KAAK,EAACrJ,CAAP;AAASsJ,MAAAA,eAAe,EAACpJ,CAAzB;AAA2B0J,MAAAA,KAAK,EAACpJ;AAAjC,KAAtB,CAAnF;AAAA,UAA8II,CAAC,GAAC6B,CAAC,CAAC/B,CAAD,CAAjJ;AAAqJ,WAAOiC,CAAC,CAAC/B,CAAD,EAAGR,CAAH,EAAKE,CAAL,CAAR;AAAgB;;AAA+B,QAAzBiK,yBAAyB,CAAC3K,CAAD,EAAGE,CAAH,EAAK;AAAC,UAAK;AAACuJ,MAAAA,KAAK,EAACrJ,CAAP;AAASsJ,MAAAA,eAAe,EAACpJ,CAAzB;AAA2BqJ,MAAAA,kBAAkB,EAACnJ,CAA9C;AAAgDoJ,MAAAA,iBAAiB,EAAClJ,CAAlE;AAAoEmJ,MAAAA,kBAAkB,EAACjJ,CAAvF;AAAyFgK,MAAAA,oBAAoB,EAAC9J,CAA9G;AAAgH+J,MAAAA,yBAAyB,EAAC7J,CAA1I;AAA4I8I,MAAAA,QAAQ,EAAC5I,CAArJ;AAAuJ6I,MAAAA,QAAQ,EAAC5I,CAAhK;AAAkK2J,MAAAA,UAAU,EAACzJ,CAA7K;AAA+K2I,MAAAA,KAAK,EAACzI;AAArL,QAAwLrB,CAA7L;AAAA,UAA+LuB,CAAC,GAAC,MAAM,KAAKyI,cAAL,CAAoBlK,CAApB,EAAsB;AAACyJ,MAAAA,KAAK,EAACrJ,CAAP;AAASsJ,MAAAA,eAAe,EAACpJ,CAAzB;AAA2BqJ,MAAAA,kBAAkB,EAACnJ,CAA9C;AAAgDoJ,MAAAA,iBAAiB,EAAClJ,CAAlE;AAAoEmJ,MAAAA,kBAAkB,EAACjJ,CAAvF;AAAyFoJ,MAAAA,KAAK,EAACzI;AAA/F,KAAtB,CAAvM;AAAA,UAAgUI,CAAC,GAACsB,CAAC,CAACxB,CAAD,EAAG;AAACgI,MAAAA,KAAK,EAACrJ,CAAP;AAASuJ,MAAAA,kBAAkB,EAACnJ,CAA5B;AAA8BoJ,MAAAA,iBAAiB,EAAClJ,CAAhD;AAAkDmJ,MAAAA,kBAAkB,EAACjJ,CAArE;AAAuEgK,MAAAA,oBAAoB,EAAC9J,CAA5F;AAA8F+J,MAAAA,yBAAyB,EAAC7J,CAAxH;AAA0H8I,MAAAA,QAAQ,EAAC5I,CAAnI;AAAqI6I,MAAAA,QAAQ,EAAC5I,CAA9I;AAAgJ2J,MAAAA,UAAU,EAACzJ;AAA3J,KAAH,CAAnU;AAAqe,WAAO8B,CAAC,CAACxB,CAAD,EAAGb,CAAH,CAAR;AAAc;;AAA6B,QAAvBiK,uBAAuB,CAAC/K,CAAD,EAAGE,CAAH,EAAK;AAAC,UAAK;AAACuJ,MAAAA,KAAK,EAACrJ,CAAP;AAASsJ,MAAAA,eAAe,EAACpJ,CAAzB;AAA2BqJ,MAAAA,kBAAkB,EAACnJ,CAA9C;AAAgDoJ,MAAAA,iBAAiB,EAAClJ,CAAlE;AAAoEmJ,MAAAA,kBAAkB,EAACjJ,CAAvF;AAAyFgK,MAAAA,oBAAoB,EAAC9J,CAA9G;AAAgH+J,MAAAA,yBAAyB,EAAC7J,CAA1I;AAA4I8I,MAAAA,QAAQ,EAAC5I,CAArJ;AAAuJ6I,MAAAA,QAAQ,EAAC5I,CAAhK;AAAkK6J,MAAAA,OAAO,EAAC3J,CAA1K;AAA4K2I,MAAAA,KAAK,EAACzI;AAAlL,QAAqLrB,CAA1L;AAAA,UAA4LuB,CAAC,GAAC,MAAM,KAAKyI,cAAL,CAAoBlK,CAApB,EAAsB;AAACyJ,MAAAA,KAAK,EAACrJ,CAAP;AAASsJ,MAAAA,eAAe,EAACpJ,CAAzB;AAA2BqJ,MAAAA,kBAAkB,EAACnJ,CAA9C;AAAgDoJ,MAAAA,iBAAiB,EAAClJ,CAAlE;AAAoEmJ,MAAAA,kBAAkB,EAACjJ,CAAvF;AAAyFoJ,MAAAA,KAAK,EAACzI;AAA/F,KAAtB,CAApM;AAA6T,WAAO8B,CAAC,CAAC5B,CAAD,EAAG;AAACgI,MAAAA,KAAK,EAACrJ,CAAP;AAASuJ,MAAAA,kBAAkB,EAACnJ,CAA5B;AAA8BoJ,MAAAA,iBAAiB,EAAClJ,CAAhD;AAAkDmJ,MAAAA,kBAAkB,EAACjJ,CAArE;AAAuEgK,MAAAA,oBAAoB,EAAC9J,CAA5F;AAA8F+J,MAAAA,yBAAyB,EAAC7J,CAAxH;AAA0H8I,MAAAA,QAAQ,EAAC5I,CAAnI;AAAqI6I,MAAAA,QAAQ,EAAC5I,CAA9I;AAAgJ6J,MAAAA,OAAO,EAAC3J;AAAxJ,KAAH,CAAR;AAAuK;;AAAA4J,EAAAA,aAAa,CAACjL,CAAD,EAAGE,CAAH,EAAKE,CAAL,EAAO;AAAC,QAAGJ,CAAC,CAAC2E,MAAF,GAAS,CAAT,IAAYzE,CAAZ,IAAeA,CAAC,CAACyE,MAApB,EAA2B,KAAI,MAAMrE,CAAV,IAAeJ,CAAC,CAACgL,OAAF,EAAf,EAA2B;AAAC,YAAMhL,CAAC,GAACI,CAAC,CAAC6K,KAAF,CAAQ,GAAR,CAAR;AAAA,YAAqB3K,CAAC,GAACN,CAAC,CAAC,CAAD,CAAxB;AAAA,YAA4BQ,CAAC,GAAC,KAAK4D,WAAL,CAAiBqB,GAAjB,CAAqBnF,CAArB,CAA9B;AAAA,YAAsDI,CAAC,GAACV,CAAC,CAAC,CAAD,CAAD,IAAM,WAASA,CAAC,CAAC,CAAD,CAAD,CAAKkL,WAAL,EAAvE;AAAA,YAA0FtK,CAAC,GAACyC,CAAC,CAAC,QAAM7C,CAAN,GAAQ,KAAK,CAAb,GAAeA,CAAC,CAACyG,IAAlB,EAAuBvG,CAAvB,CAA7F;;AAAuHZ,MAAAA,CAAC,CAAC4H,IAAF,CAAQ,CAAC5H,CAAD,EAAGE,CAAH,KAAO;AAAC,cAAMI,CAAC,GAACF,CAAC,CAACJ,CAAD,EAAGQ,CAAH,EAAKE,CAAL,CAAT;AAAA,cAAiBE,CAAC,GAACR,CAAC,CAACF,CAAD,EAAGM,CAAH,EAAKE,CAAL,CAApB;AAA4B,eAAOI,CAAC,CAACR,CAAD,EAAGM,CAAH,CAAR;AAAc,OAA1D;AAA6D;AAAC;;AAAAwF,EAAAA,2BAA2B,CAACpG,CAAD,EAAG;AAAC,UAAME,CAAC,GAAC,KAAK4D,KAAb;AAAA,UAAmB;AAACG,MAAAA,YAAY,EAAC7D,CAAd;AAAgB8D,MAAAA,IAAI,EAAC5D,CAArB;AAAuB6D,MAAAA,IAAI,EAAC3D,CAA5B;AAA8B4D,MAAAA,aAAa,EAAC1D,CAA5C;AAA8C2D,MAAAA,gBAAgB,EAACvD;AAA/D,QAAkE,IAArF;AAAA,UAA0F;AAACuK,MAAAA,SAAS,EAACrK,CAAX;AAAasF,MAAAA,KAAK,EAACpF,CAAnB;AAAqBoK,MAAAA,sBAAsB,EAACnK,CAA5C;AAA8CoK,MAAAA,iBAAiB,EAAClK,CAAhE;AAAkEmK,MAAAA,YAAY,EAACjK,CAA/E;AAAiFkK,MAAAA,OAAO,EAAChK,CAAzF;AAA2FiK,MAAAA,OAAO,EAAC/J;AAAnG,QAAsG3B,CAAhM;AAAA,UAAkM+B,CAAC,GAAC,QAAMV,CAAN,IAASnB,CAAC,CAACyE,MAAF,GAAS,CAACpD,CAAC,IAAE,CAAJ,IAAOF,CAA7N;AAAA,UAA+NY,CAAC,GAACjB,CAAC,KAAGA,CAAC,CAAC2K,QAAF,CAAW,GAAX,IAAgB,CAAC,GAAG,KAAKrH,WAAL,CAAiBsH,MAArB,CAAhB,GAA6C5K,CAAC,CAACsI,GAAF,CAAOtJ,CAAC,IAAE,KAAKsE,WAAL,CAAiBqB,GAAjB,CAAqB3F,CAArB,CAAV,CAAhD,CAAlO;AAAuT,WAAM;AAAC6L,MAAAA,qBAAqB,EAAC9J,CAAvB;AAAyB+J,MAAAA,QAAQ,EAAC,KAAKC,eAAL,CAAqB/L,CAArB,EAAuBE,CAAvB,CAAlC;AAA4D0L,MAAAA,MAAM,EAAC3J,CAAnE;AAAqEgC,MAAAA,YAAY,EAAC7D,CAAlF;AAAoF8D,MAAAA,IAAI,EAAC5D,CAAC,IAAEqB,CAA5F;AAA8FwC,MAAAA,IAAI,EAAC3D,CAAC,IAAEiB,CAAtG;AAAwGuK,MAAAA,iBAAiB,EAACtL,CAA1H;AAA4H2D,MAAAA,gBAAgB,EAACxC,CAAC,CAACX,CAAC,IAAEJ,CAAJ,CAA9I;AAAqJmL,MAAAA,SAAS,EAAC9K,CAAC,IAAEP,CAAC,CAACO,CAAD,CAAJ,IAAS;AAAxK,KAAN;AAAoL;;AAAA4K,EAAAA,eAAe,CAAC/L,CAAD,EAAGE,CAAH,EAAK;AAAC,UAAME,CAAC,GAAC,IAAIe,CAAJ,CAAMnB,CAAN,EAAQ,KAAKwE,cAAb,EAA4B,KAAKF,WAAjC,CAAR;AAAA,UAAsD;AAACJ,MAAAA,IAAI,EAAC5D,CAAN;AAAQ6D,MAAAA,IAAI,EAAC3D;AAAb,QAAgB,IAAtE;AAAA,UAA2E;AAAC0L,MAAAA,aAAa,EAACxL,CAAf;AAAiB4K,MAAAA,sBAAsB,EAACxK,CAAxC;AAA0CqL,MAAAA,cAAc,EAACnL,CAAzD;AAA2DoL,MAAAA,cAAc,EAAClL,CAA1E;AAA4EmL,MAAAA,kBAAkB,EAAChL,CAA/F;AAAiGmK,MAAAA,YAAY,EAACjK,CAA9G;AAAgHgK,MAAAA,iBAAiB,EAAC9J,CAAlI;AAAoIgK,MAAAA,OAAO,EAAC9J,CAAC,GAAC,CAAC,CAA/I;AAAiJ+J,MAAAA,OAAO,EAAC7J,CAAC,GAAC,CAAC;AAA5J,QAA+J7B,CAA1O;AAAA,UAA4OmC,CAAC,GAAC3B,CAAC,IAAEmB,CAAjP;AAAA,UAAmPU,CAAC,GAAC/B,CAAC,IAAEuB,CAAxP;AAA0P,QAAIU,CAAC,GAAC,EAAN;AAAA,QAASE,CAAC,GAAC,CAAX;AAAa,UAAME,CAAC,GAAC,CAAC,GAAGzC,CAAJ,CAAR;;AAAe,QAAG,KAAK+K,aAAL,CAAmBtI,CAAnB,EAAqBjC,CAArB,EAAwB,CAACV,CAAD,EAAGE,CAAH,EAAKI,CAAL,KAASF,CAAC,CAACkM,aAAF,CAAgBtM,CAAhB,EAAkBE,CAAlB,EAAoBI,CAApB,CAAjC,GAA0DU,CAAC,IAAEE,CAAhE,EAAkE;AAAC,YAAMlB,CAAC,GAACY,CAAC,CAACE,CAAD,CAAT;AAAa,UAAGE,CAAC,IAAE,CAACE,CAAP,EAAS,KAAI,MAAMhB,CAAV,IAAeyC,CAAf,EAAiBJ,CAAC,CAACE,CAAC,EAAF,CAAD,GAAO;AAAC8J,QAAAA,UAAU,EAACnM,CAAC,CAACoM,aAAF,CAAgBtM,CAAhB,CAAZ;AAA+BuM,QAAAA,QAAQ,EAAC1K,CAAC,CAAC,KAAKkC,YAAN,EAAmB,KAAKE,IAAxB,EAA6B,KAAKD,IAAlC,EAAuC,KAAKM,cAAL,CAAoB1C,WAApB,CAAgC5B,CAAhC,CAAvC,EAA0EmB,CAA1E,EAA4ErB,CAA5E,EAA8EmC,CAA9E,EAAgFE,CAAhF;AAAzC,OAAP,CAA1B,KAAmK,IAAG,CAACrB,CAAD,IAAIE,CAAP,EAAS,KAAI,MAAMhB,CAAV,IAAeyC,CAAf,EAAiBJ,CAAC,CAACE,CAAC,EAAF,CAAD,GAAO;AAAC8J,QAAAA,UAAU,EAACnM,CAAC,CAACoM,aAAF,CAAgBtM,CAAhB,CAAZ;AAA+BwM,QAAAA,QAAQ,EAACzK,CAAC,CAAC,IAAD,EAAM,KAAKuC,cAAL,CAAoBmI,WAApB,CAAgCzM,CAAhC,EAAkC,IAAlC,CAAN,EAA8CF,CAA9C;AAAzC,OAAP,CAA1B,KAAiI,KAAI,MAAME,CAAV,IAAeyC,CAAf,EAAiBJ,CAAC,CAACE,CAAC,EAAF,CAAD,GAAO;AAAC8J,QAAAA,UAAU,EAACnM,CAAC,CAACoM,aAAF,CAAgBtM,CAAhB,CAAZ;AAA+BwM,QAAAA,QAAQ,EAACzK,CAAC,CAAC,IAAD,EAAM,KAAKuC,cAAL,CAAoBmI,WAApB,CAAgCzM,CAAhC,EAAkC,IAAlC,CAAN,EAA8CF,CAA9C,CAAzC;AAA0FyM,QAAAA,QAAQ,EAAC1K,CAAC,CAAC,KAAKkC,YAAN,EAAmB,KAAKE,IAAxB,EAA6B,KAAKD,IAAlC,EAAuC,KAAKM,cAAL,CAAoB1C,WAApB,CAAgC5B,CAAhC,CAAvC,EAA0EmB,CAA1E,EAA4ErB,CAA5E,EAA8EmC,CAA9E,EAAgFE,CAAhF;AAApG,OAAP;AAA+L,KAApkB,MAAykB,KAAI,MAAMzB,CAAV,IAAe+B,CAAf,EAAiB;AAAC,YAAM3C,CAAC,GAACI,CAAC,CAACoM,aAAF,CAAgB5L,CAAhB,CAAR;AAA2BZ,MAAAA,CAAC,KAAGuC,CAAC,CAACE,CAAC,EAAF,CAAD,GAAO;AAAC8J,QAAAA,UAAU,EAACvM;AAAZ,OAAV,CAAD;AAA2B;;AAAA,UAAM6C,CAAC,GAACtB,CAAC,IAAE,CAAX;;AAAa,QAAG,QAAME,CAAT,EAAW;AAAC,YAAMzB,CAAC,GAAC6C,CAAC,GAACpB,CAAV;AAAYc,MAAAA,CAAC,GAACA,CAAC,CAACqK,KAAF,CAAQ/J,CAAR,EAAUyE,IAAI,CAACuF,GAAL,CAAStK,CAAC,CAACoC,MAAX,EAAkB3E,CAAlB,CAAV,CAAF;AAAkC;;AAAA,WAAOuC,CAAP;AAAS;;AAAA2D,EAAAA,gCAAgC,CAAClG,CAAD,EAAG;AAAC,QAAII,CAAC,GAAC,CAAC,CAAP;AAAA,QAASE,CAAC,GAACwM,MAAM,CAACC,iBAAlB;AAAA,QAAoCvM,CAAC,GAACsM,MAAM,CAACC,iBAA7C;AAAA,QAA+DrM,CAAC,GAACoM,MAAM,CAACC,iBAAxE;;AAA0F,SAAI,MAAM7M,CAAV,IAAeF,CAAC,CAAC6E,aAAjB,EAA+B,IAAG,mBAAiB3E,CAAC,CAACiF,aAAtB,EAAoC;AAAC7E,MAAAA,CAAC,GAAC,QAAMJ,CAAC,CAAC8M,aAAR,GAAsB9M,CAAC,CAAC8M,aAAxB,GAAsCF,MAAM,CAACC,iBAA/C,EAAiEvM,CAAC,GAAC,QAAMN,CAAC,CAAC+M,cAAR,GAAuB/M,CAAC,CAAC+M,cAAzB,GAAwCH,MAAM,CAACC,iBAAlH,EAAoIrM,CAAC,GAAC,QAAMR,CAAC,CAACgN,cAAR,GAAuBhN,CAAC,CAACgN,cAAzB,GAAwCJ,MAAM,CAACC,iBAArL;AAAuM;AAAM;;AAAA,QAAG,wBAAsB,KAAK9I,YAA9B,EAA2C7D,CAAC,GAAC,KAAK0D,KAAL,CAAWa,MAAX,GAAkBrE,CAApB,CAA3C,KAAsE,IAAG,KAAKwD,KAAL,CAAWa,MAAX,GAAkBnE,CAArB,EAAuBJ,CAAC,GAAC,CAAC,CAAH,CAAvB,KAAgC;AAAC,YAAMJ,CAAC,GAAC,KAAKmE,IAAL,GAAU,KAAKD,IAAL,GAAU,CAAV,GAAY,CAAtB,GAAwB,KAAKA,IAAL,GAAU,CAAV,GAAY,CAA5C;AAAA,YAA8C5D,CAAC,GAAC,KAAKkE,cAArD;AAAoEpE,MAAAA,CAAC,GAAC,KAAK0D,KAAL,CAAWqJ,MAAX,CAAmB,CAACnN,CAAD,EAAGI,CAAH,KAAO;AAAC,cAAMI,CAAC,GAACF,CAAC,CAACwB,WAAF,CAAc1B,CAAd,CAAR;AAAyB,eAAOJ,CAAC,IAAEE,CAAC,CAACM,CAAD,CAAD,IAAMA,CAAC,CAACqG,MAAF,CAASlC,MAAf,IAAuB,CAAzB,CAAR;AAAoC,OAAxF,EAA0F,CAA1F,IAA6F3E,CAA7F,GAA+FU,CAAjG;AAAmG;AAAA,WAAM;AAACkL,MAAAA,MAAM,EAAC,CAAC;AAACwB,QAAAA,IAAI,EAAC,cAAN;AAAqBjG,QAAAA,IAAI,EAAC,sBAA1B;AAAiDkG,QAAAA,KAAK,EAAC,cAAvD;AAAsEC,QAAAA,OAAO,EAAC,gBAA9E;AAA+F7C,QAAAA,MAAM,EAAC,IAAtG;AAA2G8C,QAAAA,YAAY,EAAC;AAAxH,OAAD,CAAR;AAAwIzB,MAAAA,QAAQ,EAAC,CAAC;AAACS,QAAAA,UAAU,EAAC;AAACiB,UAAAA,YAAY,EAACV,MAAM,CAAC1M,CAAD;AAApB;AAAZ,OAAD;AAAjJ,KAAN;AAAgM;;AAAoC,QAA9B+F,8BAA8B,CAACnG,CAAD,EAAG;AAAC,UAAME,CAAC,GAAC;AAACqM,MAAAA,UAAU,EAAC;AAAZ,KAAR;AAAA,UAAwBnM,CAAC,GAAC,EAA1B;AAAA,UAA6BE,CAAC,GAAC,IAAI2E,GAAJ,EAA/B;AAAA,UAAuCzE,CAAC,GAAC,IAAIyE,GAAJ,EAAzC;AAAA,UAAiDvE,CAAC,GAAC,IAAIuE,GAAJ,EAAnD;AAAA,UAA2DrE,CAAC,GAAC,IAAIqE,GAAJ,EAA7D;AAAA,UAAqEnE,CAAC,GAAC,IAAIK,CAAJ,CAAMnB,CAAN,EAAQ,KAAKwE,cAAb,EAA4B,KAAKF,WAAjC,CAAvE;AAAA,UAAqHtD,CAAC,GAAChB,CAAC,CAAC6E,aAAzH;AAAA,UAAuI;AAACE,MAAAA,0BAA0B,EAAC7D,CAA5B;AAA8B8D,MAAAA,MAAM,EAAC3D,CAArC;AAAuC6K,MAAAA,aAAa,EAAC3K;AAArD,QAAwDvB,CAA/L;AAAA,UAAiMyB,CAAC,GAACP,CAAC,IAAEA,CAAC,CAACyD,MAAxM;AAAA,UAA+MhD,CAAC,GAAC,CAAC,CAACF,CAAnN;AAAA,UAAqNI,CAAC,GAACF,CAAC,IAAET,CAAC,CAAC,CAAD,CAA3N;AAAA,UAA+Na,CAAC,GAACJ,CAAC,IAAE,CAAC,KAAK2C,WAAL,CAAiBqB,GAAjB,CAAqB9D,CAArB,CAArO;;AAA6P,SAAI,MAAMV,CAAV,IAAeH,CAAf,EAAiB;AAAC,YAAK;AAACyM,QAAAA,qBAAqB,EAACzN,CAAvB;AAAyBmF,QAAAA,aAAa,EAACnE;AAAvC,UAA0CG,CAA/C;AAAA,YAAiDI,CAAC,GAACJ,CAAnD;AAAA,YAAqDc,CAAC,GAAC,mBAAiBjB,CAAjB,GAAmBG,CAAC,CAACiE,gBAArB,GAAsC,KAAK,CAAlG;AAAA,YAAoGjD,CAAC,GAAC,sBAAoBnB,CAApB,IAAuB,sBAAoBA,CAAjJ;AAAA,YAAmJqB,CAAC,GAAC,wBAAsBrB,CAAtB,IAAyB,wBAAsBA,CAA/C,IAAkD,0BAAwBA,CAA/N;AAAA,YAAiOuB,CAAC,GAACZ,CAAC,IAAE,MAAIF,CAAP,KAAWQ,CAAC,KAAGJ,CAAJ,IAAOE,CAAlB,KAAsB,YAAUf,CAAnQ;;AAAqQ,UAAGW,CAAH,EAAK;AAAC,YAAG,CAACjB,CAAC,CAAC2E,GAAF,CAAMpD,CAAN,CAAJ,EAAa;AAAC,gBAAMjC,CAAC,GAAC,EAAR;;AAAW,eAAI,MAAME,CAAV,IAAegB,CAAf,EAAiB;AAAC,kBAAMd,CAAC,GAAC,KAAKkF,mBAAL,CAAyBxE,CAAzB,EAA2BZ,CAA3B,EAA6BI,CAA7B,CAAR;;AAAwCN,YAAAA,CAAC,CAACuF,IAAF,CAAOnF,CAAP;AAAU;;AAAAM,UAAAA,CAAC,CAAC8E,GAAF,CAAMvD,CAAN,EAAQ,KAAKwD,sBAAL,CAA4BzF,CAA5B,EAA8Bc,CAAC,CAAC4E,oBAAhC,CAAR;AAA+D;;AAAA,cAAMxF,CAAC,GAACQ,CAAC,CAACiF,GAAF,CAAM1D,CAAN,CAAR;;AAAiB,aAAI,MAAM7B,CAAV,IAAeF,CAAf,EAAiB;AAAC,gBAAK;AAACwN,YAAAA,KAAK,EAAClN,CAAP;AAASoF,YAAAA,IAAI,EAAClF,CAAd;AAAgBoD,YAAAA,KAAK,EAAC9C,CAAtB;AAAwB2M,YAAAA,aAAa,EAACxM;AAAtC,cAAyCjB,CAAC,CAACE,CAAD,CAA/C;AAAA,gBAAmDqB,CAAC,GAACf,CAAC,CAACmF,IAAF,CAAO,GAAP,CAArD;;AAAiE,cAAG,CAACxE,CAAD,IAAIP,CAAC,CAACgF,aAAF,CAAgB9E,CAAhB,EAAkBK,CAAlB,CAAP,EAA4B;AAAC,kBAAMnB,CAAC,GAACU,CAAC,CAAC+E,GAAF,CAAMlE,CAAN,KAAU;AAAC8K,cAAAA,UAAU,EAAC;AAAZ,aAAlB;;AAAkC,gBAAGlK,CAAH,EAAK;AAACnC,cAAAA,CAAC,CAAC0N,mBAAF,KAAwB1N,CAAC,CAAC0N,mBAAF,GAAsB,EAA9C;AAAkD,oBAAK;AAACA,gBAAAA,mBAAmB,EAAC5N,CAArB;AAAuByN,gBAAAA,qBAAqB,EAACrN;AAA7C,kBAAgD,MAAM,KAAKyN,qBAAL,CAA2BtM,CAA3B,EAA6BP,CAA7B,CAA3D;AAA2Fd,cAAAA,CAAC,CAAC0N,mBAAF,CAAsBxN,CAAtB,IAAyBJ,CAAzB;AAA2B,aAA9K,MAAkL;AAAC,kBAAII,CAAC,GAAC,IAAN;AAAW,kBAAGmC,CAAH,EAAKnC,CAAC,GAACI,CAAF,CAAL,KAAa;AAAC,sBAAMR,CAAC,GAAC,KAAKsF,mBAAL,CAAyBxE,CAAzB,EAA2BmB,CAA3B,EAA6B3B,CAA7B,CAAR;AAAA,sBAAwCJ,CAAC,GAACiB,CAAC,CAACmI,GAAF,CAAOpJ,CAAC,IAAEF,CAAC,CAACE,CAAD,CAAX,CAA1C;;AAA2DE,gBAAAA,CAAC,GAAC+B,CAAC,IAAE,yBAAwBZ,CAA3B,GAA6B,KAAKuM,mBAAL,CAAyBvM,CAAzB,EAA2BrB,CAA3B,CAA7B,GAA2D,KAAK6N,kBAAL,CAAwBxM,CAAxB,EAA0BrB,CAA1B,EAA4B,IAA5B,EAAiCY,CAAC,CAAC4E,oBAAnC,CAA7D;AAAsH;AAAAxF,cAAAA,CAAC,CAACqM,UAAF,CAAavM,CAAb,IAAgBI,CAAhB;AAAkB;;AAAAc,YAAAA,CAAC,CAACsH,OAAF,CAAW,CAACxI,CAAD,EAAGI,CAAH,KAAOF,CAAC,CAACqM,UAAF,CAAa,KAAKjI,WAAL,CAAiBqB,GAAjB,CAAqB3F,CAArB,IAAwBA,CAAxB,GAA2B,QAAOI,CAAC,GAAC,CAAE,EAAnD,IAAsDM,CAAC,CAACN,CAAD,CAAzE,GAA+EQ,CAAC,CAAC4E,GAAF,CAAM/D,CAAN,EAAQvB,CAAR,CAA/E;AAA0F;AAAC;AAAC,OAAhzB,MAAqzB,IAAGmC,CAAH,EAAK;AAACnC,QAAAA,CAAC,CAAC0N,mBAAF,KAAwB1N,CAAC,CAAC0N,mBAAF,GAAsB,EAA9C;AAAkD,cAAK;AAACA,UAAAA,mBAAmB,EAAC5N,CAArB;AAAuByN,UAAAA,qBAAqB,EAACrN;AAA7C,YAAgD,MAAM,KAAKyN,qBAAL,CAA2BtM,CAA3B,EAA6B,KAAKuC,KAAlC,CAA3D;AAAoG5D,QAAAA,CAAC,CAAC0N,mBAAF,CAAsBxN,CAAtB,IAAyBJ,CAAzB;AAA2B,OAAvL,MAA2L;AAAC,cAAMI,CAAC,GAAC,KAAKkF,mBAAL,CAAyBxE,CAAzB,EAA2BmB,CAA3B,EAA6B3B,CAA7B,CAAR;;AAAwCJ,QAAAA,CAAC,CAACqM,UAAF,CAAavM,CAAb,IAAgBmC,CAAC,IAAE,yBAAwBZ,CAA3B,GAA6B,KAAKuM,mBAAL,CAAyBvM,CAAzB,EAA2BnB,CAA3B,CAA7B,GAA2D,KAAK2N,kBAAL,CAAwBxM,CAAxB,EAA0BnB,CAA1B,EAA4BI,CAA5B,EAA8BM,CAAC,CAAC4E,oBAAhC,CAA3E;AAAiI;;AAAAtF,MAAAA,CAAC,CAACmF,IAAF,CAAO;AAAC6H,QAAAA,IAAI,EAACpN,CAAN;AAAQqN,QAAAA,KAAK,EAACrN,CAAd;AAAgBmH,QAAAA,IAAI,EAAC;AAArB,OAAP;AAAoD;;AAAA,UAAMlF,CAAC,GAACN,CAAC,GAACwH,KAAK,CAACC,IAAN,CAAWxI,CAAC,CAACyI,MAAF,EAAX,CAAD,GAAwB,CAACnJ,CAAD,CAAjC;AAAqC,WAAO,KAAK+K,aAAL,CAAmBhJ,CAAnB,EAAqBV,CAArB,EAAwB,CAACvB,CAAD,EAAGE,CAAH,KAAOF,CAAC,CAACuM,UAAF,CAAarM,CAAb,CAA/B,GAAiD;AAAC0L,MAAAA,MAAM,EAACxL,CAAR;AAAU0L,MAAAA,QAAQ,EAAC7J;AAAnB,KAAxD;AAA8E;;AAA2B,QAArB4L,qBAAqB,CAAC7N,CAAD,EAAGE,CAAH,EAAK;AAAC,UAAMU,CAAC,GAAC,MAAM,OAAO,yCAAP,CAAd;AAAA,UAAgE;AAACuE,MAAAA,aAAa,EAACrE,CAAf;AAAiB2M,MAAAA,qBAAqB,EAACzM;AAAvC,QAA0ChB,CAA1G;AAAA,UAA4G;AAACwE,MAAAA,cAAc,EAACtD,CAAhB;AAAkBmD,MAAAA,gBAAgB,EAAClD,CAAnC;AAAqC8C,MAAAA,YAAY,EAAC5C,CAAlD;AAAoD8C,MAAAA,IAAI,EAAC5C,CAAzD;AAA2D2C,MAAAA,IAAI,EAACzC;AAAhE,QAAmE,IAA/K;AAAA,UAAoLE,CAAC,GAACzB,CAAC,CAACoJ,GAAF,CAAOtJ,CAAC,IAAE+B,CAAC,CAACV,CAAD,EAAGE,CAAH,EAAKE,CAAL,EAAOP,CAAC,CAACY,WAAF,CAAc9B,CAAd,CAAP,CAAX,CAAtL;AAAA,UAA4N6B,CAAC,GAACjB,CAAC,CAACoN,UAAF,CAAa7M,CAAb,EAAeQ,CAAf,EAAiB,CAAC,CAAlB,EAAqB,CAArB,CAA9N;AAAA,UAAsPM,CAAC,GAAC;AAAC2L,MAAAA,mBAAmB,EAAC,IAArB;AAA0BH,MAAAA,qBAAqB,EAAC;AAAhD,KAAxP;;AAA8S,QAAG,wBAAsB3M,CAAzB,EAA2B;AAAC,YAAMd,CAAC,GAAC6B,CAAC,GAACrB,CAAC,CAACqB,CAAD,CAAF,GAAMnB,CAAC,CAACE,CAAC,CAACqN,KAAF,CAAQ9M,CAAR,EAAUQ,CAAV,CAAD,CAAhB;AAA+BM,MAAAA,CAAC,CAAC2L,mBAAF,GAAsB,EAAC,GAAG5N,CAAJ;AAAMqE,QAAAA,gBAAgB,EAAClD;AAAvB,OAAtB,EAAgDc,CAAC,CAACwL,qBAAF,GAAwBzM,CAAC,IAAE,QAA3E;AAAoF,KAA/I,MAAoJ,IAAG,wBAAsBF,CAAzB,EAA2B;AAAC,YAAMd,CAAC,GAAC6B,CAAC,GAACzB,CAAC,CAACyB,CAAD,CAAF,GAAMvB,CAAC,CAACI,CAAC,CAACE,CAAC,CAACqN,KAAF,CAAQ9M,CAAR,EAAUQ,CAAV,CAAD,CAAF,CAAhB;AAAkCM,MAAAA,CAAC,CAAC2L,mBAAF,GAAsB;AAACvL,QAAAA,CAAC,EAACrC,CAAC,CAAC,CAAD,CAAJ;AAAQiC,QAAAA,CAAC,EAACjC,CAAC,CAAC,CAAD,CAAX;AAAeqE,QAAAA,gBAAgB,EAAClD;AAAhC,OAAtB,EAAyDc,CAAC,CAACwL,qBAAF,GAAwBzM,CAAC,IAAE,UAApF;AAA+F,KAA7J,MAAiK,0BAAwBF,CAAxB,KAA4BmB,CAAC,CAAC2L,mBAAF,GAAsB/L,CAAtB,EAAwBI,CAAC,CAACwL,qBAAF,GAAwBzM,CAAC,IAAE,YAA/E;;AAA6F,WAAOiB,CAAP;AAAS;;AAAA8L,EAAAA,kBAAkB,CAAC/N,CAAD,EAAGE,CAAH,EAAKE,CAAL,EAAOE,CAAP,EAAS;AAAC,UAAK;AAAC8E,MAAAA,gBAAgB,EAAC5E,CAAlB;AAAoB2E,MAAAA,aAAa,EAACzE;AAAlC,QAAqCV,CAA1C;AAA4C,QAAIY,CAAC,GAAC,IAAN;AAAWA,IAAAA,CAAC,GAAC,QAAMR,CAAN,IAASA,CAAC,CAACiF,GAAF,CAAM7E,CAAN,CAAT,GAAkBJ,CAAC,CAACuF,GAAF,CAAMnF,CAAN,CAAlB,GAA2B2B,CAAC,CAAC,KAAKmC,WAAL,CAAiBqB,GAAjB,CAAqBnF,CAArB,CAAD,CAAD,GAA2B+B,CAAC,CAAC;AAAC8G,MAAAA,MAAM,EAACnJ,CAAR;AAAUgO,MAAAA,cAAc,EAAC5N;AAAzB,KAAD,CAA5B,GAA0DmC,CAAC,CAAC;AAAC4G,MAAAA,MAAM,EAACnJ,CAAR;AAAU4J,MAAAA,QAAQ,EAAC,IAAnB;AAAwBC,MAAAA,QAAQ,EAAC,IAAjC;AAAsCQ,MAAAA,eAAe,EAAC,CAAC;AAAvD,KAAD,CAAxF,EAAoJnK,CAAC,IAAEA,CAAC,CAACoF,GAAF,CAAMhF,CAAN,EAAQI,CAAR,CAAvJ;AAAkK,WAAOA,CAAC,CAAC,UAAQF,CAAR,GAAU,UAAV,GAAqBA,CAAtB,CAAR;AAAiC;;AAAAoN,EAAAA,mBAAmB,CAAC9N,CAAD,EAAGE,CAAH,EAAK;AAAC,UAAK;AAACkF,MAAAA,gBAAgB,EAAChF,CAAlB;AAAoB+N,MAAAA,mBAAmB,EAAC7N,CAAxC;AAA0C6E,MAAAA,aAAa,EAAC3E;AAAxD,QAA2DR,CAAhE;AAAA,UAAkE;AAACmK,MAAAA,KAAK,EAACzJ,CAAP;AAAS0N,MAAAA,OAAO,EAACxN;AAAjB,QAAoBN,CAAtF;AAAA,UAAwFQ,CAAC,GAAC,KAAKwD,WAAL,CAAiBqB,GAAjB,CAAqBvF,CAArB,CAA1F;AAAA,UAAkHY,CAAC,GAAC;AAACmJ,MAAAA,KAAK,EAACzJ,CAAP;AAAS0N,MAAAA,OAAO,EAACxN,CAAjB;AAAmBwJ,MAAAA,SAAS,EAAC,QAAMtJ,CAAN,GAAQ,KAAK,CAAb,GAAeA,CAAC,CAACqG,IAA9C;AAAmDkH,MAAAA,UAAU,EAAC,sBAAoB7N;AAAlF,KAApH;AAAyM,WAAOiD,CAAC,CAACvD,CAAD,EAAGc,CAAH,CAAR;AAAc;;AAAAsE,EAAAA,mBAAmB,CAACtF,CAAD,EAAGE,CAAH,EAAKE,CAAL,EAAO;AAAC,QAAGA,CAAC,CAACiF,GAAF,CAAMnF,CAAN,CAAH,EAAY,OAAOE,CAAC,CAACuF,GAAF,CAAMzF,CAAN,CAAP;AAAgB,UAAMI,CAAC,GAAC,KAAKgE,WAAL,CAAiBqB,GAAjB,CAAqBzF,CAArB,CAAR;AAAA,UAAgCM,CAAC,GAAC,KAAKsD,KAAL,CAAWwF,GAAX,CAAgBlJ,CAAC,IAAEJ,CAAC,CAACsM,aAAF,CAAgBlM,CAAhB,EAAkBF,CAAlB,EAAoBI,CAApB,CAAnB,CAAlC;AAA8E,WAAOF,CAAC,CAACoF,GAAF,CAAMtF,CAAN,EAAQM,CAAR,GAAWA,CAAlB;AAAoB;;AAAA8N,EAAAA,6BAA6B,CAACtO,CAAD,EAAGE,CAAH,EAAK;AAAC,WAAO,KAAK4D,KAAL,CAAWwF,GAAX,CAAgBlJ,CAAC,IAAEJ,CAAC,CAACuO,kBAAF,CAAqBnO,CAArB,EAAuB;AAACqJ,MAAAA,KAAK,EAACvJ,CAAC,CAACuJ,KAAT;AAAe+E,MAAAA,SAAS,EAAC,KAAKlK,WAAL,CAAiBqB,GAAjB,CAAqBzF,CAAC,CAACuJ,KAAvB,CAAzB;AAAuDE,MAAAA,kBAAkB,EAACzJ,CAAC,CAACyJ,kBAA5E;AAA+F8E,MAAAA,sBAAsB,EAAC,KAAKnK,WAAL,CAAiBqB,GAAjB,CAAqBzF,CAAC,CAACyJ,kBAAvB,CAAtH;AAAiKC,MAAAA,iBAAiB,EAAC1J,CAAC,CAAC0J,iBAArL;AAAuMC,MAAAA,kBAAkB,EAAC3J,CAAC,CAAC2J;AAA5N,KAAvB,CAAnB,CAAP;AAAoS;;AAAmC,QAA7B6E,6BAA6B,CAAC1O,CAAD,EAAGE,CAAH,EAAKE,CAAL,EAAO;AAAC,UAAK;AAACuO,MAAAA,WAAW,EAACrO;AAAb,QAAgB,MAAMqD,CAAC,EAA5B;AAAA,UAA+BnD,CAAC,GAACF,CAAC,CAACsO,cAAF,CAAiB1O,CAAjB,CAAjC;AAAA,UAAqDQ,CAAC,GAACN,CAAC,IAAEE,CAAC,CAACuO,WAAF,CAAczO,CAAd,CAA1D;AAA2E,WAAO,KAAK0D,KAAL,CAAWwF,GAAX,CAAgBpJ,CAAC,IAAEF,CAAC,CAAC8O,kBAAF,CAAqB5O,CAArB,EAAuB;AAAC6O,MAAAA,YAAY,EAACvO,CAAd;AAAgBwO,MAAAA,QAAQ,EAACtO;AAAzB,KAAvB,EAAmDJ,CAAnD,CAAnB,CAAP;AAAkF;;AAAAmF,EAAAA,sBAAsB,CAACzF,CAAD,EAAGE,CAAH,EAAK;AAAC,UAAME,CAAC,GAAC,EAAR;AAAA,UAAWE,CAAC,GAAC,KAAKwD,KAAlB;AAAA,UAAwBtD,CAAC,GAACF,CAAC,CAACqE,MAA5B;;AAAmC,SAAI,IAAIjE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,CAAd,EAAgBE,CAAC,EAAjB,EAAoB;AAAC,YAAMF,CAAC,GAACF,CAAC,CAACI,CAAD,CAAT;AAAA,YAAaE,CAAC,GAAC,EAAf;;AAAkB,WAAI,MAAMV,CAAV,IAAeF,CAAf,EAAiBY,CAAC,CAAC2E,IAAF,CAAOrF,CAAC,CAACQ,CAAD,CAAR;;AAAa,YAAMI,CAAC,GAACF,CAAC,CAACiF,IAAF,CAAO,GAAP,CAAR;AAAoB3F,MAAAA,CAAC,GAAC,QAAME,CAAC,CAACU,CAAD,CAAP,KAAaV,CAAC,CAACU,CAAD,CAAD,GAAK;AAAC4M,QAAAA,KAAK,EAAC,CAAP;AAAS9H,QAAAA,IAAI,EAAChF,CAAd;AAAgBkD,QAAAA,KAAK,EAAC,CAACtD,CAAD,CAAtB;AAA0BmN,QAAAA,aAAa,EAAC,CAACjN,CAAD;AAAxC,OAAlB,CAAD,GAAiE,QAAMN,CAAC,CAACU,CAAD,CAAP,GAAWV,CAAC,CAACU,CAAD,CAAD,GAAK;AAAC4M,QAAAA,KAAK,EAAC,CAAP;AAAS9H,QAAAA,IAAI,EAAChF,CAAd;AAAgBkD,QAAAA,KAAK,EAAC,CAACtD,CAAD,CAAtB;AAA0BmN,QAAAA,aAAa,EAAC,CAACjN,CAAD;AAAxC,OAAhB,IAA8DN,CAAC,CAACU,CAAD,CAAD,CAAK4M,KAAL,IAAatN,CAAC,CAACU,CAAD,CAAD,CAAKgD,KAAL,CAAWyB,IAAX,CAAgB/E,CAAhB,CAAb,EAAgCJ,CAAC,CAACU,CAAD,CAAD,CAAK6M,aAAL,CAAmBpI,IAAnB,CAAwB7E,CAAxB,CAA9F,CAAlE;AAA4L;;AAAA,WAAON,CAAP;AAAS;;AAAoB,QAAd8J,cAAc,CAAClK,CAAD,EAAGE,CAAH,EAAK;AAAC,UAAME,CAAC,GAAC,IAAIe,CAAJ,CAAMnB,CAAN,EAAQ,KAAKwE,cAAb,EAA4B,KAAKF,WAAjC,CAAR;AAAA,UAAsD;AAACoF,MAAAA,eAAe,EAACpJ,CAAjB;AAAmBmJ,MAAAA,KAAK,EAACjJ,CAAzB;AAA2BmJ,MAAAA,kBAAkB,EAACjJ,CAA9C;AAAgDkJ,MAAAA,iBAAiB,EAAChJ,CAAlE;AAAoEiJ,MAAAA,kBAAkB,EAAC/I,CAAvF;AAAyFkJ,MAAAA,KAAK,EAAChJ;AAA/F,QAAkGd,CAAxJ;AAAA,UAA0JgB,CAAC,GAACZ,CAAC,GAAC;AAAC2O,MAAAA,WAAW,EAAC,KAAb;AAAmBjF,MAAAA,KAAK,EAAChJ,CAAzB;AAA2BqD,MAAAA,gBAAgB,EAACrE,CAAC,CAACsG,KAAF,IAAS,KAAKjC;AAA1D,KAAD,GAA6E,IAA1O;AAA+O,WAAO/D,CAAC,GAAC,KAAKoO,6BAAL,CAAmCtO,CAAnC,EAAqCE,CAArC,EAAuCY,CAAvC,CAAD,GAA2C,KAAKoN,6BAAL,CAAmClO,CAAnC,EAAqC;AAACqJ,MAAAA,KAAK,EAACjJ,CAAP;AAASmJ,MAAAA,kBAAkB,EAACjJ,CAA5B;AAA8BkJ,MAAAA,iBAAiB,EAAChJ,CAAhD;AAAkDiJ,MAAAA,kBAAkB,EAAC/I;AAArE,KAArC,CAAnD;AAAiK;;AAA10b;;AAA20b,SAASoG,CAAT,CAAWlH,CAAX,EAAaE,CAAb,EAAeE,CAAf,EAAiBE,CAAjB,EAAmBE,CAAnB,EAAqBE,CAArB,EAAuB;AAAC,QAAME,CAAC,GAACJ,CAAC,GAACJ,CAAV;AAAA,QAAYU,CAAC,GAACJ,CAAC,GAACJ,CAAhB;AAAA,QAAkBU,CAAC,GAACJ,CAAC,GAACA,CAAF,GAAIE,CAAC,GAACA,CAA1B;AAAA,QAA4BI,CAAC,GAAC,CAAClB,CAAC,GAACI,CAAH,IAAMQ,CAAN,GAAQ,CAACV,CAAC,GAACI,CAAH,IAAMQ,CAA5C;AAAA,QAA8CK,CAAC,GAACmG,IAAI,CAACuF,GAAL,CAAS,CAAT,EAAWvF,IAAI,CAAC4H,GAAL,CAAS,CAAT,EAAWhO,CAAC,GAACF,CAAb,CAAX,CAAhD;AAA4E,SAAM;AAACqB,IAAAA,CAAC,EAACjC,CAAC,GAACQ,CAAC,GAACO,CAAP;AAASc,IAAAA,CAAC,EAAC3B,CAAC,GAACQ,CAAC,GAACK;AAAf,GAAN;AAAwB;;AAAA,SAASqF,CAAT,CAAWxG,CAAX,EAAaE,CAAb,EAAe;AAAC,SAAOF,CAAC,GAACE,CAAC,GAAC,CAAD,GAAG,CAAL,GAAOA,CAAC,GAAC,CAAD,GAAG,CAAnB;AAAqB;;AAAA,IAAI8G,CAAJ;AAAM,CAAC,UAAShH,CAAT,EAAW;AAACA,EAAAA,CAAC,CAACA,CAAC,CAACmP,IAAF,GAAO,CAAR,CAAD,GAAY,MAAZ,EAAmBnP,CAAC,CAACA,CAAC,CAACiH,IAAF,GAAO,CAAR,CAAD,GAAY,MAA/B,EAAsCjH,CAAC,CAACA,CAAC,CAAC2H,MAAF,GAAS,CAAV,CAAD,GAAc,QAApD;AAA6D,CAAzE,CAA0EX,CAAC,KAAGA,CAAC,GAAC,EAAL,CAA3E,CAAD;AAAsF,SAAOA,CAAC,IAAIoI,aAAZ,EAA0BxL,CAAC,IAAIyL,OAA/B","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport{isNone as e,isSome as t}from\"../../../core/maybe.js\";import{polygonCentroid as i,extentCentroid as s}from\"../../../geometry/support/centroid.js\";import{getPolygonExtent as a,getGeometryExtent as r}from\"../../../geometry/support/extentUtils.js\";import{toQuantizationTransform as n}from\"../../../geometry/support/quantizationUtils.js\";import{isValid as o,equals as l}from\"../../../geometry/support/spatialReferenceUtils.js\";import{convertFromGeometry as u}from\"../featureConversionUtils.js\";import c from\"./AttributesBuilder.js\";import{getWhereClause as m}from\"./attributeSupport.js\";import{project as d,projectMany as h}from\"./projectionSupport.js\";import{getTimeOperator as f}from\"./timeSupport.js\";import{cleanFromGeometryEngine as p,getGeometry as g,transformCentroid as y}from\"./utils.js\";import{isStringField as I}from\"../../support/fieldUtils.js\";import{isNullCountSupported as x,calculateStringStatistics as T,calculateStatistics as F,processSummaryStatisticsResult as V,calculateUniqueValuesCount as v,createUVResult as b,calculateClassBreaks as z,resolveCBResult as A,calculateHistogram as S,getAttributeComparator as _,calculatePercentile as E}from\"../../../statistics/utils.js\";import{loadArcade as R}from\"../../../support/arcadeOnDemand.js\";class G{constructor(e,t,i){this.items=e,this.queryGeometry=t,this.definitionExpression=i.definitionExpression,this.geometryType=i.geometryType,this.hasM=i.hasM,this.hasZ=i.hasZ,this.objectIdField=i.objectIdField,this.spatialReference=i.spatialReference,this.fieldsIndex=i.fieldsIndex,this.timeInfo=i.timeInfo,this.featureAdapter=i.featureAdapter,this.aggregateAdapter=i.aggregateAdapter}get size(){return this.items.length}createQueryResponseForCount(e){const t=new c(e,this.featureAdapter,this.fieldsIndex);if(!e.outStatistics)return t.countDistinctValues(this.items);const{groupByFieldsForStatistics:i,having:s}=e;if(!!!(null==i?void 0:i.length))return 1;const a=new Map,r=new Map,n=new Set,o=e.outStatistics;for(const l of o){const{statisticType:e}=l,o=\"exceedslimit\"!==e?l.onStatisticField:void 0;if(!r.has(o)){const e=[];for(const s of i){const i=this._getAttributeValues(t,s,a);e.push(i)}r.set(o,this._calculateUniqueValues(e,t.returnDistinctValues))}const u=r.get(o);for(const i in u){const{data:e,items:a}=u[i],r=e.join(\",\");s&&!t.validateItems(a,s)||n.add(r)}}return n.size}async createQueryResponse(e){let t;if(e.outStatistics){t=e.outStatistics.some((e=>\"exceedslimit\"===e.statisticType))?this._createExceedsLimitQueryResponse(e):await this._createStatisticsQueryResponse(e)}else t=this._createFeatureQueryResponse(e);return e.returnQueryGeometry&&(o(e.outSR)&&!l(this.queryGeometry.spatialReference,e.outSR)?t.queryGeometry=p({spatialReference:e.outSR,...d(this.queryGeometry,this.queryGeometry.spatialReference,e.outSR)}):t.queryGeometry=p({spatialReference:e.outSR,...this.queryGeometry})),t}createSnappingResponse(t,i){const s=this.featureAdapter,a=w(this.hasZ,this.hasM),{x:r,y:n}=t.point,o=\"number\"==typeof t.distance?t.distance:t.distance.x,l=\"number\"==typeof t.distance?t.distance:t.distance.y,u={candidates:[]},c=\"esriGeometryPolygon\"===this.geometryType,m=this._getPointCreator(t.point,this.spatialReference,i);for(const d of this.items){const i=s.getGeometry(d);if(e(i))continue;const{coords:h,lengths:f}=i;if(t.types&N.EDGE){let e=0;for(let t=0;t<f.length;t++){const i=f[t];for(let t=0;t<i;t++,e+=a){const c=h[e],f=h[e+1];if(t!==i-1){const t=h[e+a],i=h[e+a+1],{x:p,y:g}=j(r,n,c,f,t,i),y=(r-p)/o,I=(n-g)/l,x=y*y+I*I;x<=1&&u.candidates.push({type:\"edge\",objectId:s.getObjectId(d),distance:Math.sqrt(x),target:m(p,g),start:m(c,f),end:m(t,i)})}}}}if(t.types&N.VERTEX){const e=c?h.length-a:h.length;for(let t=0;t<e;t+=a){const e=h[t],i=h[t+1],a=(r-e)/o,c=(n-i)/l,f=a*a+c*c;f<=1&&u.candidates.push({type:\"vertex\",objectId:s.getObjectId(d),distance:Math.sqrt(f),target:m(e,i)})}}}return u.candidates.sort(((e,t)=>e.distance-t.distance)),u}_getPointCreator(e,i,s){const a=t(s)&&!l(i,s)?e=>d(e,i,s):e=>e;return null!=e.z&&null!=e.m?(t,i)=>a({x:t,y:i,z:e.z,m:e.m}):null!=e.z?(t,i)=>a({x:t,y:i,z:e.z}):null!=e.m?(t,i)=>a({x:t,y:i,m:e.m}):(e,t)=>a({x:e,y:t})}executeAttributesQuery(e){const t=m(e.where,this.fieldsIndex);if(!t)return Promise.resolve(this);if(t.isStandardized){let i=0;const s=[];for(const e of this.items)t.testFeature(e,this.featureAdapter)&&(s[i++]=e);const a=new G(s,this.queryGeometry,this);return a.definitionExpression=e.where,Promise.resolve(a)}return Promise.reject(new TypeError(\"Where clause is not standardized\"))}executeAggregateIdsQuery(t){if(!t.aggregateIds||!t.aggregateIds.length||e(this.aggregateAdapter))return Promise.resolve(this);const i=new Set;for(const e of t.aggregateIds){this.aggregateAdapter.getFeatureObjectIds(e).forEach((e=>i.add(e)))}const s=this.featureAdapter.getObjectId;return Promise.resolve(new G(this.items.filter((e=>i.has(s(e)))),this.queryGeometry,this))}executeObjectIdsQuery(e){if(!e.objectIds||!e.objectIds.length)return Promise.resolve(this);const t=new Set(e.objectIds),i=this.featureAdapter.getObjectId;return Promise.resolve(new G(this.items.filter((e=>t.has(i(e)))),this.queryGeometry,this))}executeTimeQuery(e){const i=f(this.timeInfo,e.timeExtent,this.featureAdapter);if(!t(i))return Promise.resolve(this);const s=this.items.filter(i);return Promise.resolve(new G(s,this.queryGeometry,this))}filterLatest(){const{trackIdField:e,startTimeField:t,endTimeField:i}=this.timeInfo,s=i||t,a=new Map,r=this.featureAdapter.getAttribute;for(const o of this.items){const t=r(o,e),i=r(o,s),n=a.get(t);(!n||i>r(n,s))&&a.set(t,o)}const n=Array.from(a.values());return Promise.resolve(new G(n,this.queryGeometry,this))}async project(e){if(!e||l(this.spatialReference,e))return this;const t=this.featureAdapter,i=(await h(this.items.map((e=>g(this.geometryType,this.hasZ,this.hasM,t.getGeometry(e)))),this.spatialReference,e)).map(((e,i)=>t.cloneWithGeometry(this.items[i],u(e,this.hasZ,this.hasM))));return new G(i,this.queryGeometry,{definitionExpression:this.definitionExpression,geometryType:this.geometryType,hasM:this.hasM,hasZ:this.hasZ,objectIdField:this.objectIdField,spatialReference:e,fieldsIndex:this.fieldsIndex,timeInfo:this.timeInfo,featureAdapter:this.featureAdapter})}async createSummaryStatisticsResponse(e,t){const{field:i,valueExpression:s,normalizationField:a,normalizationType:r,normalizationTotal:n,minValue:o,maxValue:l,scale:u}=t,c=this.fieldsIndex.isDateField(i),m=await this._getDataValues(e,{field:i,valueExpression:s,normalizationField:a,normalizationType:r,normalizationTotal:n,scale:u}),d=x({normalizationType:r,normalizationField:a,minValue:o,maxValue:l}),h=this.fieldsIndex.get(i),f={value:.5,fieldType:null==h?void 0:h.type},p=I(h)?T({values:m,supportsNullCount:d,percentileParams:f}):F({values:m,minValue:o,maxValue:l,useSampleStdDev:!r,supportsNullCount:d,percentileParams:f});return V(p,c)}async createUniqueValuesResponse(e,t){const{field:i,valueExpression:s,domain:a,returnAllCodedValues:r,scale:n}=t,o=await this._getDataValues(e,{field:i,valueExpression:s,scale:n}),l=v(o);return b(l,a,r)}async createClassBreaksResponse(e,t){const{field:i,valueExpression:s,normalizationField:a,normalizationType:r,normalizationTotal:n,classificationMethod:o,standardDeviationInterval:l,minValue:u,maxValue:c,numClasses:m,scale:d}=t,h=await this._getDataValues(e,{field:i,valueExpression:s,normalizationField:a,normalizationType:r,normalizationTotal:n,scale:d}),f=z(h,{field:i,normalizationField:a,normalizationType:r,normalizationTotal:n,classificationMethod:o,standardDeviationInterval:l,minValue:u,maxValue:c,numClasses:m});return A(f,o)}async createHistogramResponse(e,t){const{field:i,valueExpression:s,normalizationField:a,normalizationType:r,normalizationTotal:n,classificationMethod:o,standardDeviationInterval:l,minValue:u,maxValue:c,numBins:m,scale:d}=t,h=await this._getDataValues(e,{field:i,valueExpression:s,normalizationField:a,normalizationType:r,normalizationTotal:n,scale:d});return S(h,{field:i,normalizationField:a,normalizationType:r,normalizationTotal:n,classificationMethod:o,standardDeviationInterval:l,minValue:u,maxValue:c,numBins:m})}_sortFeatures(e,t,i){if(e.length>1&&t&&t.length)for(const s of t.reverse()){const t=s.split(\" \"),a=t[0],r=this.fieldsIndex.get(a),n=t[1]&&\"desc\"===t[1].toLowerCase(),o=_(null==r?void 0:r.type,n);e.sort(((e,t)=>{const s=i(e,a,r),n=i(t,a,r);return o(s,n)}))}}_createFeatureQueryResponse(e){const t=this.items,{geometryType:i,hasM:s,hasZ:a,objectIdField:r,spatialReference:o}=this,{outFields:l,outSR:u,quantizationParameters:c,resultRecordCount:m,resultOffset:d,returnZ:h,returnM:f}=e,g=null!=m&&t.length>(d||0)+m,y=l&&(l.includes(\"*\")?[...this.fieldsIndex.fields]:l.map((e=>this.fieldsIndex.get(e))));return{exceededTransferLimit:g,features:this._createFeatures(e,t),fields:y,geometryType:i,hasM:s&&f,hasZ:a&&h,objectIdFieldName:r,spatialReference:p(u||o),transform:c&&n(c)||null}}_createFeatures(e,t){const i=new c(e,this.featureAdapter,this.fieldsIndex),{hasM:s,hasZ:a}=this,{orderByFields:r,quantizationParameters:o,returnGeometry:l,returnCentroid:u,maxAllowableOffset:m,resultOffset:d,resultRecordCount:h,returnZ:f=!1,returnM:p=!1}=e,I=a&&f,x=s&&p;let T=[],F=0;const V=[...t];if(this._sortFeatures(V,r,((e,t,s)=>i.getFieldValue(e,t,s))),l||u){const e=n(o);if(l&&!u)for(const t of V)T[F++]={attributes:i.getAttributes(t),geometry:g(this.geometryType,this.hasZ,this.hasM,this.featureAdapter.getGeometry(t),m,e,I,x)};else if(!l&&u)for(const t of V)T[F++]={attributes:i.getAttributes(t),centroid:y(this,this.featureAdapter.getCentroid(t,this),e)};else for(const t of V)T[F++]={attributes:i.getAttributes(t),centroid:y(this,this.featureAdapter.getCentroid(t,this),e),geometry:g(this.geometryType,this.hasZ,this.hasM,this.featureAdapter.getGeometry(t),m,e,I,x)}}else for(const n of V){const e=i.getAttributes(n);e&&(T[F++]={attributes:e})}const v=d||0;if(null!=h){const e=v+h;T=T.slice(v,Math.min(T.length,e))}return T}_createExceedsLimitQueryResponse(e){let i=!1,s=Number.POSITIVE_INFINITY,a=Number.POSITIVE_INFINITY,r=Number.POSITIVE_INFINITY;for(const t of e.outStatistics)if(\"exceedslimit\"===t.statisticType){s=null!=t.maxPointCount?t.maxPointCount:Number.POSITIVE_INFINITY,a=null!=t.maxRecordCount?t.maxRecordCount:Number.POSITIVE_INFINITY,r=null!=t.maxVertexCount?t.maxVertexCount:Number.POSITIVE_INFINITY;break}if(\"esriGeometryPoint\"===this.geometryType)i=this.items.length>s;else if(this.items.length>a)i=!0;else{const e=this.hasZ?this.hasM?4:3:this.hasM?3:2,s=this.featureAdapter;i=this.items.reduce(((e,i)=>{const a=s.getGeometry(i);return e+(t(a)&&a.coords.length||0)}),0)/e>r}return{fields:[{name:\"exceedslimit\",type:\"esriFieldTypeInteger\",alias:\"exceedslimit\",sqlType:\"sqlTypeInteger\",domain:null,defaultValue:null}],features:[{attributes:{exceedslimit:Number(i)}}]}}async _createStatisticsQueryResponse(e){const t={attributes:{}},i=[],s=new Map,a=new Map,r=new Map,n=new Map,o=new c(e,this.featureAdapter,this.fieldsIndex),l=e.outStatistics,{groupByFieldsForStatistics:u,having:m,orderByFields:d}=e,h=u&&u.length,f=!!h,p=f&&u[0],g=f&&!this.fieldsIndex.get(p);for(const c of l){const{outStatisticFieldName:e,statisticType:l}=c,d=c,y=\"exceedslimit\"!==l?c.onStatisticField:void 0,I=\"percentile_disc\"===l||\"percentile_cont\"===l,x=\"EnvelopeAggregate\"===l||\"CentroidAggregate\"===l||\"ConvexHullAggregate\"===l,T=f&&1===h&&(y===p||g)&&\"count\"===l;if(f){if(!r.has(y)){const e=[];for(const t of u){const i=this._getAttributeValues(o,t,s);e.push(i)}r.set(y,this._calculateUniqueValues(e,o.returnDistinctValues))}const t=r.get(y);for(const i in t){const{count:a,data:r,items:l,itemPositions:c}=t[i],h=r.join(\",\");if(!m||o.validateItems(l,m)){const t=n.get(h)||{attributes:{}};if(x){t.aggregateGeometries||(t.aggregateGeometries={});const{aggregateGeometries:e,outStatisticFieldName:i}=await this._getAggregateGeometry(d,l);t.aggregateGeometries[i]=e}else{let i=null;if(T)i=a;else{const e=this._getAttributeValues(o,y,s),t=c.map((t=>e[t]));i=I&&\"statisticParameters\"in d?this._getPercentileValue(d,t):this._getStatisticValue(d,t,null,o.returnDistinctValues)}t.attributes[e]=i}u.forEach(((e,i)=>t.attributes[this.fieldsIndex.get(e)?e:`EXPR_${i+1}`]=r[i])),n.set(h,t)}}}else if(x){t.aggregateGeometries||(t.aggregateGeometries={});const{aggregateGeometries:e,outStatisticFieldName:i}=await this._getAggregateGeometry(d,this.items);t.aggregateGeometries[i]=e}else{const i=this._getAttributeValues(o,y,s);t.attributes[e]=I&&\"statisticParameters\"in d?this._getPercentileValue(d,i):this._getStatisticValue(d,i,a,o.returnDistinctValues)}i.push({name:e,alias:e,type:\"esriFieldTypeDouble\"})}const y=f?Array.from(n.values()):[t];return this._sortFeatures(y,d,((e,t)=>e.attributes[t])),{fields:i,features:y}}async _getAggregateGeometry(e,t){const n=await import(\"../../../geometry/geometryEngineJSON.js\"),{statisticType:o,outStatisticFieldName:l}=e,{featureAdapter:u,spatialReference:c,geometryType:m,hasZ:d,hasM:h}=this,f=t.map((e=>g(m,d,h,u.getGeometry(e)))),p=n.convexHull(c,f,!0)[0],y={aggregateGeometries:null,outStatisticFieldName:null};if(\"EnvelopeAggregate\"===o){const e=p?a(p):r(n.union(c,f));y.aggregateGeometries={...e,spatialReference:c},y.outStatisticFieldName=l||\"extent\"}else if(\"CentroidAggregate\"===o){const e=p?i(p):s(r(n.union(c,f)));y.aggregateGeometries={x:e[0],y:e[1],spatialReference:c},y.outStatisticFieldName=l||\"centroid\"}else\"ConvexHullAggregate\"===o&&(y.aggregateGeometries=p,y.outStatisticFieldName=l||\"convexHull\");return y}_getStatisticValue(e,t,i,s){const{onStatisticField:a,statisticType:r}=e;let n=null;n=null!=i&&i.has(a)?i.get(a):I(this.fieldsIndex.get(a))?T({values:t,returnDistinct:s}):F({values:t,minValue:null,maxValue:null,useSampleStdDev:!0}),i&&i.set(a,n);return n[\"var\"===r?\"variance\":r]}_getPercentileValue(e,t){const{onStatisticField:i,statisticParameters:s,statisticType:a}=e,{value:r,orderBy:n}=s,o=this.fieldsIndex.get(i),l={value:r,orderBy:n,fieldType:null==o?void 0:o.type,isDiscrete:\"percentile_disc\"===a};return E(t,l)}_getAttributeValues(e,t,i){if(i.has(t))return i.get(t);const s=this.fieldsIndex.get(t),a=this.items.map((i=>e.getFieldValue(i,t,s)));return i.set(t,a),a}_getAttributeNormalizedValues(e,t){return this.items.map((i=>e.getNormalizedValue(i,{field:t.field,fieldInfo:this.fieldsIndex.get(t.field),normalizationField:t.normalizationField,normalizationFieldInfo:this.fieldsIndex.get(t.normalizationField),normalizationType:t.normalizationType,normalizationTotal:t.normalizationTotal})))}async _getAttributeExpressionValues(e,t,i){const{arcadeUtils:s}=await R(),a=s.createFunction(t),r=i&&s.getViewInfo(i);return this.items.map((t=>e.getExpressionValue(t,{compiledFunc:a,viewInfo:r},s)))}_calculateUniqueValues(e,t){const i={},s=this.items,a=s.length;for(let r=0;r<a;r++){const a=s[r],n=[];for(const t of e)n.push(t[r]);const o=n.join(\",\");t?null==i[o]&&(i[o]={count:1,data:n,items:[a],itemPositions:[r]}):null==i[o]?i[o]={count:1,data:n,items:[a],itemPositions:[r]}:(i[o].count++,i[o].items.push(a),i[o].itemPositions.push(r))}return i}async _getDataValues(e,t){const i=new c(e,this.featureAdapter,this.fieldsIndex),{valueExpression:s,field:a,normalizationField:r,normalizationType:n,normalizationTotal:o,scale:l}=t,u=s?{viewingMode:\"map\",scale:l,spatialReference:e.outSR||this.spatialReference}:null;return s?this._getAttributeExpressionValues(i,s,u):this._getAttributeNormalizedValues(i,{field:a,normalizationField:r,normalizationType:n,normalizationTotal:o})}}function j(e,t,i,s,a,r){const n=a-i,o=r-s,l=n*n+o*o,u=(e-i)*n+(t-s)*o,c=Math.min(1,Math.max(0,u/l));return{x:i+n*c,y:s+o*c}}function w(e,t){return e?t?4:3:t?3:2}var N;!function(e){e[e.NONE=0]=\"NONE\",e[e.EDGE=1]=\"EDGE\",e[e.VERTEX=2]=\"VERTEX\"}(N||(N={}));export{N as SnappingTypes,G as default};\n"]},"metadata":{},"sourceType":"module"}