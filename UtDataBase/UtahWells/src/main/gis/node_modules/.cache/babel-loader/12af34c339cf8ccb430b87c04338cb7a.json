{"ast":null,"code":"/*\n Stencil Client Platform v2.13.0 | MIT Licensed | https://stenciljs.com\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = selector => {\n  const placeholders = [];\n  let index = 0;\n  let content; // Replaces attribute selectors with placeholders.\n  // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n\n  selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(keep);\n    index++;\n    return replaceBy;\n  }); // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n  // WS and \"+\" would otherwise be interpreted as selector separators.\n\n  content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(exp);\n    index++;\n    return pseudo + replaceBy;\n  });\n  const ss = {\n    content,\n    placeholders\n  };\n  return ss;\n};\n\nconst restoreSafeSelector = (placeholders, content) => {\n  return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\n\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted'; // note: :host-context pre-processed to -shadowcsshostcontext.\n\nconst _polyfillHostContext = '-shadowcsscontext';\n\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\n\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\n\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\n\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\n\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\n\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\n\nconst stripComments = input => {\n  return input.replace(_commentRe, '');\n};\n\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\n\nconst extractCommentsWithHash = input => {\n  return input.match(_commentWithHashRe) || [];\n};\n\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\n\nconst processRules = (input, ruleCallback) => {\n  const inputWithEscapedBlocks = escapeBlocks(input);\n  let nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n    const selector = arguments.length <= 2 ? undefined : arguments[2];\n    let content = '';\n    let suffix = arguments.length <= 4 ? undefined : arguments[4];\n    let contentPrefix = '';\n\n    if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = '{';\n    }\n\n    const cssRule = {\n      selector,\n      content\n    };\n    const rule = ruleCallback(cssRule);\n    return `${arguments.length <= 1 ? undefined : arguments[1]}${rule.selector}${arguments.length <= 3 ? undefined : arguments[3]}${contentPrefix}${rule.content}${suffix}`;\n  });\n};\n\nconst escapeBlocks = input => {\n  const inputParts = input.split(_curlyRe);\n  const resultParts = [];\n  const escapedBlocks = [];\n  let bracketCount = 0;\n  let currentBlockParts = [];\n\n  for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    const part = inputParts[partIndex];\n\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n\n      resultParts.push(part);\n    }\n\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(''));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n\n  const strEscapedBlocks = {\n    escapedString: resultParts.join(''),\n    blocks: escapedBlocks\n  };\n  return strEscapedBlocks;\n};\n\nconst insertPolyfillHostInCssText = selector => {\n  selector = selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost).replace(_colonSlottedRe, _polyfillSlotted);\n  return selector;\n};\n\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n  // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n  return cssText.replace(regExp, function () {\n    for (var _len = arguments.length, m = new Array(_len), _key = 0; _key < _len; _key++) {\n      m[_key] = arguments[_key];\n    }\n\n    if (m[2]) {\n      const parts = m[2].split(',');\n      const r = [];\n\n      for (let i = 0; i < parts.length; i++) {\n        const p = parts[i].trim();\n        if (!p) break;\n        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n      }\n\n      return r.join(',');\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n};\n\nconst colonHostPartReplacer = (host, part, suffix) => {\n  return host + part.replace(_polyfillHost, '') + suffix;\n};\n\nconst convertColonHost = cssText => {\n  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\n\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n  if (part.indexOf(_polyfillHost) > -1) {\n    return colonHostPartReplacer(host, part, suffix);\n  } else {\n    return host + part + suffix + ', ' + part + ' ' + host + suffix;\n  }\n};\n\nconst convertColonSlotted = (cssText, slotScopeId) => {\n  const slotClass = '.' + slotScopeId + ' > ';\n  const selectors = [];\n  cssText = cssText.replace(_cssColonSlottedRe, function () {\n    for (var _len2 = arguments.length, m = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      m[_key2] = arguments[_key2];\n    }\n\n    if (m[2]) {\n      const compound = m[2].trim();\n      const suffix = m[3];\n      const slottedSelector = slotClass + compound + suffix;\n      let prefixSelector = '';\n\n      for (let i = m[4] - 1; i >= 0; i--) {\n        const char = m[5][i];\n\n        if (char === '}' || char === ',') {\n          break;\n        }\n\n        prefixSelector = char + prefixSelector;\n      }\n\n      const orgSelector = prefixSelector + slottedSelector;\n      const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n\n      if (orgSelector.trim() !== addedSelector.trim()) {\n        const updatedSelector = `${addedSelector}, ${orgSelector}`;\n        selectors.push({\n          orgSelector,\n          updatedSelector\n        });\n      }\n\n      return slottedSelector;\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n  return {\n    selectors,\n    cssText\n  };\n};\n\nconst convertColonHostContext = cssText => {\n  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\n\nconst convertShadowDOMSelectors = cssText => {\n  return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\n\nconst makeScopeMatcher = scopeSelector => {\n  const lre = /\\[/g;\n  const rre = /\\]/g;\n  scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n  return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\n\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n  const re = makeScopeMatcher(scopeSelector);\n  return !re.test(selector);\n};\n\nconst injectScopingSelector = (selector, scopingSelector) => {\n  return selector.replace(_selectorPartsRe, function (_) {\n    let before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    let _colonGroup = arguments.length > 2 ? arguments[2] : undefined;\n\n    let colon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    let after = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n    return before + scopingSelector + colon + after;\n  });\n};\n\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n  // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n  _polyfillHostRe.lastIndex = 0;\n\n  if (_polyfillHostRe.test(selector)) {\n    const replaceBy = `.${hostSelector}`;\n    return selector.replace(_polyfillHostNoCombinatorRe, (_, selector) => injectScopingSelector(selector, replaceBy)).replace(_polyfillHostRe, replaceBy + ' ');\n  }\n\n  return scopeSelector + ' ' + selector;\n};\n\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n  const isRe = /\\[is=([^\\]]*)\\]/g;\n  scopeSelector = scopeSelector.replace(isRe, function (_) {\n    return arguments.length <= 1 ? undefined : arguments[1];\n  });\n  const className = '.' + scopeSelector;\n\n  const _scopeSelectorPart = p => {\n    let scopedP = p.trim();\n\n    if (!scopedP) {\n      return '';\n    }\n\n    if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n      scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n    } else {\n      // remove :host since it should be unnecessary\n      const t = p.replace(_polyfillHostRe, '');\n\n      if (t.length > 0) {\n        scopedP = injectScopingSelector(t, className);\n      }\n    }\n\n    return scopedP;\n  };\n\n  const safeContent = safeSelector(selector);\n  selector = safeContent.content;\n  let scopedSelector = '';\n  let startIndex = 0;\n  let res;\n  const sep = /( |>|\\+|~(?!=))\\s*/g; // If a selector appears before :host it should not be shimmed as it\n  // matches on ancestor elements and not on elements in the host's shadow\n  // `:host-context(div)` is transformed to\n  // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n  // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n  // Historically `component-tag:host` was matching the component so we also want to preserve\n  // this behavior to avoid breaking legacy apps (it should not match).\n  // The behavior should be:\n  // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n  // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n  //   `:host-context(tag)`)\n\n  const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1; // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n\n  let shouldScope = !hasHost;\n\n  while ((res = sep.exec(selector)) !== null) {\n    const separator = res[1];\n    const part = selector.slice(startIndex, res.index).trim();\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n    scopedSelector += `${scopedPart} ${separator} `;\n    startIndex = sep.lastIndex;\n  }\n\n  const part = selector.substring(startIndex);\n  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part; // replace the placeholders with their original values\n\n  return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\n\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n  return selector.split(',').map(shallowPart => {\n    if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n      return shallowPart.trim();\n    }\n\n    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n    } else {\n      return shallowPart.trim();\n    }\n  }).join(', ');\n};\n\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n  return processRules(cssText, rule => {\n    let selector = rule.selector;\n    let content = rule.content;\n\n    if (rule.selector[0] !== '@') {\n      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n    } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n    }\n\n    const cssRule = {\n      selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n      content\n    };\n    return cssRule;\n  });\n};\n\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n  cssText = insertPolyfillHostInCssText(cssText);\n  cssText = convertColonHost(cssText);\n  cssText = convertColonHostContext(cssText);\n  const slotted = convertColonSlotted(cssText, slotScopeId);\n  cssText = slotted.cssText;\n  cssText = convertShadowDOMSelectors(cssText);\n\n  if (scopeId) {\n    cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n  }\n\n  cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n  cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n  return {\n    cssText: cssText.trim(),\n    slottedSelectors: slotted.selectors\n  };\n};\n\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n  const hostScopeId = scopeId + '-h';\n  const slotScopeId = scopeId + '-s';\n  const commentsWithHash = extractCommentsWithHash(cssText);\n  cssText = stripComments(cssText);\n  const orgSelectors = [];\n\n  if (commentOriginalSelector) {\n    const processCommentedSelector = rule => {\n      const placeholder = `/*!@___${orgSelectors.length}___*/`;\n      const comment = `/*!@${rule.selector}*/`;\n      orgSelectors.push({\n        placeholder,\n        comment\n      });\n      rule.selector = placeholder + rule.selector;\n      return rule;\n    };\n\n    cssText = processRules(cssText, rule => {\n      if (rule.selector[0] !== '@') {\n        return processCommentedSelector(rule);\n      } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n        rule.content = processRules(rule.content, processCommentedSelector);\n        return rule;\n      }\n\n      return rule;\n    });\n  }\n\n  const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n  cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n\n  if (commentOriginalSelector) {\n    orgSelectors.forEach(_ref => {\n      let {\n        placeholder,\n        comment\n      } = _ref;\n      cssText = cssText.replace(placeholder, comment);\n    });\n  }\n\n  scoped.slottedSelectors.forEach(slottedSelector => {\n    cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n  });\n  return cssText;\n};\n\nexport { scopeCss };","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/gis/node_modules/@stencil/core/internal/client/shadow-css.js"],"names":["safeSelector","selector","placeholders","index","content","replace","_","keep","replaceBy","push","pseudo","exp","ss","restoreSafeSelector","_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_selectorReSuffix","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","stripComments","input","_commentWithHashRe","extractCommentsWithHash","match","_ruleRe","_curlyRe","_selectorPartsRe","OPEN_CURLY","CLOSE_CURLY","BLOCK_PLACEHOLDER","processRules","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","suffix","contentPrefix","startsWith","blocks","substring","length","cssRule","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","join","strEscapedBlocks","insertPolyfillHostInCssText","convertColonRule","cssText","regExp","partReplacer","m","parts","r","i","p","trim","colonHostPartReplacer","host","convertColonHost","colonHostContextPartReplacer","indexOf","convertColonSlotted","slotScopeId","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","convertColonHostContext","convertShadowDOMSelectors","reduce","result","pattern","makeScopeMatcher","scopeSelector","lre","rre","selectorNeedsScoping","re","test","injectScopingSelector","scopingSelector","before","_colonGroup","colon","after","applySimpleSelectorScope","hostSelector","lastIndex","applyStrictSelectorScope","isRe","className","_scopeSelectorPart","scopedP","t","safeContent","scopedSelector","startIndex","res","sep","hasHost","shouldScope","exec","separator","slice","scopedPart","scopeSelectorText","slotSelector","map","shallowPart","scopeSelectors","commentOriginalSelector","scopeCssText","scopeId","hostScopeId","slotted","slottedSelectors","scopeCss","commentsWithHash","orgSelectors","processCommentedSelector","placeholder","comment","scoped","forEach"],"mappings":"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","sourcesContent":["/*\n Stencil Client Platform v2.13.0 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    let content;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content,\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\nconst insertPolyfillHostInCssText = (selector) => {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText,\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst injectScopingSelector = (selector, scopingSelector) => {\n    return selector.replace(_selectorPartsRe, (_, before = '', _colonGroup, colon = '', after = '') => {\n        return before + scopingSelector + colon + after;\n    });\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => injectScopingSelector(selector, replaceBy))\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                scopedP = injectScopingSelector(t, className);\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector\n        .split(',')\n        .map((shallowPart) => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') ||\n            rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') ||\n            rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content,\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, (rule) => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') ||\n                rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') ||\n                rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach((slottedSelector) => {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n"]},"metadata":{},"sourceType":"module"}