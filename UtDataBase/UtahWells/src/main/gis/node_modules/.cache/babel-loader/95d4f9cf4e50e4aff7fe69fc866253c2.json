{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport e from \"../../core/Logger.js\";\nimport { BufferObject as r } from \"./BufferObject.js\";\nimport { TargetType as t, DepthStencilTargetType as o, TextureType as i, TextureWrapMode as n, PixelFormat as a, PixelType as s, TextureSamplingMode as p, Usage as m, DataType as c, PrimitiveType as d } from \"./enums.js\";\nimport { FramebufferObject as u } from \"./FramebufferObject.js\";\nimport { Texture as g } from \"./Texture.js\";\nimport { VertexArrayObject as l } from \"./VertexArrayObject.js\";\nimport { VertexElementDescriptor as f } from \"./VertexElementDescriptor.js\";\nconst w = e.getLogger(\"esri.views.WebGLDriverTest\");\n\nfunction h(e) {\n  const h = new u(e, {\n    colorTarget: t.TEXTURE,\n    depthStencilTarget: o.NONE\n  }, {\n    target: i.TEXTURE_2D,\n    wrapMode: n.CLAMP_TO_EDGE,\n    pixelFormat: a.RGBA,\n    dataType: s.UNSIGNED_BYTE,\n    samplingMode: p.NEAREST,\n    width: 1,\n    height: 1\n  }),\n        T = \"\\nprecision highp float;\\nattribute vec2 a_pos;\\nuniform highp sampler2D u_texture;\\nvarying vec4 v_color;\\n\\nfloat getBit(in float bitset, in int bitIndex) {\\n  float offset = pow(2.0, float(bitIndex));\\n  return mod(floor(bitset / offset), 2.0);\\n}\\n\\nvoid main() {\\n  vec4 value = texture2D(u_texture, vec2(0.0));\\n  float bit = getBit(value.x * 255.0, 1);\\n\\n  v_color = bit * vec4(1.0);\\n  gl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\\n}\\n\",\n        _ = \"\\nprecision highp float;\\nvarying vec4 v_color;\\n\\nvoid main() {\\n  gl_FragColor = v_color;\\n}\\n\",\n        v = new Uint8Array(4),\n        b = r.createVertex(e, m.STATIC_DRAW, new Uint16Array([0, 0, 1, 0, 0, 1, 1, 1])),\n        E = new l(e, new Map([[\"a_position\", 0]]), {\n    geometry: [new f(\"a_position\", 2, c.SHORT, 0, 4)]\n  }, {\n    geometry: b\n  }),\n        A = e.programCache.acquire(T, _, new Map([[\"a_pos\", 0]]));\n  e.useProgram(A);\n  const x = new g(e, {\n    target: i.TEXTURE_2D,\n    wrapMode: n.CLAMP_TO_EDGE,\n    pixelFormat: a.RGBA,\n    dataType: s.UNSIGNED_BYTE,\n    samplingMode: p.NEAREST,\n    width: 1,\n    height: 1\n  }, new Uint8Array([2, 255, 0, 0]));\n  A.setUniform1i(\"u_texture\", 0), e.bindTexture(x, 0);\n  const y = e.getBoundFramebufferObject();\n  e.bindFramebuffer(h), e.useProgram(A);\n  const {\n    x: D,\n    y: R,\n    width: j,\n    height: N\n  } = e.getViewport();\n  e.setViewport(0, 0, 1, 1), e.bindVAO(E), e.drawArrays(d.TRIANGLE_STRIP, 0, 4), e.setViewport(D, R, j, N), h.readPixels(0, 0, 1, 1, a.RGBA, s.UNSIGNED_BYTE, v), A.dispose(), E.dispose(!1), b.dispose(), h.dispose();\n  const B = 255 !== v[0] || 255 !== v[1] || 255 !== v[2] || 255 !== v[3];\n  return B && w.warn(`A problem was detected with your graphics driver. Your driver does not appear to honor sampler precision specifiers, which may result in rendering issues due to numerical instability. We recommend ensuring that your drivers have been updated to the latest version. Applying lowp sampler workaround. [${v[0]}.${v[1]}.${v[2]}.${v[3]}]`), e.bindFramebuffer(y), B;\n}\n\nexport { h as testSamplerPrecision };","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/gis/node_modules/@arcgis/core/views/webgl/testSamplerPrecision.js"],"names":["e","BufferObject","r","TargetType","t","DepthStencilTargetType","o","TextureType","i","TextureWrapMode","n","PixelFormat","a","PixelType","s","TextureSamplingMode","p","Usage","m","DataType","c","PrimitiveType","d","FramebufferObject","u","Texture","g","VertexArrayObject","l","VertexElementDescriptor","f","w","getLogger","h","colorTarget","TEXTURE","depthStencilTarget","NONE","target","TEXTURE_2D","wrapMode","CLAMP_TO_EDGE","pixelFormat","RGBA","dataType","UNSIGNED_BYTE","samplingMode","NEAREST","width","height","T","_","v","Uint8Array","b","createVertex","STATIC_DRAW","Uint16Array","E","Map","geometry","SHORT","A","programCache","acquire","useProgram","x","setUniform1i","bindTexture","y","getBoundFramebufferObject","bindFramebuffer","D","R","j","N","getViewport","setViewport","bindVAO","drawArrays","TRIANGLE_STRIP","readPixels","dispose","B","warn","testSamplerPrecision"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport e from\"../../core/Logger.js\";import{BufferObject as r}from\"./BufferObject.js\";import{TargetType as t,DepthStencilTargetType as o,TextureType as i,TextureWrapMode as n,PixelFormat as a,PixelType as s,TextureSamplingMode as p,Usage as m,DataType as c,PrimitiveType as d}from\"./enums.js\";import{FramebufferObject as u}from\"./FramebufferObject.js\";import{Texture as g}from\"./Texture.js\";import{VertexArrayObject as l}from\"./VertexArrayObject.js\";import{VertexElementDescriptor as f}from\"./VertexElementDescriptor.js\";const w=e.getLogger(\"esri.views.WebGLDriverTest\");function h(e){const h=new u(e,{colorTarget:t.TEXTURE,depthStencilTarget:o.NONE},{target:i.TEXTURE_2D,wrapMode:n.CLAMP_TO_EDGE,pixelFormat:a.RGBA,dataType:s.UNSIGNED_BYTE,samplingMode:p.NEAREST,width:1,height:1}),T=\"\\nprecision highp float;\\nattribute vec2 a_pos;\\nuniform highp sampler2D u_texture;\\nvarying vec4 v_color;\\n\\nfloat getBit(in float bitset, in int bitIndex) {\\n  float offset = pow(2.0, float(bitIndex));\\n  return mod(floor(bitset / offset), 2.0);\\n}\\n\\nvoid main() {\\n  vec4 value = texture2D(u_texture, vec2(0.0));\\n  float bit = getBit(value.x * 255.0, 1);\\n\\n  v_color = bit * vec4(1.0);\\n  gl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\\n}\\n\",_=\"\\nprecision highp float;\\nvarying vec4 v_color;\\n\\nvoid main() {\\n  gl_FragColor = v_color;\\n}\\n\",v=new Uint8Array(4),b=r.createVertex(e,m.STATIC_DRAW,new Uint16Array([0,0,1,0,0,1,1,1])),E=new l(e,new Map([[\"a_position\",0]]),{geometry:[new f(\"a_position\",2,c.SHORT,0,4)]},{geometry:b}),A=e.programCache.acquire(T,_,new Map([[\"a_pos\",0]]));e.useProgram(A);const x=new g(e,{target:i.TEXTURE_2D,wrapMode:n.CLAMP_TO_EDGE,pixelFormat:a.RGBA,dataType:s.UNSIGNED_BYTE,samplingMode:p.NEAREST,width:1,height:1},new Uint8Array([2,255,0,0]));A.setUniform1i(\"u_texture\",0),e.bindTexture(x,0);const y=e.getBoundFramebufferObject();e.bindFramebuffer(h),e.useProgram(A);const{x:D,y:R,width:j,height:N}=e.getViewport();e.setViewport(0,0,1,1),e.bindVAO(E),e.drawArrays(d.TRIANGLE_STRIP,0,4),e.setViewport(D,R,j,N),h.readPixels(0,0,1,1,a.RGBA,s.UNSIGNED_BYTE,v),A.dispose(),E.dispose(!1),b.dispose(),h.dispose();const B=255!==v[0]||255!==v[1]||255!==v[2]||255!==v[3];return B&&w.warn(`A problem was detected with your graphics driver. Your driver does not appear to honor sampler precision specifiers, which may result in rendering issues due to numerical instability. We recommend ensuring that your drivers have been updated to the latest version. Applying lowp sampler workaround. [${v[0]}.${v[1]}.${v[2]}.${v[3]}]`),e.bindFramebuffer(y),B}export{h as testSamplerPrecision};\n"]},"metadata":{},"sourceType":"module"}