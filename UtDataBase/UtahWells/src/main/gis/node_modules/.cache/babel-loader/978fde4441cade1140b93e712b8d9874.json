{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nvar t;\n!function (t) {\n  t[t.JSON = 1313821514] = \"JSON\", t[t.BIN = 5130562] = \"BIN\";\n}(t || (t = {}));\n\nclass e {\n  constructor(i, r) {\n    if (!i) throw new Error(\"GLB requires a JSON gltf chunk\");\n    this.length = e.HEADER_SIZE, this.length += e.CHUNK_HEADER_SIZE;\n\n    const n = this._textToArrayBuffer(i);\n\n    if (this.length += this._alignTo(n.byteLength, 4), r && (this.length += e.CHUNK_HEADER_SIZE, this.length += r.byteLength, r.byteLength % 4)) throw new Error(\"Expected BIN chunk length to be divisible by 4 at this point\");\n    this.buffer = new ArrayBuffer(this.length), this.outView = new DataView(this.buffer), this._writeHeader();\n\n    const h = this._writeChunk(n, 12, t.JSON, 32);\n\n    r && this._writeChunk(r, h, t.BIN);\n  }\n\n  _writeHeader() {\n    this.outView.setUint32(0, e.MAGIC, !0), this.outView.setUint32(4, e.VERSION, !0), this.outView.setUint32(8, this.length, !0);\n  }\n\n  _writeChunk(t, e, i) {\n    let r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    const n = this._alignTo(t.byteLength, 4);\n\n    for (this.outView.setUint32(e, n, !0), this.outView.setUint32(e += 4, i, !0), this._writeArrayBuffer(this.outView.buffer, t, e += 4, 0, t.byteLength), e += t.byteLength; e % 4;) r && this.outView.setUint8(e, r), e++;\n\n    return e;\n  }\n\n  _writeArrayBuffer(t, e, i, r, n) {\n    new Uint8Array(t, i, n).set(new Uint8Array(e, r, n), 0);\n  }\n\n  _textToArrayBuffer(t) {\n    return new TextEncoder().encode(t).buffer;\n  }\n\n  _alignTo(t, e) {\n    return e * Math.ceil(t / e);\n  }\n\n}\n\ne.HEADER_SIZE = 12, e.CHUNK_HEADER_SIZE = 8, e.MAGIC = 1179937895, e.VERSION = 2;\nexport { e as GLB };","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/gis/node_modules/@arcgis/core/geometry/support/meshUtils/exporters/gltf/glb.js"],"names":["t","JSON","BIN","e","constructor","i","r","Error","length","HEADER_SIZE","CHUNK_HEADER_SIZE","n","_textToArrayBuffer","_alignTo","byteLength","buffer","ArrayBuffer","outView","DataView","_writeHeader","h","_writeChunk","setUint32","MAGIC","VERSION","_writeArrayBuffer","setUint8","Uint8Array","set","TextEncoder","encode","Math","ceil","GLB"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,CAAJ;AAAM,CAAC,UAASA,CAAT,EAAW;AAACA,EAAAA,CAAC,CAACA,CAAC,CAACC,IAAF,GAAO,UAAR,CAAD,GAAqB,MAArB,EAA4BD,CAAC,CAACA,CAAC,CAACE,GAAF,GAAM,OAAP,CAAD,GAAiB,KAA7C;AAAmD,CAA/D,CAAgEF,CAAC,KAAGA,CAAC,GAAC,EAAL,CAAjE,CAAD;;AAA4E,MAAMG,CAAN,CAAO;AAACC,EAAAA,WAAW,CAACC,CAAD,EAAGC,CAAH,EAAK;AAAC,QAAG,CAACD,CAAJ,EAAM,MAAM,IAAIE,KAAJ,CAAU,gCAAV,CAAN;AAAkD,SAAKC,MAAL,GAAYL,CAAC,CAACM,WAAd,EAA0B,KAAKD,MAAL,IAAaL,CAAC,CAACO,iBAAzC;;AAA2D,UAAMC,CAAC,GAAC,KAAKC,kBAAL,CAAwBP,CAAxB,CAAR;;AAAmC,QAAG,KAAKG,MAAL,IAAa,KAAKK,QAAL,CAAcF,CAAC,CAACG,UAAhB,EAA2B,CAA3B,CAAb,EAA2CR,CAAC,KAAG,KAAKE,MAAL,IAAaL,CAAC,CAACO,iBAAf,EAAiC,KAAKF,MAAL,IAAaF,CAAC,CAACQ,UAAhD,EAA2DR,CAAC,CAACQ,UAAF,GAAa,CAA3E,CAA/C,EAA6H,MAAM,IAAIP,KAAJ,CAAU,8DAAV,CAAN;AAAgF,SAAKQ,MAAL,GAAY,IAAIC,WAAJ,CAAgB,KAAKR,MAArB,CAAZ,EAAyC,KAAKS,OAAL,GAAa,IAAIC,QAAJ,CAAa,KAAKH,MAAlB,CAAtD,EAAgF,KAAKI,YAAL,EAAhF;;AAAoG,UAAMC,CAAC,GAAC,KAAKC,WAAL,CAAiBV,CAAjB,EAAmB,EAAnB,EAAsBX,CAAC,CAACC,IAAxB,EAA6B,EAA7B,CAAR;;AAAyCK,IAAAA,CAAC,IAAE,KAAKe,WAAL,CAAiBf,CAAjB,EAAmBc,CAAnB,EAAqBpB,CAAC,CAACE,GAAvB,CAAH;AAA+B;;AAAAiB,EAAAA,YAAY,GAAE;AAAC,SAAKF,OAAL,CAAaK,SAAb,CAAuB,CAAvB,EAAyBnB,CAAC,CAACoB,KAA3B,EAAiC,CAAC,CAAlC,GAAqC,KAAKN,OAAL,CAAaK,SAAb,CAAuB,CAAvB,EAAyBnB,CAAC,CAACqB,OAA3B,EAAmC,CAAC,CAApC,CAArC,EAA4E,KAAKP,OAAL,CAAaK,SAAb,CAAuB,CAAvB,EAAyB,KAAKd,MAA9B,EAAqC,CAAC,CAAtC,CAA5E;AAAqH;;AAAAa,EAAAA,WAAW,CAACrB,CAAD,EAAGG,CAAH,EAAKE,CAAL,EAAW;AAAA,QAAJC,CAAI,uEAAF,CAAE;;AAAC,UAAMK,CAAC,GAAC,KAAKE,QAAL,CAAcb,CAAC,CAACc,UAAhB,EAA2B,CAA3B,CAAR;;AAAsC,SAAI,KAAKG,OAAL,CAAaK,SAAb,CAAuBnB,CAAvB,EAAyBQ,CAAzB,EAA2B,CAAC,CAA5B,GAA+B,KAAKM,OAAL,CAAaK,SAAb,CAAuBnB,CAAC,IAAE,CAA1B,EAA4BE,CAA5B,EAA8B,CAAC,CAA/B,CAA/B,EAAiE,KAAKoB,iBAAL,CAAuB,KAAKR,OAAL,CAAaF,MAApC,EAA2Cf,CAA3C,EAA6CG,CAAC,IAAE,CAAhD,EAAkD,CAAlD,EAAoDH,CAAC,CAACc,UAAtD,CAAjE,EAAmIX,CAAC,IAAEH,CAAC,CAACc,UAA5I,EAAuJX,CAAC,GAAC,CAAzJ,GAA4JG,CAAC,IAAE,KAAKW,OAAL,CAAaS,QAAb,CAAsBvB,CAAtB,EAAwBG,CAAxB,CAAH,EAA8BH,CAAC,EAA/B;;AAAkC,WAAOA,CAAP;AAAS;;AAAAsB,EAAAA,iBAAiB,CAACzB,CAAD,EAAGG,CAAH,EAAKE,CAAL,EAAOC,CAAP,EAASK,CAAT,EAAW;AAAC,QAAIgB,UAAJ,CAAe3B,CAAf,EAAiBK,CAAjB,EAAmBM,CAAnB,EAAsBiB,GAAtB,CAA0B,IAAID,UAAJ,CAAexB,CAAf,EAAiBG,CAAjB,EAAmBK,CAAnB,CAA1B,EAAgD,CAAhD;AAAmD;;AAAAC,EAAAA,kBAAkB,CAACZ,CAAD,EAAG;AAAC,WAAO,IAAI6B,WAAJ,EAAD,CAAkBC,MAAlB,CAAyB9B,CAAzB,EAA4Be,MAAlC;AAAyC;;AAAAF,EAAAA,QAAQ,CAACb,CAAD,EAAGG,CAAH,EAAK;AAAC,WAAOA,CAAC,GAAC4B,IAAI,CAACC,IAAL,CAAUhC,CAAC,GAACG,CAAZ,CAAT;AAAwB;;AAA9lC;;AAA+lCA,CAAC,CAACM,WAAF,GAAc,EAAd,EAAiBN,CAAC,CAACO,iBAAF,GAAoB,CAArC,EAAuCP,CAAC,CAACoB,KAAF,GAAQ,UAA/C,EAA0DpB,CAAC,CAACqB,OAAF,GAAU,CAApE;AAAsE,SAAOrB,CAAC,IAAI8B,GAAZ","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nvar t;!function(t){t[t.JSON=1313821514]=\"JSON\",t[t.BIN=5130562]=\"BIN\"}(t||(t={}));class e{constructor(i,r){if(!i)throw new Error(\"GLB requires a JSON gltf chunk\");this.length=e.HEADER_SIZE,this.length+=e.CHUNK_HEADER_SIZE;const n=this._textToArrayBuffer(i);if(this.length+=this._alignTo(n.byteLength,4),r&&(this.length+=e.CHUNK_HEADER_SIZE,this.length+=r.byteLength,r.byteLength%4))throw new Error(\"Expected BIN chunk length to be divisible by 4 at this point\");this.buffer=new ArrayBuffer(this.length),this.outView=new DataView(this.buffer),this._writeHeader();const h=this._writeChunk(n,12,t.JSON,32);r&&this._writeChunk(r,h,t.BIN)}_writeHeader(){this.outView.setUint32(0,e.MAGIC,!0),this.outView.setUint32(4,e.VERSION,!0),this.outView.setUint32(8,this.length,!0)}_writeChunk(t,e,i,r=0){const n=this._alignTo(t.byteLength,4);for(this.outView.setUint32(e,n,!0),this.outView.setUint32(e+=4,i,!0),this._writeArrayBuffer(this.outView.buffer,t,e+=4,0,t.byteLength),e+=t.byteLength;e%4;)r&&this.outView.setUint8(e,r),e++;return e}_writeArrayBuffer(t,e,i,r,n){new Uint8Array(t,i,n).set(new Uint8Array(e,r,n),0)}_textToArrayBuffer(t){return(new TextEncoder).encode(t).buffer}_alignTo(t,e){return e*Math.ceil(t/e)}}e.HEADER_SIZE=12,e.CHUNK_HEADER_SIZE=8,e.MAGIC=1179937895,e.VERSION=2;export{e as GLB};\n"]},"metadata":{},"sourceType":"module"}