{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport { _ as e } from \"../../../chunks/tslib.es6.js\";\nimport \"../../../geometry.js\";\nimport t from \"../../../request.js\";\nimport r from \"../../../core/Error.js\";\nimport { JSONSupport as i } from \"../../../core/JSONSupport.js\";\nimport o from \"../../../core/Logger.js\";\nimport { isSome as n, isNone as s, unwrap as a } from \"../../../core/maybe.js\";\nimport { EsriPromiseMixin as l } from \"../../../core/Promise.js\";\nimport { onAbort as c } from \"../../../core/promiseUtils.js\";\nimport { property as f } from \"../../../core/accessorSupport/decorators/property.js\";\nimport \"../../../core/arrayUtils.js\";\nimport \"../../../core/has.js\";\nimport \"../../../core/accessorSupport/ensureType.js\";\nimport { subclass as u } from \"../../../core/accessorSupport/decorators/subclass.js\";\nimport { sanitizeUrl as h } from \"../arcgisLayerUrl.js\";\nimport { url as m } from \"../commonProperties.js\";\nimport d from \"../RasterStorageInfo.js\";\nimport p from \"../TileInfo.js\";\nimport { getRasterId as x, getBlock as g, putBlock as y, deleteBlock as I, decreaseRefCount as w } from \"./RawBlockCache.js\";\nimport { decode as R } from \"../rasterFormats/RasterCodec.js\";\nimport { mosaic as k, approximateTransform as v, getLocalArithmeticNorthRotations as b } from \"../rasterFunctions/pixelUtils.js\";\nimport { load as T, getWorldWidth as S, projectPoint as B, snapPyramid as M, snapExtent as C, getWorldWrapCount as P, projectExtent as W, getProjectionOffsetGrid as _, getRasterDatasetAlignmentInfo as H, projectResolution as j } from \"../rasterFunctions/rasterProjectionHelper.js\";\nimport { uvComponentToVector as D, convertToLocalDirections as F } from \"../rasterFunctions/vectorFieldUtils.js\";\nimport E from \"../../../geometry/Extent.js\";\nimport L from \"../../../geometry/Point.js\";\nconst A = 8;\nlet z = class extends l(i) {\n  constructor() {\n    super(...arguments), this.rasterJobHandler = null, this.datasetName = null, this.datasetFormat = null, this.rasterInfo = null, this.ioConfig = {\n      sampling: \"closest\"\n    };\n  }\n\n  async init() {\n    const e = T();\n    this.addResolvingPromise(e), await this.when();\n  }\n\n  normalizeCtorArgs(e) {\n    return e && e.ioConfig && (e = { ...e,\n      ioConfig: {\n        resolution: null,\n        bandIds: null,\n        sampling: \"closest\",\n        tileInfo: p.create(),\n        ...e.ioConfig\n      }\n    }), e;\n  }\n\n  get _isGlobalWrappableSource() {\n    const {\n      rasterInfo: e\n    } = this,\n          t = S(e.spatialReference);\n    return n(t) && e.extent.width >= t / 2;\n  }\n\n  set url(e) {\n    this._set(\"url\", h(e, o.getLogger(this.declaredClass)));\n  }\n\n  async open(e) {\n    throw new r(\"BaseRaster:open-not-implemented\", \"open() is not implemented\");\n  }\n\n  async fetchTile(e, t, r) {\n    let i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const o = i.tileInfo || this.rasterInfo.storageInfo.tileInfo,\n          n = this.getTileExtentFromTileInfo(e, t, r, o);\n    return this.fetchPixels(n, o.size[0], o.size[1], i);\n  }\n\n  async identify(e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    t = this._getRequestOptionsWithSliceId(t);\n    const {\n      spatialReference: r,\n      extent: i\n    } = this.rasterInfo,\n          {\n      datumTransformation: o\n    } = t;\n    let a = B(e, r, o);\n    if (!i.intersects(a)) return {\n      location: a,\n      value: null\n    };\n\n    if (n(this.rasterInfo.transform)) {\n      const e = this.rasterInfo.transform.inverseTransform(a);\n      if (!this.rasterInfo.nativeExtent.intersects(e)) return {\n        location: e,\n        value: null\n      };\n      a = e;\n    }\n\n    let l = 0;\n\n    if (t.srcResolution) {\n      l = M(t.srcResolution, this.rasterInfo, this.ioConfig.sampling).pyramidLevel;\n    } else if (l = await this.computeBestPyramidLevelForLocation(e, t), null == l) return {\n      location: a,\n      value: null\n    };\n\n    const c = this.identifyPixelLocation(a, l, null);\n    if (null === c) return {\n      location: a,\n      value: null\n    };\n    const {\n      row: f,\n      col: u,\n      rowOffset: h,\n      colOffset: m\n    } = c,\n          d = x(this.url, t.sliceId),\n          p = `${l}/${f}/${u}`;\n    let I = g(d, null, p);\n    s(I) && (I = this.fetchRawTile(l, f, u, t), y(d, null, p, I));\n    const w = await I;\n    if (s(w) || !w.pixels || 0 === w.pixels.length) return {\n      location: a,\n      value: null\n    };\n    const R = h * this.rasterInfo.storageInfo.blockHeight + m,\n          k = !w.mask || w.mask[R] ? w.pixels.map(e => e[R]) : null,\n          v = this.rasterInfo.dataType;\n\n    if ((\"vector-magdir\" === v || \"vector-uv\" === v) && (null == k ? void 0 : k.length) > 1) {\n      return {\n        location: a,\n        value: k,\n        magdirValue: \"vector-magdir\" === v ? [k[0], k[1]] : D([k[0], k[1]]),\n        pyramidLevel: l\n      };\n    }\n\n    return {\n      location: a,\n      value: k,\n      pyramidLevel: l\n    };\n  }\n\n  async fetchPixels(e, t, r) {\n    let i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    if (e = C(e), (i = this._getRequestOptionsWithSliceId(i)).requestRawData) return this._fetchPixels(e, t, r, i);\n    const o = S(e.spatialReference),\n          n = P(e);\n    if (s(o) || 0 === n || 1 === n && this._isGlobalWrappableSource) return this._fetchPixels(e, t, r, i);\n    if (n >= 3) return {\n      extent: e,\n      pixelBlock: null\n    };\n    const a = [],\n          {\n      xmin: l,\n      xmax: c\n    } = e,\n          f = Math.round(o / (c - l) * t),\n          u = f - Math.round((o / 2 - l) / (c - l) * t);\n    let h = 0;\n    const m = [];\n\n    for (let s = 0; s <= n; s++) {\n      const d = new E({\n        xmin: 0 === s ? l : -o / 2,\n        xmax: s === n ? c - o * s : o / 2,\n        ymin: e.ymin,\n        ymax: e.ymax,\n        spatialReference: e.spatialReference\n      }),\n            p = 0 === s ? f - u : s === n ? t - h : f;\n      h += p, m.push(p);\n      const x = i.disableWrapAround && s > 0 ? null : this._fetchPixels(d, p, r, i);\n      a.push(x);\n    }\n\n    const d = (await Promise.all(a)).map(e => null == e ? void 0 : e.pixelBlock);\n    let p = null;\n    const x = {\n      width: t,\n      height: r\n    };\n\n    if (this.rasterJobHandler) {\n      p = (await this.rasterJobHandler.mosaicAndTransform({\n        srcPixelBlocks: d,\n        srcMosaicSize: x,\n        destDimension: null,\n        coefs: null,\n        sampleSpacing: null,\n        interpolation: \"nearest\",\n        alignmentInfo: null,\n        blockWidths: m\n      }, i)).pixelBlock;\n    } else p = k(d, x, {\n      blockWidths: m\n    });\n\n    return {\n      extent: e,\n      srcExtent: W(e, this.rasterInfo.spatialReference, i.datumTransformation),\n      pixelBlock: p\n    };\n  }\n\n  async fetchRawPixels(e, t, r) {\n    let i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    t = {\n      x: Math.floor(t.x),\n      y: Math.floor(t.y)\n    };\n    const o = await this._fetchRawTiles(e, t, r, i),\n          {\n      nativeExtent: s,\n      nativePixelSize: a,\n      storageInfo: l\n    } = this.rasterInfo,\n          c = 2 ** e,\n          f = a.x * c,\n          u = a.y * c,\n          h = new E({\n      xmin: s.xmin + f * t.x,\n      xmax: s.xmin + f * (t.x + r.width - 1),\n      ymin: s.ymax - u * (t.y + r.height - 1),\n      ymax: s.ymax - u * t.y,\n      spatialReference: s.spatialReference\n    });\n    if (!o) return {\n      extent: h,\n      srcExtent: h,\n      pixelBlock: null\n    };\n    const {\n      pixelBlocks: m,\n      mosaicSize: d\n    } = o;\n    if (1 === m.length && n(m[0]) && m[0].width === r.width && m[0].height === r.height) return {\n      extent: h,\n      srcExtent: h,\n      pixelBlock: o.pixelBlocks[0]\n    };\n    const p = e > 0 ? l.pyramidBlockWidth : l.blockWidth,\n          x = e > 0 ? l.pyramidBlockHeight : l.blockHeight,\n          g = {\n      x: t.x % p,\n      y: t.y % x\n    };\n    let y;\n\n    if (this.rasterJobHandler) {\n      y = (await this.rasterJobHandler.mosaicAndTransform({\n        srcPixelBlocks: m,\n        srcMosaicSize: d,\n        destDimension: r,\n        clipOffset: g,\n        clipSize: r,\n        coefs: null,\n        sampleSpacing: null,\n        interpolation: i.interpolation,\n        alignmentInfo: null,\n        blockWidths: null\n      }, i)).pixelBlock;\n    } else y = k(m, d, {\n      clipOffset: g,\n      clipSize: r\n    });\n\n    return {\n      extent: h,\n      srcExtent: h,\n      pixelBlock: y\n    };\n  }\n\n  fetchRawTile(e, t, i, o) {\n    throw new r(\"BaseRaster:read-not-implemented\", \"fetchRawTile() is not implemented\");\n  }\n\n  computeExtent(e) {\n    return W(this.rasterInfo.extent, e);\n  }\n\n  decodePixelBlock(e, t) {\n    return !this.rasterJobHandler || t.useCanvas ? R(e, t) : this.rasterJobHandler.decode({\n      data: e,\n      options: t\n    });\n  }\n\n  async request(e, r, i) {\n    var o, n;\n    const {\n      customFetchParameters: s\n    } = this.ioConfig,\n          {\n      range: a,\n      query: l,\n      headers: c\n    } = r;\n    i = null != (o = null != (n = i) ? n : r.retryCount) ? o : this.ioConfig.retryCount;\n    const f = a ? {\n      Range: `bytes=${a.from}-${a.to}`\n    } : null;\n\n    try {\n      return await t(e, { ...r,\n        query: { ...l,\n          ...s\n        },\n        headers: { ...c,\n          ...f\n        }\n      });\n    } catch (u) {\n      if (i > 0) return i--, this.request(e, r, i);\n      throw u;\n    }\n  }\n\n  getSliceIndex(e) {\n    const {\n      multidimensionalInfo: t\n    } = this.rasterInfo;\n    if (!n(t)) return null;\n    if (!n(e) || 0 === e.length) return null;\n    let r = 0;\n    const i = e[0].variableName;\n\n    for (let o = 0; o < t.variables.length; o++) {\n      const n = t.variables[o],\n            s = n.dimensions;\n\n      if (n.name !== i) {\n        r += s.map(e => this._getDimensionValuesCount(e)).reduce((e, t) => e + t);\n        break;\n      }\n\n      const a = s.map(e => this._getDimensionValuesCount(e)),\n            l = s.length;\n\n      for (let t = 0; t < l; t++) {\n        const i = e.find(e => e.dimensionName === s[t].name);\n        if (null == i) return null;\n\n        const o = Array.isArray(i.values[0]) ? i.values[0][0] : i.values[0],\n              n = this._getIndexFromDimensions(o, s[t]);\n\n        if (-1 === n) return null;\n        a.shift(), r += t === l - 1 ? n : n * a.reduce((e, t) => e + t);\n      }\n    }\n\n    return r;\n  }\n\n  getTileExtentFromTileInfo(e, t, r, i) {\n    const o = i.lodAt(e);\n    return this.getTileExtent({\n      x: o.resolution,\n      y: o.resolution\n    }, t, r, i.origin, i.spatialReference, i.size);\n  }\n\n  updateTileInfo() {\n    const {\n      storageInfo: e,\n      spatialReference: t,\n      extent: r,\n      pixelSize: i\n    } = this.rasterInfo;\n\n    if (!e.tileInfo) {\n      const o = [],\n            n = e.maximumPyramidLevel || 0;\n      let s = Math.max(i.x, i.y),\n          a = 1 / .0254 * 96 * s;\n\n      for (let e = 0; e <= n; e++) o.push({\n        level: n - e,\n        resolution: s,\n        scale: a\n      }), s *= 2, a *= 2;\n\n      const l = new L({\n        x: r.xmin,\n        y: r.ymax,\n        spatialReference: t\n      });\n      e.tileInfo = new p({\n        origin: l,\n        size: [e.blockWidth, e.blockHeight],\n        spatialReference: t,\n        lods: o\n      }), e.isVirtualTileInfo = !0;\n    }\n  }\n\n  createRemoteDatasetStorageInfo(e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 512;\n    let r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 512;\n    let i = arguments.length > 3 ? arguments[3] : undefined;\n    const {\n      width: o,\n      height: n,\n      nativeExtent: s,\n      pixelSize: a,\n      spatialReference: l\n    } = e,\n          c = new L({\n      x: s.xmin,\n      y: s.ymax,\n      spatialReference: l\n    });\n    null == i && (i = Math.max(0, Math.round(Math.log(Math.max(o, n)) / Math.LN2 - 8)));\n    const f = this.computeBlockBoundary(s, 512, 512, {\n      x: s.xmin,\n      y: s.ymax\n    }, [a], i);\n    e.storageInfo = new d({\n      blockWidth: t,\n      blockHeight: r,\n      pyramidBlockWidth: t,\n      pyramidBlockHeight: r,\n      origin: c,\n      firstPyramidLevel: 1,\n      maximumPyramidLevel: i,\n      blockBoundary: f\n    });\n  }\n\n  async computeBestPyramidLevelForLocation(e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return 0;\n  }\n\n  computeBlockBoundary(e, t, r, i, o) {\n    let n = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let s = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 2;\n\n    if (1 === o.length && n > 0) {\n      o = [...o];\n      let {\n        x: e,\n        y: t\n      } = o[0];\n\n      for (let r = 0; r < n; r++) e *= s, t *= s, o.push({\n        x: e,\n        y: t\n      });\n    }\n\n    const a = [],\n          {\n      x: l,\n      y: c\n    } = i;\n\n    for (let f = 0; f < o.length; f++) {\n      const {\n        x: i,\n        y: n\n      } = o[f];\n      a.push({\n        minCol: Math.floor((e.xmin - l + .1 * i) / t / i),\n        maxCol: Math.floor((e.xmax - l - .1 * i) / t / i),\n        minRow: Math.floor((c - e.ymax + .1 * n) / r / n),\n        maxRow: Math.floor((c - e.ymin - .1 * n) / r / n)\n      });\n    }\n\n    return a;\n  }\n\n  getPyramidPixelSize(e) {\n    const {\n      nativePixelSize: t\n    } = this.rasterInfo,\n          {\n      pyramidResolutions: r,\n      pyramidScalingFactor: i\n    } = this.rasterInfo.storageInfo;\n    if (0 === e) return t;\n    if (n(r) && r.length) return r[e - 1];\n    const o = i ** e;\n    return {\n      x: t.x * o,\n      y: t.y * o\n    };\n  }\n\n  identifyPixelLocation(e, t, r) {\n    const {\n      spatialReference: i,\n      nativeExtent: o\n    } = this.rasterInfo,\n          {\n      blockWidth: n,\n      blockHeight: s,\n      maximumPyramidLevel: a,\n      origin: l\n    } = this.rasterInfo.storageInfo,\n          c = B(e, i, r);\n    if (!o.intersects(c)) return null;\n    if (t < 0 || t > a) return null;\n    const f = this.getPyramidPixelSize(t),\n          {\n      x: u,\n      y: h\n    } = f,\n          m = (l.y - c.y) / h / s,\n          d = (c.x - l.x) / u / n,\n          p = Math.min(s - 1, Math.floor((m - Math.floor(m)) * s)),\n          x = Math.min(n - 1, Math.floor((d - Math.floor(d)) * n));\n    return {\n      pyramidLevel: t,\n      row: Math.floor(m),\n      col: Math.floor(d),\n      rowOffset: p,\n      colOffset: x,\n      srcLocation: c\n    };\n  }\n\n  getTileExtent(e, t, r, i, o, n) {\n    const [s, a] = n,\n          l = i.x + r * s * e.x,\n          c = l + s * e.x,\n          f = i.y - t * a * e.y,\n          u = f - a * e.y;\n    return new E({\n      xmin: l,\n      xmax: c,\n      ymin: u,\n      ymax: f,\n      spatialReference: o\n    });\n  }\n\n  getBlockWidthHeight(e) {\n    return {\n      blockWidth: e > 0 ? this.rasterInfo.storageInfo.pyramidBlockWidth : this.rasterInfo.storageInfo.blockWidth,\n      blockHeight: e > 0 ? this.rasterInfo.storageInfo.pyramidBlockHeight : this.rasterInfo.storageInfo.blockHeight\n    };\n  }\n\n  isBlockOutside(e, t, r) {\n    const i = this.rasterInfo.storageInfo.blockBoundary[e];\n    return !i || i.maxRow < t || i.maxCol < r || i.minRow > t || i.minCol > r;\n  }\n\n  async _fetchPixels(e, t, r) {\n    let i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let o = P(e);\n    if (o >= 2) return {\n      extent: e,\n      pixelBlock: null\n    };\n\n    const s = this._getSourceDataInfo(e, t, r, i),\n          {\n      pyramidLevel: l,\n      pyramidResolution: c,\n      srcResolution: f,\n      srcExtent: u,\n      srcWidth: h,\n      srcHeight: m\n    } = s;\n\n    if (0 === h || 0 === m) return {\n      extent: e,\n      srcExtent: u,\n      pixelBlock: null\n    };\n    const d = a(this.rasterInfo.transform),\n          p = \"gcs-shift\" === (null == d ? void 0 : d.type),\n          x = n(S(e.spatialReference));\n    !p && x || (o = P(s.srcExtent, p));\n    const g = this.rasterInfo.storageInfo,\n          y = {\n      x: Math.floor((u.xmin - g.origin.x) / c.x + .1),\n      y: Math.floor((g.origin.y - u.ymax) / c.y + .1)\n    },\n          I = await this._fetchRawTiles(l, y, {\n      width: h,\n      height: m,\n      wrapCount: o\n    }, i);\n    if (!I) return {\n      extent: e,\n      srcExtent: u,\n      pixelBlock: null\n    };\n    const w = l > 0 ? g.pyramidBlockWidth : g.blockWidth,\n          R = l > 0 ? g.pyramidBlockHeight : g.blockHeight,\n          B = w === h && R === m && y.x % w == 0 && y.y % R == 0,\n          M = new L({\n      x: (e.xmax - e.xmin) / t,\n      y: (e.ymax - e.ymin) / r,\n      spatialReference: e.spatialReference\n    }),\n          C = !e.spatialReference.equals(this.rasterInfo.spatialReference),\n          {\n      datumTransformation: W\n    } = i;\n    if (!C && B && 1 === I.pixelBlocks.length && w === t && R === r && f.x === M.x && f.y === M.y) return {\n      extent: e,\n      srcExtent: u,\n      pixelBlock: I.pixelBlocks[0]\n    };\n    const H = x && n(S(u.spatialReference)),\n          j = i.requestProjectedLocalDirections && this.rasterInfo.dataType.startsWith(\"vector\");\n    j && !this.rasterJobHandler && (await T());\n    const D = this.rasterJobHandler ? await this.rasterJobHandler.getProjectionOffsetGrid({\n      projectedExtent: e,\n      srcBufferExtent: I.extent,\n      pixelSize: M.toJSON(),\n      datumTransformation: W,\n      rasterTransform: d,\n      hasWrapAround: o > 0 || H,\n      isAdaptive: !1 !== this.ioConfig.optimizeProjectionAccuracy,\n      includeGCSGrid: j\n    }, i) : _({\n      projectedExtent: e,\n      srcBufferExtent: I.extent,\n      pixelSize: M,\n      datumTransformation: W,\n      rasterTransform: d,\n      hasWrapAround: o > 0 || H,\n      isAdaptive: !1,\n      includeGCSGrid: j\n    });\n    let E;\n    const A = !i.requestRawData,\n          z = {\n      rows: D.spacing[0],\n      cols: D.spacing[1]\n    },\n          O = a(this._getRasterTileAlignmentInfo(l, I.extent.xmin)),\n          {\n      pixelBlocks: U,\n      mosaicSize: G,\n      isPartiallyFilled: J\n    } = I;\n    let q = null;\n\n    if (this.rasterJobHandler) {\n      const e = await this.rasterJobHandler.mosaicAndTransform({\n        srcPixelBlocks: U,\n        srcMosaicSize: G,\n        destDimension: A ? {\n          width: t,\n          height: r\n        } : null,\n        coefs: A ? D.coefficients : null,\n        sampleSpacing: A ? z : null,\n        projectDirections: j,\n        gcsGrid: j ? D.gcsGrid : null,\n        isUV: \"vector-uv\" === this.rasterInfo.dataType,\n        interpolation: i.interpolation,\n        alignmentInfo: O,\n        blockWidths: null\n      }, i);\n      ({\n        pixelBlock: E,\n        localNorthDirections: q\n      } = e);\n    } else {\n      const e = k(U, G, {\n        alignmentInfo: O\n      });\n      E = A ? v(e, {\n        width: t,\n        height: r\n      }, D.coefficients, z, i.interpolation) : e, j && D.gcsGrid && (q = b({\n        width: t,\n        height: r\n      }, D.gcsGrid), E = F(E, this.rasterInfo.dataType, q));\n    }\n\n    return i.requestRawData || j ? {\n      srcExtent: u,\n      pixelBlock: E,\n      transformGrid: D,\n      localNorthDirections: q,\n      extent: e,\n      isPartiallyFilled: J\n    } : {\n      srcExtent: u,\n      extent: e,\n      pixelBlock: E\n    };\n  }\n\n  async _fetchRawTiles(e, t, r, i) {\n    const {\n      origin: o,\n      blockBoundary: s\n    } = this.rasterInfo.storageInfo,\n          {\n      blockWidth: a,\n      blockHeight: l\n    } = this.getBlockWidthHeight(e);\n    let {\n      x: c,\n      y: f\n    } = t,\n        {\n      width: u,\n      height: h,\n      wrapCount: m\n    } = r;\n\n    const d = this._getRasterTileAlignmentInfo(e, 0);\n\n    i.buffer && (c -= i.buffer.cols, f -= i.buffer.rows, u += 2 * i.buffer.cols, h += 2 * i.buffer.rows);\n    let p = 0,\n        x = 0,\n        g = 0;\n\n    if (m && n(d)) {\n      ({\n        worldColumnCountFromOrigin: x,\n        originColumnOffset: g,\n        rightPadding: p\n      } = d);\n      x * d.blockWidth - p >= c + u && (p = 0);\n    }\n\n    const y = Math.floor(c / a),\n          I = Math.floor(f / l),\n          w = Math.floor((c + u + p - 1) / a),\n          R = Math.floor((f + h + p - 1) / l),\n          k = s[e];\n    if (!k) return null;\n    const {\n      minRow: v,\n      minCol: b,\n      maxCol: T,\n      maxRow: S\n    } = k;\n    if (0 === m && (R < v || w < b || I > S || y > T)) return null;\n    const B = new Array();\n    let M = !1;\n    const C = null == this.ioConfig.allowPartialFill ? i.allowPartialFill : this.ioConfig.allowPartialFill;\n\n    for (let F = I; F <= R; F++) for (let t = y; t <= w; t++) {\n      let r = t;\n\n      if (!i.disableWrapAround && m && n(d) && x <= t && (r = t - x - g), F >= v && r >= b && S >= F && T >= r) {\n        const t = this._fetchRawTile(e, F, r, i);\n\n        C ? B.push(new Promise(e => {\n          t.then(t => e(t)).catch(() => {\n            M = !0, e(null);\n          });\n        })) : B.push(t);\n      } else B.push(null);\n    }\n\n    if (0 === B.length) return null;\n    const P = await Promise.all(B),\n          W = {\n      height: (R - I + 1) * l,\n      width: (w - y + 1) * a\n    },\n          {\n      spatialReference: _\n    } = this.rasterInfo,\n          H = this.getPyramidPixelSize(e),\n          {\n      x: j,\n      y: D\n    } = H;\n    return {\n      extent: new E({\n        xmin: o.x + y * a * j,\n        xmax: o.x + (w + 1) * a * j,\n        ymin: o.y - (R + 1) * l * D,\n        ymax: o.y - I * l * D,\n        spatialReference: _\n      }),\n      pixelBlocks: P,\n      mosaicSize: W,\n      isPartiallyFilled: M\n    };\n  }\n\n  _fetchRawTile(e, t, r, i) {\n    const o = this.rasterInfo.storageInfo.blockBoundary[e];\n    if (!o) return Promise.resolve(null);\n    const {\n      minRow: n,\n      minCol: a,\n      maxCol: l,\n      maxRow: f\n    } = o;\n    if (t < n || r < a || t > f || r > l) return Promise.resolve(null);\n    const u = x(this.url, i.sliceId),\n          h = `${e}/${t}/${r}`;\n    let m = g(u, i.registryId, h);\n\n    if (s(m)) {\n      const o = new AbortController();\n      m = this.fetchRawTile(e, t, r, { ...i,\n        signal: o.signal\n      }), y(u, i.registryId, h, m, o), m.catch(() => I(u, i.registryId, h));\n    }\n\n    return i.signal && c(i, () => {\n      w(u, i.registryId, h);\n    }), m;\n  }\n\n  _getIndexFromDimensions(e, t) {\n    const {\n      extent: r,\n      interval: i,\n      unit: o,\n      values: n\n    } = t;\n    if (null != n && n.length) return Array.isArray(n[0]) ? n.findIndex(t => t[0] <= e && t[1] >= e) : n.indexOf(e);\n    if (e > r[1]) return -1;\n    const s = r[0];\n    let a = -1;\n\n    if (\"ISO8601\" === o) {\n      var l;\n\n      switch ((null == (l = t.intervalUnit) ? void 0 : l.toLowerCase()) || \"seconds\") {\n        case \"seconds\":\n          a = Math.round((e - s) / 1e3 / i);\n          break;\n\n        case \"minutes\":\n          a = Math.round((e - s) / 6e4 / i);\n          break;\n\n        case \"hours\":\n          a = Math.round((e - s) / 36e5 / i);\n          break;\n\n        case \"days\":\n          a = Math.round((e - s) / 864e5 / i);\n          break;\n\n        case \"years\":\n          a = Math.round((new Date(e).getUTCFullYear() - new Date(s).getUTCFullYear()) / i);\n          break;\n\n        case \"decades\":\n          a = Math.round((new Date(e).getUTCFullYear() - new Date(s).getUTCFullYear()) / 10 / i);\n      }\n\n      return a;\n    }\n\n    return Math.round((e - s) / i);\n  }\n\n  _getDimensionValuesCount(e) {\n    const {\n      extent: t,\n      interval: r,\n      unit: i,\n      values: o\n    } = e;\n    let n = (null == o ? void 0 : o.length) || 0;\n    if (n) return n;\n    const s = t[0];\n\n    if (0 === n && \"ISO8601\" === i) {\n      var a;\n\n      switch ((null == (a = e.intervalUnit) ? void 0 : a.toLowerCase()) || \"seconds\") {\n        case \"seconds\":\n          n = Math.round((t[1] - t[0]) / 1e3 / r);\n          break;\n\n        case \"minutes\":\n          n = Math.round((t[1] - t[0]) / 6e4 / r);\n          break;\n\n        case \"hours\":\n          n = Math.round((t[1] - t[0]) / 36e5 / r);\n          break;\n\n        case \"days\":\n          n = Math.round((t[1] - t[0]) / 864e5 / r);\n          break;\n\n        case \"years\":\n          n = Math.round((new Date(t[1]).getUTCFullYear() - new Date(s).getUTCFullYear()) / r);\n          break;\n\n        case \"decades\":\n          n = Math.round((new Date(t[1]).getUTCFullYear() - new Date(s).getUTCFullYear()) / 10 / r);\n      }\n\n      return n;\n    }\n\n    return Math.round((t[1] - t[0]) / r);\n  }\n\n  _getRasterTileAlignmentInfo(e, t) {\n    return null == this._rasterTileAlighmentInfo && (this._rasterTileAlighmentInfo = H(this.rasterInfo)), n(this._rasterTileAlighmentInfo.pyramidsInfo) ? {\n      startX: t,\n      halfWorldWidth: this._rasterTileAlighmentInfo.halfWorldWidth,\n      hasGCSSShiftTransform: this._rasterTileAlighmentInfo.hasGCSSShiftTransform,\n      ...this._rasterTileAlighmentInfo.pyramidsInfo[e]\n    } : null;\n  }\n\n  _getSourceDataInfo(e, t, r) {\n    let i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const o = {\n      datumTransformation: i.datumTransformation,\n      pyramidLevel: 0,\n      pyramidResolution: null,\n      srcExtent: null,\n      srcHeight: 0,\n      srcResolution: null,\n      srcWidth: 0\n    };\n    i.srcResolution && (o.srcResolution = i.srcResolution, this._updateSourceDataInfo(e, o));\n    const n = this.rasterInfo.storageInfo.maximumPyramidLevel || 0,\n          {\n      srcWidth: s,\n      srcHeight: a,\n      pyramidLevel: l\n    } = o,\n          c = s / t,\n          f = a / r,\n          u = l < n && c * f >= 16;\n\n    if (u || l === n && (c > A || f > A) || 0 === s || 0 === a) {\n      const s = new L({\n        x: (e.xmax - e.xmin) / t,\n        y: (e.ymax - e.ymin) / r,\n        spatialReference: e.spatialReference\n      });\n      let a = j(s, this.rasterInfo.spatialReference, e, o.datumTransformation);\n      const h = !a || i.srcResolution && a.x + a.y < i.srcResolution.x + i.srcResolution.y;\n\n      if (u && i.srcResolution && h) {\n        const e = Math.round(Math.log(Math.max(c, f)) / Math.LN2) - 1;\n\n        if (n - l + 3 >= e) {\n          const t = 2 ** e;\n          a = {\n            x: i.srcResolution.x * t,\n            y: i.srcResolution.y * t\n          };\n        }\n      }\n\n      a && (o.srcResolution = a, this._updateSourceDataInfo(e, o));\n    }\n\n    return (o.srcWidth / t > A || o.srcHeight / r > A) && (o.srcWidth = 0, o.srcHeight = 0), o;\n  }\n\n  _updateSourceDataInfo(e, t) {\n    t.srcWidth = 0, t.srcHeight = 0;\n    const r = this.rasterInfo.spatialReference,\n          {\n      srcResolution: i,\n      datumTransformation: o\n    } = t,\n          {\n      pyramidLevel: n,\n      pyramidResolution: s,\n      excessiveReading: l\n    } = M(i, this.rasterInfo, this.ioConfig.sampling);\n    if (l) return;\n    let c = t.srcExtent || W(e, r, o);\n    if (null == c) return;\n    const f = a(this.rasterInfo.transform);\n    f && (c = f.inverseTransform(c)), t.srcExtent = c;\n    const u = Math.ceil((c.xmax - c.xmin) / s.x - .1),\n          h = Math.ceil((c.ymax - c.ymin) / s.y - .1);\n    t.pyramidLevel = n, t.pyramidResolution = s, t.srcWidth = u, t.srcHeight = h;\n  }\n\n  _getRequestOptionsWithSliceId(e) {\n    return n(this.rasterInfo.multidimensionalInfo) && null == e.sliceId && (e = { ...e,\n      sliceId: this.getSliceIndex(e.multidimensionalDefinition)\n    }), e;\n  }\n\n};\ne([f()], z.prototype, \"_rasterTileAlighmentInfo\", void 0), e([f({\n  readOnly: !0\n})], z.prototype, \"_isGlobalWrappableSource\", null), e([f(m)], z.prototype, \"url\", null), e([f({\n  type: String,\n  json: {\n    write: !0\n  }\n})], z.prototype, \"datasetName\", void 0), e([f({\n  type: String,\n  json: {\n    write: !0\n  }\n})], z.prototype, \"datasetFormat\", void 0), e([f()], z.prototype, \"rasterInfo\", void 0), e([f()], z.prototype, \"ioConfig\", void 0), e([f()], z.prototype, \"sourceJSON\", void 0), z = e([u(\"esri.layers.support.rasterDatasets.BaseRaster\")], z);\nconst O = z;\nexport { O as default };","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/gis/node_modules/@arcgis/core/layers/support/rasterDatasets/BaseRaster.js"],"names":["_","e","t","r","JSONSupport","i","o","isSome","n","isNone","s","unwrap","a","EsriPromiseMixin","l","onAbort","c","property","f","subclass","u","sanitizeUrl","h","url","m","d","p","getRasterId","x","getBlock","g","putBlock","y","deleteBlock","I","decreaseRefCount","w","decode","R","mosaic","k","approximateTransform","v","getLocalArithmeticNorthRotations","b","load","T","getWorldWidth","S","projectPoint","B","snapPyramid","M","snapExtent","C","getWorldWrapCount","P","projectExtent","W","getProjectionOffsetGrid","getRasterDatasetAlignmentInfo","H","projectResolution","j","uvComponentToVector","D","convertToLocalDirections","F","E","L","A","z","constructor","arguments","rasterJobHandler","datasetName","datasetFormat","rasterInfo","ioConfig","sampling","init","addResolvingPromise","when","normalizeCtorArgs","resolution","bandIds","tileInfo","create","_isGlobalWrappableSource","spatialReference","extent","width","_set","getLogger","declaredClass","open","fetchTile","storageInfo","getTileExtentFromTileInfo","fetchPixels","size","identify","_getRequestOptionsWithSliceId","datumTransformation","intersects","location","value","transform","inverseTransform","nativeExtent","srcResolution","pyramidLevel","computeBestPyramidLevelForLocation","identifyPixelLocation","row","col","rowOffset","colOffset","sliceId","fetchRawTile","pixels","length","blockHeight","mask","map","dataType","magdirValue","requestRawData","_fetchPixels","pixelBlock","xmin","xmax","Math","round","ymin","ymax","push","disableWrapAround","Promise","all","height","mosaicAndTransform","srcPixelBlocks","srcMosaicSize","destDimension","coefs","sampleSpacing","interpolation","alignmentInfo","blockWidths","srcExtent","fetchRawPixels","floor","_fetchRawTiles","nativePixelSize","pixelBlocks","mosaicSize","pyramidBlockWidth","blockWidth","pyramidBlockHeight","clipOffset","clipSize","computeExtent","decodePixelBlock","useCanvas","data","options","request","customFetchParameters","range","query","headers","retryCount","Range","from","to","getSliceIndex","multidimensionalInfo","variableName","variables","dimensions","name","_getDimensionValuesCount","reduce","find","dimensionName","Array","isArray","values","_getIndexFromDimensions","shift","lodAt","getTileExtent","origin","updateTileInfo","pixelSize","maximumPyramidLevel","max","level","scale","lods","isVirtualTileInfo","createRemoteDatasetStorageInfo","log","LN2","computeBlockBoundary","firstPyramidLevel","blockBoundary","minCol","maxCol","minRow","maxRow","getPyramidPixelSize","pyramidResolutions","pyramidScalingFactor","min","srcLocation","getBlockWidthHeight","isBlockOutside","_getSourceDataInfo","pyramidResolution","srcWidth","srcHeight","type","wrapCount","equals","requestProjectedLocalDirections","startsWith","projectedExtent","srcBufferExtent","toJSON","rasterTransform","hasWrapAround","isAdaptive","optimizeProjectionAccuracy","includeGCSGrid","rows","spacing","cols","O","_getRasterTileAlignmentInfo","U","G","isPartiallyFilled","J","q","coefficients","projectDirections","gcsGrid","isUV","localNorthDirections","transformGrid","buffer","worldColumnCountFromOrigin","originColumnOffset","rightPadding","allowPartialFill","_fetchRawTile","then","catch","resolve","registryId","AbortController","signal","interval","unit","findIndex","indexOf","intervalUnit","toLowerCase","Date","getUTCFullYear","_rasterTileAlighmentInfo","pyramidsInfo","startX","halfWorldWidth","hasGCSSShiftTransform","_updateSourceDataInfo","excessiveReading","ceil","multidimensionalDefinition","prototype","readOnly","String","json","write","default"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport{_ as e}from\"../../../chunks/tslib.es6.js\";import\"../../../geometry.js\";import t from\"../../../request.js\";import r from\"../../../core/Error.js\";import{JSONSupport as i}from\"../../../core/JSONSupport.js\";import o from\"../../../core/Logger.js\";import{isSome as n,isNone as s,unwrap as a}from\"../../../core/maybe.js\";import{EsriPromiseMixin as l}from\"../../../core/Promise.js\";import{onAbort as c}from\"../../../core/promiseUtils.js\";import{property as f}from\"../../../core/accessorSupport/decorators/property.js\";import\"../../../core/arrayUtils.js\";import\"../../../core/has.js\";import\"../../../core/accessorSupport/ensureType.js\";import{subclass as u}from\"../../../core/accessorSupport/decorators/subclass.js\";import{sanitizeUrl as h}from\"../arcgisLayerUrl.js\";import{url as m}from\"../commonProperties.js\";import d from\"../RasterStorageInfo.js\";import p from\"../TileInfo.js\";import{getRasterId as x,getBlock as g,putBlock as y,deleteBlock as I,decreaseRefCount as w}from\"./RawBlockCache.js\";import{decode as R}from\"../rasterFormats/RasterCodec.js\";import{mosaic as k,approximateTransform as v,getLocalArithmeticNorthRotations as b}from\"../rasterFunctions/pixelUtils.js\";import{load as T,getWorldWidth as S,projectPoint as B,snapPyramid as M,snapExtent as C,getWorldWrapCount as P,projectExtent as W,getProjectionOffsetGrid as _,getRasterDatasetAlignmentInfo as H,projectResolution as j}from\"../rasterFunctions/rasterProjectionHelper.js\";import{uvComponentToVector as D,convertToLocalDirections as F}from\"../rasterFunctions/vectorFieldUtils.js\";import E from\"../../../geometry/Extent.js\";import L from\"../../../geometry/Point.js\";const A=8;let z=class extends(l(i)){constructor(){super(...arguments),this.rasterJobHandler=null,this.datasetName=null,this.datasetFormat=null,this.rasterInfo=null,this.ioConfig={sampling:\"closest\"}}async init(){const e=T();this.addResolvingPromise(e),await this.when()}normalizeCtorArgs(e){return e&&e.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:\"closest\",tileInfo:p.create(),...e.ioConfig}}),e}get _isGlobalWrappableSource(){const{rasterInfo:e}=this,t=S(e.spatialReference);return n(t)&&e.extent.width>=t/2}set url(e){this._set(\"url\",h(e,o.getLogger(this.declaredClass)))}async open(e){throw new r(\"BaseRaster:open-not-implemented\",\"open() is not implemented\")}async fetchTile(e,t,r,i={}){const o=i.tileInfo||this.rasterInfo.storageInfo.tileInfo,n=this.getTileExtentFromTileInfo(e,t,r,o);return this.fetchPixels(n,o.size[0],o.size[1],i)}async identify(e,t={}){t=this._getRequestOptionsWithSliceId(t);const{spatialReference:r,extent:i}=this.rasterInfo,{datumTransformation:o}=t;let a=B(e,r,o);if(!i.intersects(a))return{location:a,value:null};if(n(this.rasterInfo.transform)){const e=this.rasterInfo.transform.inverseTransform(a);if(!this.rasterInfo.nativeExtent.intersects(e))return{location:e,value:null};a=e}let l=0;if(t.srcResolution){l=M(t.srcResolution,this.rasterInfo,this.ioConfig.sampling).pyramidLevel}else if(l=await this.computeBestPyramidLevelForLocation(e,t),null==l)return{location:a,value:null};const c=this.identifyPixelLocation(a,l,null);if(null===c)return{location:a,value:null};const{row:f,col:u,rowOffset:h,colOffset:m}=c,d=x(this.url,t.sliceId),p=`${l}/${f}/${u}`;let I=g(d,null,p);s(I)&&(I=this.fetchRawTile(l,f,u,t),y(d,null,p,I));const w=await I;if(s(w)||!w.pixels||0===w.pixels.length)return{location:a,value:null};const R=h*this.rasterInfo.storageInfo.blockHeight+m,k=!w.mask||w.mask[R]?w.pixels.map((e=>e[R])):null,v=this.rasterInfo.dataType;if((\"vector-magdir\"===v||\"vector-uv\"===v)&&(null==k?void 0:k.length)>1){return{location:a,value:k,magdirValue:\"vector-magdir\"===v?[k[0],k[1]]:D([k[0],k[1]]),pyramidLevel:l}}return{location:a,value:k,pyramidLevel:l}}async fetchPixels(e,t,r,i={}){if(e=C(e),(i=this._getRequestOptionsWithSliceId(i)).requestRawData)return this._fetchPixels(e,t,r,i);const o=S(e.spatialReference),n=P(e);if(s(o)||0===n||1===n&&this._isGlobalWrappableSource)return this._fetchPixels(e,t,r,i);if(n>=3)return{extent:e,pixelBlock:null};const a=[],{xmin:l,xmax:c}=e,f=Math.round(o/(c-l)*t),u=f-Math.round((o/2-l)/(c-l)*t);let h=0;const m=[];for(let s=0;s<=n;s++){const d=new E({xmin:0===s?l:-o/2,xmax:s===n?c-o*s:o/2,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference}),p=0===s?f-u:s===n?t-h:f;h+=p,m.push(p);const x=i.disableWrapAround&&s>0?null:this._fetchPixels(d,p,r,i);a.push(x)}const d=(await Promise.all(a)).map((e=>null==e?void 0:e.pixelBlock));let p=null;const x={width:t,height:r};if(this.rasterJobHandler){p=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:d,srcMosaicSize:x,destDimension:null,coefs:null,sampleSpacing:null,interpolation:\"nearest\",alignmentInfo:null,blockWidths:m},i)).pixelBlock}else p=k(d,x,{blockWidths:m});return{extent:e,srcExtent:W(e,this.rasterInfo.spatialReference,i.datumTransformation),pixelBlock:p}}async fetchRawPixels(e,t,r,i={}){t={x:Math.floor(t.x),y:Math.floor(t.y)};const o=await this._fetchRawTiles(e,t,r,i),{nativeExtent:s,nativePixelSize:a,storageInfo:l}=this.rasterInfo,c=2**e,f=a.x*c,u=a.y*c,h=new E({xmin:s.xmin+f*t.x,xmax:s.xmin+f*(t.x+r.width-1),ymin:s.ymax-u*(t.y+r.height-1),ymax:s.ymax-u*t.y,spatialReference:s.spatialReference});if(!o)return{extent:h,srcExtent:h,pixelBlock:null};const{pixelBlocks:m,mosaicSize:d}=o;if(1===m.length&&n(m[0])&&m[0].width===r.width&&m[0].height===r.height)return{extent:h,srcExtent:h,pixelBlock:o.pixelBlocks[0]};const p=e>0?l.pyramidBlockWidth:l.blockWidth,x=e>0?l.pyramidBlockHeight:l.blockHeight,g={x:t.x%p,y:t.y%x};let y;if(this.rasterJobHandler){y=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:m,srcMosaicSize:d,destDimension:r,clipOffset:g,clipSize:r,coefs:null,sampleSpacing:null,interpolation:i.interpolation,alignmentInfo:null,blockWidths:null},i)).pixelBlock}else y=k(m,d,{clipOffset:g,clipSize:r});return{extent:h,srcExtent:h,pixelBlock:y}}fetchRawTile(e,t,i,o){throw new r(\"BaseRaster:read-not-implemented\",\"fetchRawTile() is not implemented\")}computeExtent(e){return W(this.rasterInfo.extent,e)}decodePixelBlock(e,t){return!this.rasterJobHandler||t.useCanvas?R(e,t):this.rasterJobHandler.decode({data:e,options:t})}async request(e,r,i){var o,n;const{customFetchParameters:s}=this.ioConfig,{range:a,query:l,headers:c}=r;i=null!=(o=null!=(n=i)?n:r.retryCount)?o:this.ioConfig.retryCount;const f=a?{Range:`bytes=${a.from}-${a.to}`}:null;try{return await t(e,{...r,query:{...l,...s},headers:{...c,...f}})}catch(u){if(i>0)return i--,this.request(e,r,i);throw u}}getSliceIndex(e){const{multidimensionalInfo:t}=this.rasterInfo;if(!n(t))return null;if(!n(e)||0===e.length)return null;let r=0;const i=e[0].variableName;for(let o=0;o<t.variables.length;o++){const n=t.variables[o],s=n.dimensions;if(n.name!==i){r+=s.map((e=>this._getDimensionValuesCount(e))).reduce(((e,t)=>e+t));break}const a=s.map((e=>this._getDimensionValuesCount(e))),l=s.length;for(let t=0;t<l;t++){const i=e.find((e=>e.dimensionName===s[t].name));if(null==i)return null;const o=Array.isArray(i.values[0])?i.values[0][0]:i.values[0],n=this._getIndexFromDimensions(o,s[t]);if(-1===n)return null;a.shift(),r+=t===l-1?n:n*a.reduce(((e,t)=>e+t))}}return r}getTileExtentFromTileInfo(e,t,r,i){const o=i.lodAt(e);return this.getTileExtent({x:o.resolution,y:o.resolution},t,r,i.origin,i.spatialReference,i.size)}updateTileInfo(){const{storageInfo:e,spatialReference:t,extent:r,pixelSize:i}=this.rasterInfo;if(!e.tileInfo){const o=[],n=e.maximumPyramidLevel||0;let s=Math.max(i.x,i.y),a=1/.0254*96*s;for(let e=0;e<=n;e++)o.push({level:n-e,resolution:s,scale:a}),s*=2,a*=2;const l=new L({x:r.xmin,y:r.ymax,spatialReference:t});e.tileInfo=new p({origin:l,size:[e.blockWidth,e.blockHeight],spatialReference:t,lods:o}),e.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(e,t=512,r=512,i){const{width:o,height:n,nativeExtent:s,pixelSize:a,spatialReference:l}=e,c=new L({x:s.xmin,y:s.ymax,spatialReference:l});null==i&&(i=Math.max(0,Math.round(Math.log(Math.max(o,n))/Math.LN2-8)));const f=this.computeBlockBoundary(s,512,512,{x:s.xmin,y:s.ymax},[a],i);e.storageInfo=new d({blockWidth:t,blockHeight:r,pyramidBlockWidth:t,pyramidBlockHeight:r,origin:c,firstPyramidLevel:1,maximumPyramidLevel:i,blockBoundary:f})}async computeBestPyramidLevelForLocation(e,t={}){return 0}computeBlockBoundary(e,t,r,i,o,n=0,s=2){if(1===o.length&&n>0){o=[...o];let{x:e,y:t}=o[0];for(let r=0;r<n;r++)e*=s,t*=s,o.push({x:e,y:t})}const a=[],{x:l,y:c}=i;for(let f=0;f<o.length;f++){const{x:i,y:n}=o[f];a.push({minCol:Math.floor((e.xmin-l+.1*i)/t/i),maxCol:Math.floor((e.xmax-l-.1*i)/t/i),minRow:Math.floor((c-e.ymax+.1*n)/r/n),maxRow:Math.floor((c-e.ymin-.1*n)/r/n)})}return a}getPyramidPixelSize(e){const{nativePixelSize:t}=this.rasterInfo,{pyramidResolutions:r,pyramidScalingFactor:i}=this.rasterInfo.storageInfo;if(0===e)return t;if(n(r)&&r.length)return r[e-1];const o=i**e;return{x:t.x*o,y:t.y*o}}identifyPixelLocation(e,t,r){const{spatialReference:i,nativeExtent:o}=this.rasterInfo,{blockWidth:n,blockHeight:s,maximumPyramidLevel:a,origin:l}=this.rasterInfo.storageInfo,c=B(e,i,r);if(!o.intersects(c))return null;if(t<0||t>a)return null;const f=this.getPyramidPixelSize(t),{x:u,y:h}=f,m=(l.y-c.y)/h/s,d=(c.x-l.x)/u/n,p=Math.min(s-1,Math.floor((m-Math.floor(m))*s)),x=Math.min(n-1,Math.floor((d-Math.floor(d))*n));return{pyramidLevel:t,row:Math.floor(m),col:Math.floor(d),rowOffset:p,colOffset:x,srcLocation:c}}getTileExtent(e,t,r,i,o,n){const[s,a]=n,l=i.x+r*s*e.x,c=l+s*e.x,f=i.y-t*a*e.y,u=f-a*e.y;return new E({xmin:l,xmax:c,ymin:u,ymax:f,spatialReference:o})}getBlockWidthHeight(e){return{blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,t,r){const i=this.rasterInfo.storageInfo.blockBoundary[e];return!i||i.maxRow<t||i.maxCol<r||i.minRow>t||i.minCol>r}async _fetchPixels(e,t,r,i={}){let o=P(e);if(o>=2)return{extent:e,pixelBlock:null};const s=this._getSourceDataInfo(e,t,r,i),{pyramidLevel:l,pyramidResolution:c,srcResolution:f,srcExtent:u,srcWidth:h,srcHeight:m}=s;if(0===h||0===m)return{extent:e,srcExtent:u,pixelBlock:null};const d=a(this.rasterInfo.transform),p=\"gcs-shift\"===(null==d?void 0:d.type),x=n(S(e.spatialReference));!p&&x||(o=P(s.srcExtent,p));const g=this.rasterInfo.storageInfo,y={x:Math.floor((u.xmin-g.origin.x)/c.x+.1),y:Math.floor((g.origin.y-u.ymax)/c.y+.1)},I=await this._fetchRawTiles(l,y,{width:h,height:m,wrapCount:o},i);if(!I)return{extent:e,srcExtent:u,pixelBlock:null};const w=l>0?g.pyramidBlockWidth:g.blockWidth,R=l>0?g.pyramidBlockHeight:g.blockHeight,B=w===h&&R===m&&y.x%w==0&&y.y%R==0,M=new L({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/r,spatialReference:e.spatialReference}),C=!e.spatialReference.equals(this.rasterInfo.spatialReference),{datumTransformation:W}=i;if(!C&&B&&1===I.pixelBlocks.length&&w===t&&R===r&&f.x===M.x&&f.y===M.y)return{extent:e,srcExtent:u,pixelBlock:I.pixelBlocks[0]};const H=x&&n(S(u.spatialReference)),j=i.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith(\"vector\");j&&!this.rasterJobHandler&&await T();const D=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:e,srcBufferExtent:I.extent,pixelSize:M.toJSON(),datumTransformation:W,rasterTransform:d,hasWrapAround:o>0||H,isAdaptive:!1!==this.ioConfig.optimizeProjectionAccuracy,includeGCSGrid:j},i):_({projectedExtent:e,srcBufferExtent:I.extent,pixelSize:M,datumTransformation:W,rasterTransform:d,hasWrapAround:o>0||H,isAdaptive:!1,includeGCSGrid:j});let E;const A=!i.requestRawData,z={rows:D.spacing[0],cols:D.spacing[1]},O=a(this._getRasterTileAlignmentInfo(l,I.extent.xmin)),{pixelBlocks:U,mosaicSize:G,isPartiallyFilled:J}=I;let q=null;if(this.rasterJobHandler){const e=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:U,srcMosaicSize:G,destDimension:A?{width:t,height:r}:null,coefs:A?D.coefficients:null,sampleSpacing:A?z:null,projectDirections:j,gcsGrid:j?D.gcsGrid:null,isUV:\"vector-uv\"===this.rasterInfo.dataType,interpolation:i.interpolation,alignmentInfo:O,blockWidths:null},i);({pixelBlock:E,localNorthDirections:q}=e)}else{const e=k(U,G,{alignmentInfo:O});E=A?v(e,{width:t,height:r},D.coefficients,z,i.interpolation):e,j&&D.gcsGrid&&(q=b({width:t,height:r},D.gcsGrid),E=F(E,this.rasterInfo.dataType,q))}return i.requestRawData||j?{srcExtent:u,pixelBlock:E,transformGrid:D,localNorthDirections:q,extent:e,isPartiallyFilled:J}:{srcExtent:u,extent:e,pixelBlock:E}}async _fetchRawTiles(e,t,r,i){const{origin:o,blockBoundary:s}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:l}=this.getBlockWidthHeight(e);let{x:c,y:f}=t,{width:u,height:h,wrapCount:m}=r;const d=this._getRasterTileAlignmentInfo(e,0);i.buffer&&(c-=i.buffer.cols,f-=i.buffer.rows,u+=2*i.buffer.cols,h+=2*i.buffer.rows);let p=0,x=0,g=0;if(m&&n(d)){({worldColumnCountFromOrigin:x,originColumnOffset:g,rightPadding:p}=d);x*d.blockWidth-p>=c+u&&(p=0)}const y=Math.floor(c/a),I=Math.floor(f/l),w=Math.floor((c+u+p-1)/a),R=Math.floor((f+h+p-1)/l),k=s[e];if(!k)return null;const{minRow:v,minCol:b,maxCol:T,maxRow:S}=k;if(0===m&&(R<v||w<b||I>S||y>T))return null;const B=new Array;let M=!1;const C=null==this.ioConfig.allowPartialFill?i.allowPartialFill:this.ioConfig.allowPartialFill;for(let F=I;F<=R;F++)for(let t=y;t<=w;t++){let r=t;if(!i.disableWrapAround&&m&&n(d)&&x<=t&&(r=t-x-g),F>=v&&r>=b&&S>=F&&T>=r){const t=this._fetchRawTile(e,F,r,i);C?B.push(new Promise((e=>{t.then((t=>e(t))).catch((()=>{M=!0,e(null)}))}))):B.push(t)}else B.push(null)}if(0===B.length)return null;const P=await Promise.all(B),W={height:(R-I+1)*l,width:(w-y+1)*a},{spatialReference:_}=this.rasterInfo,H=this.getPyramidPixelSize(e),{x:j,y:D}=H;return{extent:new E({xmin:o.x+y*a*j,xmax:o.x+(w+1)*a*j,ymin:o.y-(R+1)*l*D,ymax:o.y-I*l*D,spatialReference:_}),pixelBlocks:P,mosaicSize:W,isPartiallyFilled:M}}_fetchRawTile(e,t,r,i){const o=this.rasterInfo.storageInfo.blockBoundary[e];if(!o)return Promise.resolve(null);const{minRow:n,minCol:a,maxCol:l,maxRow:f}=o;if(t<n||r<a||t>f||r>l)return Promise.resolve(null);const u=x(this.url,i.sliceId),h=`${e}/${t}/${r}`;let m=g(u,i.registryId,h);if(s(m)){const o=new AbortController;m=this.fetchRawTile(e,t,r,{...i,signal:o.signal}),y(u,i.registryId,h,m,o),m.catch((()=>I(u,i.registryId,h)))}return i.signal&&c(i,(()=>{w(u,i.registryId,h)})),m}_getIndexFromDimensions(e,t){const{extent:r,interval:i,unit:o,values:n}=t;if(null!=n&&n.length)return Array.isArray(n[0])?n.findIndex((t=>t[0]<=e&&t[1]>=e)):n.indexOf(e);if(e>r[1])return-1;const s=r[0];let a=-1;if(\"ISO8601\"===o){var l;switch((null==(l=t.intervalUnit)?void 0:l.toLowerCase())||\"seconds\"){case\"seconds\":a=Math.round((e-s)/1e3/i);break;case\"minutes\":a=Math.round((e-s)/6e4/i);break;case\"hours\":a=Math.round((e-s)/36e5/i);break;case\"days\":a=Math.round((e-s)/864e5/i);break;case\"years\":a=Math.round((new Date(e).getUTCFullYear()-new Date(s).getUTCFullYear())/i);break;case\"decades\":a=Math.round((new Date(e).getUTCFullYear()-new Date(s).getUTCFullYear())/10/i)}return a}return Math.round((e-s)/i)}_getDimensionValuesCount(e){const{extent:t,interval:r,unit:i,values:o}=e;let n=(null==o?void 0:o.length)||0;if(n)return n;const s=t[0];if(0===n&&\"ISO8601\"===i){var a;switch((null==(a=e.intervalUnit)?void 0:a.toLowerCase())||\"seconds\"){case\"seconds\":n=Math.round((t[1]-t[0])/1e3/r);break;case\"minutes\":n=Math.round((t[1]-t[0])/6e4/r);break;case\"hours\":n=Math.round((t[1]-t[0])/36e5/r);break;case\"days\":n=Math.round((t[1]-t[0])/864e5/r);break;case\"years\":n=Math.round((new Date(t[1]).getUTCFullYear()-new Date(s).getUTCFullYear())/r);break;case\"decades\":n=Math.round((new Date(t[1]).getUTCFullYear()-new Date(s).getUTCFullYear())/10/r)}return n}return Math.round((t[1]-t[0])/r)}_getRasterTileAlignmentInfo(e,t){return null==this._rasterTileAlighmentInfo&&(this._rasterTileAlighmentInfo=H(this.rasterInfo)),n(this._rasterTileAlighmentInfo.pyramidsInfo)?{startX:t,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[e]}:null}_getSourceDataInfo(e,t,r,i={}){const o={datumTransformation:i.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0};i.srcResolution&&(o.srcResolution=i.srcResolution,this._updateSourceDataInfo(e,o));const n=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:s,srcHeight:a,pyramidLevel:l}=o,c=s/t,f=a/r,u=l<n&&c*f>=16;if(u||l===n&&(c>A||f>A)||(0===s||0===a)){const s=new L({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/r,spatialReference:e.spatialReference});let a=j(s,this.rasterInfo.spatialReference,e,o.datumTransformation);const h=!a||i.srcResolution&&a.x+a.y<i.srcResolution.x+i.srcResolution.y;if(u&&i.srcResolution&&h){const e=Math.round(Math.log(Math.max(c,f))/Math.LN2)-1;if(n-l+3>=e){const t=2**e;a={x:i.srcResolution.x*t,y:i.srcResolution.y*t}}}a&&(o.srcResolution=a,this._updateSourceDataInfo(e,o))}return(o.srcWidth/t>A||o.srcHeight/r>A)&&(o.srcWidth=0,o.srcHeight=0),o}_updateSourceDataInfo(e,t){t.srcWidth=0,t.srcHeight=0;const r=this.rasterInfo.spatialReference,{srcResolution:i,datumTransformation:o}=t,{pyramidLevel:n,pyramidResolution:s,excessiveReading:l}=M(i,this.rasterInfo,this.ioConfig.sampling);if(l)return;let c=t.srcExtent||W(e,r,o);if(null==c)return;const f=a(this.rasterInfo.transform);f&&(c=f.inverseTransform(c)),t.srcExtent=c;const u=Math.ceil((c.xmax-c.xmin)/s.x-.1),h=Math.ceil((c.ymax-c.ymin)/s.y-.1);t.pyramidLevel=n,t.pyramidResolution=s,t.srcWidth=u,t.srcHeight=h}_getRequestOptionsWithSliceId(e){return n(this.rasterInfo.multidimensionalInfo)&&null==e.sliceId&&(e={...e,sliceId:this.getSliceIndex(e.multidimensionalDefinition)}),e}};e([f()],z.prototype,\"_rasterTileAlighmentInfo\",void 0),e([f({readOnly:!0})],z.prototype,\"_isGlobalWrappableSource\",null),e([f(m)],z.prototype,\"url\",null),e([f({type:String,json:{write:!0}})],z.prototype,\"datasetName\",void 0),e([f({type:String,json:{write:!0}})],z.prototype,\"datasetFormat\",void 0),e([f()],z.prototype,\"rasterInfo\",void 0),e([f()],z.prototype,\"ioConfig\",void 0),e([f()],z.prototype,\"sourceJSON\",void 0),z=e([u(\"esri.layers.support.rasterDatasets.BaseRaster\")],z);const O=z;export{O as default};\n"]},"metadata":{},"sourceType":"module"}