{"ast":null,"code":"/*!\n* focus-trap 6.7.3\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\nimport { tabbable, focusable, isTabbable, isFocusable } from 'tabbable';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar activeFocusTraps = function () {\n  var trapQueue = [];\n  return {\n    activateTrap: function activateTrap(trap) {\n      if (trapQueue.length > 0) {\n        var activeTrap = trapQueue[trapQueue.length - 1];\n\n        if (activeTrap !== trap) {\n          activeTrap.pause();\n        }\n      }\n\n      var trapIndex = trapQueue.indexOf(trap);\n\n      if (trapIndex === -1) {\n        trapQueue.push(trap);\n      } else {\n        // move this existing trap to the front of the queue\n        trapQueue.splice(trapIndex, 1);\n        trapQueue.push(trap);\n      }\n    },\n    deactivateTrap: function deactivateTrap(trap) {\n      var trapIndex = trapQueue.indexOf(trap);\n\n      if (trapIndex !== -1) {\n        trapQueue.splice(trapIndex, 1);\n      }\n\n      if (trapQueue.length > 0) {\n        trapQueue[trapQueue.length - 1].unpause();\n      }\n    }\n  };\n}();\n\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\n\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nvar isTabEvent = function isTabEvent(e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n}; // Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\n\n\nvar findIndex = function findIndex(arr, fn) {\n  var idx = -1;\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n  return idx;\n};\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\n\n\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\n\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\n\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true\n  }, userOptions);\n\n  var state = {\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying the first and last tabbable nodes in all containers/groups in\n    //  the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n\n  var containersContain = function containersContain(element) {\n    return !!(element && state.containers.some(function (container) {\n      return container.contains(element);\n    }));\n  };\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n\n\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n\n      optionValue = optionValue.apply(void 0, params);\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      } // else, empty string (invalid), null (invalid), 0 (invalid)\n\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n      }\n    }\n\n    return node;\n  };\n\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus'); // false explicitly indicates we want no initialFocus at all\n\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (containersContain(doc.activeElement)) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode; // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n\n    return node;\n  };\n\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.tabbableGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container); // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n\n      var focusableNodes = focusable(container);\n\n      if (tabbableNodes.length > 0) {\n        return {\n          container: container,\n          firstTabbableNode: tabbableNodes[0],\n          lastTabbableNode: tabbableNodes[tabbableNodes.length - 1],\n\n          /**\n           * Finds the __tabbable__ node that follows the given node in the specified direction,\n           *  in this container, if any.\n           * @param {HTMLElement} node\n           * @param {boolean} [forward] True if going in forward tab order; false if going\n           *  in reverse.\n           * @returns {HTMLElement|undefined} The next tabbable node, if any.\n           */\n          nextTabbableNode: function nextTabbableNode(node) {\n            var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true; // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n            //  from the DOM order), this __will not work__ because the list of focusableNodes,\n            //  while it contains tabbable nodes, does not sort its nodes in any order other\n            //  than DOM order, because it can't: Where would you place focusable (but not\n            //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n            // Support for positive tabindex is already broken and hard to manage (possibly\n            //  not supportable, TBD), so this isn't going to make things worse than they\n            //  already are, and at least makes things better for the majority of cases where\n            //  tabindex is either 0/unset or negative.\n            // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n\n            var nodeIdx = focusableNodes.findIndex(function (n) {\n              return n === node;\n            });\n\n            if (forward) {\n              return focusableNodes.slice(nodeIdx + 1).find(function (n) {\n                return isTabbable(n);\n              });\n            }\n\n            return focusableNodes.slice(0, nodeIdx).reverse().find(function (n) {\n              return isTabbable(n);\n            });\n          }\n        };\n      }\n\n      return undefined;\n    }).filter(function (group) {\n      return !!group;\n    }); // remove groups with no tabbable nodes\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n  };\n\n  var tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  }; // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n\n\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n\n    if (containersContain(target)) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus: config.returnFocusOnDeactivate && !isFocusable(target)\n      });\n      return;\n    } // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    } // otherwise, prevent the click\n\n\n    e.preventDefault();\n  }; // In case focus escapes the trap for some strange reason, pull it back in.\n\n\n  var checkFocusIn = function checkFocusIn(e) {\n    var target = getActualTarget(e);\n    var targetContained = containersContain(target); // In Firefox when you Tab out of an iframe the Document is briefly focused.\n\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  }; // Hijack Tab events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n\n\n  var checkTab = function checkTab(e) {\n    var target = getActualTarget(e);\n    updateTabbableNodes();\n    var destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findIndex(state.tabbableGroups, function (_ref) {\n        var container = _ref.container;\n        return container.contains(target);\n      });\n      var containerGroup = containerIndex >= 0 ? state.tabbableGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back in to...\n        if (e.shiftKey) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (e.shiftKey) {\n        // REVERSE\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref2) {\n          var firstTabbableNode = _ref2.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target) && !isTabbable(target) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        }\n      } else {\n        // FORWARD\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {\n          var lastTabbableNode = _ref3.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target) && !isTabbable(target) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = _destinationGroup.firstTabbableNode;\n        }\n      }\n    } else {\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      e.preventDefault();\n      tryFocus(destinationNode);\n    } // else, let the browser take care of [shift+]tab and move the focus\n\n  };\n\n  var checkKey = function checkKey(e) {\n    if (isEscapeEvent(e) && valueOrHandler(config.escapeDeactivates, e) !== false) {\n      e.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (isTabEvent(e)) {\n      checkTab(e);\n      return;\n    }\n  };\n\n  var checkClick = function checkClick(e) {\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    var target = getActualTarget(e);\n\n    if (containersContain(target)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }; //\n  // EVENT LISTENERS\n  //\n\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    } // There can be only one listening focus trap at a time\n\n\n    activeFocusTraps.activateTrap(trap); // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      tryFocus(getInitialFocusNode());\n    }) : tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false\n    });\n    return trap;\n  };\n\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n    return trap;\n  }; //\n  // TRAP DEFINITION\n  //\n\n\n  trap = {\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      if (onActivate) {\n        onActivate();\n      }\n\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n\n        addListeners();\n\n        if (onPostActivate) {\n          onPostActivate();\n        }\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      activeFocusTraps.deactivateTrap(trap);\n      var onDeactivate = getOption(deactivateOptions, 'onDeactivate');\n      var onPostDeactivate = getOption(deactivateOptions, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(deactivateOptions, 'checkCanReturnFocus');\n\n      if (onDeactivate) {\n        onDeactivate();\n      }\n\n      var returnFocus = getOption(deactivateOptions, 'returnFocus', 'returnFocusOnDeactivate');\n\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n\n          if (onPostDeactivate) {\n            onPostDeactivate();\n          }\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = true;\n      removeListeners();\n      return this;\n    },\n    unpause: function unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n      return this;\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    }\n  }; // initialize container elements\n\n  trap.updateContainerElements(elements);\n  return trap;\n};\n\nexport { createFocusTrap };","map":{"version":3,"mappings":"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","names":["activeFocusTraps","trapQueue","activateTrap","trap","length","activeTrap","pause","trapIndex","indexOf","push","splice","deactivateTrap","unpause","isSelectableInput","node","tagName","toLowerCase","select","isEscapeEvent","e","key","keyCode","isTabEvent","delay","fn","setTimeout","findIndex","arr","idx","every","value","i","valueOrHandler","params","arguments","getActualTarget","event","target","shadowRoot","composedPath","createFocusTrap","elements","userOptions","doc","document","config","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","undefined","getOption","configOverrideOptions","optionName","configOptionName","containersContain","element","some","container","contains","getNodeForOption","optionValue","Error","querySelector","getInitialFocusNode","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","tabbableNodes","tabbable","focusableNodes","focusable","lastTabbableNode","nextTabbableNode","forward","nodeIdx","n","slice","find","isTabbable","reverse","filter","group","tryFocus","focus","preventScroll","getReturnFocusNode","previousActiveElement","checkPointerDown","clickOutsideDeactivates","deactivate","returnFocus","isFocusable","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","stopImmediatePropagation","checkTab","destinationNode","containerIndex","containerGroup","shiftKey","startOfGroupIndex","destinationGroupIndex","destinationGroup","lastOfGroupIndex","checkKey","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","activate","activateOptions","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","concat","then","deactivateOptions","clearTimeout","onDeactivate","onPostDeactivate","checkCanReturnFocus","finishDeactivation","updateContainerElements","containerElements","elementsAsArray","Boolean"],"sources":["D:\\Github\\CUSP_DataBase\\CUSP_DB\\src\\main\\gis\\node_modules\\focus-trap\\index.js"],"sourcesContent":["import { tabbable, focusable, isFocusable, isTabbable } from 'tabbable';\n\nconst activeFocusTraps = (function () {\n  const trapQueue = [];\n  return {\n    activateTrap(trap) {\n      if (trapQueue.length > 0) {\n        const activeTrap = trapQueue[trapQueue.length - 1];\n        if (activeTrap !== trap) {\n          activeTrap.pause();\n        }\n      }\n\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex === -1) {\n        trapQueue.push(trap);\n      } else {\n        // move this existing trap to the front of the queue\n        trapQueue.splice(trapIndex, 1);\n        trapQueue.push(trap);\n      }\n    },\n\n    deactivateTrap(trap) {\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex !== -1) {\n        trapQueue.splice(trapIndex, 1);\n      }\n\n      if (trapQueue.length > 0) {\n        trapQueue[trapQueue.length - 1].unpause();\n      }\n    },\n  };\n})();\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nconst findIndex = function (arr, fn) {\n  let idx = -1;\n\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    ...userOptions,\n  };\n\n  const state = {\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying the first and last tabbable nodes in all containers/groups in\n    //  the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  const containersContain = function (element) {\n    return !!(\n      element &&\n      state.containers.some((container) => container.contains(element))\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  const getNodeForOption = function (optionName, ...params) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\n          `\\`${optionName}\\` as selector refers to no known node`\n        );\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (containersContain(doc.activeElement)) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.tabbableGroups = state.containers\n      .map((container) => {\n        const tabbableNodes = tabbable(container);\n\n        // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n        //  are a superset of tabbable nodes\n        const focusableNodes = focusable(container);\n\n        if (tabbableNodes.length > 0) {\n          return {\n            container,\n            firstTabbableNode: tabbableNodes[0],\n            lastTabbableNode: tabbableNodes[tabbableNodes.length - 1],\n\n            /**\n             * Finds the __tabbable__ node that follows the given node in the specified direction,\n             *  in this container, if any.\n             * @param {HTMLElement} node\n             * @param {boolean} [forward] True if going in forward tab order; false if going\n             *  in reverse.\n             * @returns {HTMLElement|undefined} The next tabbable node, if any.\n             */\n            nextTabbableNode(node, forward = true) {\n              // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n              //  from the DOM order), this __will not work__ because the list of focusableNodes,\n              //  while it contains tabbable nodes, does not sort its nodes in any order other\n              //  than DOM order, because it can't: Where would you place focusable (but not\n              //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n              // Support for positive tabindex is already broken and hard to manage (possibly\n              //  not supportable, TBD), so this isn't going to make things worse than they\n              //  already are, and at least makes things better for the majority of cases where\n              //  tabindex is either 0/unset or negative.\n              // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n              const nodeIdx = focusableNodes.findIndex((n) => n === node);\n              if (forward) {\n                return focusableNodes\n                  .slice(nodeIdx + 1)\n                  .find((n) => isTabbable(n));\n              }\n              return focusableNodes\n                .slice(0, nodeIdx)\n                .reverse()\n                .find((n) => isTabbable(n));\n            },\n          };\n        }\n\n        return undefined;\n      })\n      .filter((group) => !!group); // remove groups with no tabbable nodes\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (containersContain(target)) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus: config.returnFocusOnDeactivate && !isFocusable(target),\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  const checkFocusIn = function (e) {\n    const target = getActualTarget(e);\n    const targetContained = containersContain(target);\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack Tab events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkTab = function (e) {\n    const target = getActualTarget(e);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findIndex(state.tabbableGroups, ({ container }) =>\n        container.contains(target)\n      );\n      const containerGroup =\n        containerIndex >= 0 ? state.tabbableGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back in to...\n        if (e.shiftKey) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (e.shiftKey) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target) &&\n              !isTabbable(target) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target) &&\n              !isTabbable(target) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.firstTabbableNode;\n        }\n      }\n    } else {\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      e.preventDefault();\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkKey = function (e) {\n    if (\n      isEscapeEvent(e) &&\n      valueOrHandler(config.escapeDeactivates, e) !== false\n    ) {\n      e.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (isTabEvent(e)) {\n      checkTab(e);\n      return;\n    }\n  };\n\n  const checkClick = function (e) {\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    const target = getActualTarget(e);\n\n    if (containersContain(target)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false,\n    });\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      if (onActivate) {\n        onActivate();\n      }\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        if (onPostActivate) {\n          onPostActivate();\n        }\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n\n      activeFocusTraps.deactivateTrap(trap);\n\n      const onDeactivate = getOption(deactivateOptions, 'onDeactivate');\n      const onPostDeactivate = getOption(deactivateOptions, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(\n        deactivateOptions,\n        'checkCanReturnFocus'\n      );\n\n      if (onDeactivate) {\n        onDeactivate();\n      }\n\n      const returnFocus = getOption(\n        deactivateOptions,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          if (onPostDeactivate) {\n            onPostDeactivate();\n          }\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = true;\n      removeListeners();\n\n      return this;\n    },\n\n    unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n\n      return this;\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    },\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n"]},"metadata":{},"sourceType":"module"}