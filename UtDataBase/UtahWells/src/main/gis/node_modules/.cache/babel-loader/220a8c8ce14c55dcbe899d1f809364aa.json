{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport { _ as t } from \"../../../chunks/tslib.es6.js\";\nimport \"../../../geometry.js\";\nimport e from \"../../../core/Error.js\";\nimport { unwrap as r, isSome as s } from \"../../../core/maybe.js\";\nimport { property as o } from \"../../../core/accessorSupport/decorators/property.js\";\nimport \"../../../core/arrayUtils.js\";\nimport \"../../../core/has.js\";\nimport \"../../../core/accessorSupport/ensureType.js\";\nimport { subclass as i } from \"../../../core/accessorSupport/decorators/subclass.js\";\nimport a from \"../PixelBlock.js\";\nimport n from \"../RasterInfo.js\";\nimport l from \"../RasterStorageInfo.js\";\nimport f from \"./BaseRaster.js\";\nimport { parseSpatialReference as c, parsePAMInfo as p } from \"./pamParser.js\";\nimport { getElement as m, getElementValue as h } from \"./xmlUtilities.js\";\nimport { isPlatformLittleEndian as u } from \"../rasterFormats/utils.js\";\nimport { estimateStatisticsFromHistograms as g } from \"../rasterFunctions/pixelUtils.js\";\nimport d from \"../../../geometry/SpatialReference.js\";\nimport y from \"../../../geometry/Extent.js\";\nimport x from \"../../../geometry/Point.js\";\nconst w = new Map();\nw.set(\"Int8\", \"s8\"), w.set(\"UInt8\", \"u8\"), w.set(\"Int16\", \"s16\"), w.set(\"UInt16\", \"u16\"), w.set(\"Int32\", \"s32\"), w.set(\"UInt32\", \"u32\"), w.set(\"Float32\", \"f32\"), w.set(\"Float64\", \"f32\"), w.set(\"Double64\", \"f32\");\nconst I = new Map();\nI.set(\"none\", {\n  blobExtension: \".til\",\n  isOneSegment: !0,\n  decoderFormat: \"bip\"\n}), I.set(\"lerc\", {\n  blobExtension: \".lrc\",\n  isOneSegment: !1,\n  decoderFormat: \"lerc\"\n}), I.set(\"deflate\", {\n  blobExtension: \".pzp\",\n  isOneSegment: !0,\n  decoderFormat: \"deflate\"\n}), I.set(\"jpeg\", {\n  blobExtension: \".pjg\",\n  isOneSegment: !0,\n  decoderFormat: \"jpg\"\n});\nlet b = class extends f {\n  constructor() {\n    super(...arguments), this._files = null, this._storageIndex = null, this.datasetFormat = \"MRF\";\n  }\n\n  async open(t) {\n    var e;\n    await this.init(), this.datasetName = this.url.slice(this.url.lastIndexOf(\"/\") + 1);\n\n    const o = t ? r(t.signal) : null,\n          i = await this.request(this.url, {\n      responseType: \"xml\",\n      signal: o\n    }),\n          {\n      rasterInfo: a,\n      files: n\n    } = this._parseHeader(i.data);\n\n    if (-1 === (null == (e = this.ioConfig.skipExtensions) ? void 0 : e.indexOf(\"aux.xml\"))) {\n      const e = await this._fetchAuxiliaryData(t);\n      var l;\n      if (null != e) a.statistics = null != (l = e.statistics) ? l : a.statistics, a.histograms = e.histograms, e.histograms && !s(a.statistics) && (a.statistics = g(e.histograms));\n    }\n\n    this._set(\"rasterInfo\", a), this._files = n;\n    const f = await this.request(n.index, {\n      responseType: \"array-buffer\",\n      signal: o\n    });\n    this._storageIndex = this._parseIndex(f.data);\n\n    const {\n      blockWidth: c,\n      blockHeight: p\n    } = this.rasterInfo.storageInfo,\n          m = this.rasterInfo.storageInfo.pyramidScalingFactor,\n          {\n      width: h,\n      height: u\n    } = this.rasterInfo,\n          d = [],\n          y = this._getBandSegmentCount();\n\n    let x = 0,\n        w = -1;\n\n    for (; x < this._storageIndex.length;) {\n      w++;\n      const t = Math.ceil(h / c / m ** w) - 1,\n            e = Math.ceil(u / p / m ** w) - 1;\n      x += (t + 1) * (e + 1) * y * 4, d.push({\n        maxRow: e,\n        maxCol: t,\n        minCol: 0,\n        minRow: 0\n      });\n    }\n\n    this.rasterInfo.storageInfo.blockBoundary = d, w > 0 && (this.rasterInfo.storageInfo.firstPyramidLevel = 1, this.rasterInfo.storageInfo.maximumPyramidLevel = w), this.updateTileInfo();\n  }\n\n  async fetchRawTile(t, e, r) {\n    let o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const {\n      blockWidth: i,\n      blockHeight: n,\n      blockBoundary: l\n    } = this.rasterInfo.storageInfo,\n          f = l[t];\n    if (!f || f.maxRow < e || f.maxCol < r || f.minRow > e || f.minCol > r) return null;\n\n    const {\n      bandCount: c,\n      pixelType: p\n    } = this.rasterInfo,\n          {\n      ranges: m,\n      actualTileWidth: h,\n      actualTileHeight: u\n    } = this._getTileLocation(t, e, r);\n\n    if (!m || 0 === m.length) return null;\n\n    if (0 === m[0].from && 0 === m[0].to) {\n      const t = new Uint8Array(i * n);\n      return new a({\n        width: i,\n        height: n,\n        pixels: null,\n        mask: t,\n        validPixelCount: 0\n      });\n    }\n\n    const {\n      bandIds: g\n    } = this.ioConfig,\n          d = this._getBandSegmentCount(),\n          y = [];\n\n    let x = 0;\n\n    for (x = 0; x < d; x++) (!g || g.indexOf[x] > -1) && y.push(this.request(this._files.data, {\n      range: {\n        from: m[x].from,\n        to: m[x].to\n      },\n      responseType: \"array-buffer\",\n      signal: o.signal\n    }));\n\n    const w = await Promise.all(y),\n          b = w.map(t => t.data.byteLength).reduce((t, e) => t + e),\n          A = new Uint8Array(b);\n    let F = 0;\n\n    for (x = 0; x < d; x++) A.set(new Uint8Array(w[x].data), F), F += w[x].data.byteLength;\n\n    const _ = I.get(this.rasterInfo.storageInfo.compression).decoderFormat,\n          R = await this.decodePixelBlock(A.buffer, {\n      width: i,\n      height: n,\n      format: _,\n      planes: (null == g ? void 0 : g.length) || c,\n      pixelType: p\n    });\n\n    if (s(this.rasterInfo.noDataValue) && \"lerc\" !== _ && !R.mask) {\n      const t = this.rasterInfo.noDataValue[0];\n\n      if (null != t) {\n        const e = R.width * R.height,\n              r = new Uint8Array(e);\n        if (Math.abs(t) > 1e24) for (x = 0; x < e; x++) Math.abs((R.pixels[0][x] - t) / t) > 1e-6 && (r[x] = 1);else for (x = 0; x < e; x++) R.pixels[0][x] !== t && (r[x] = 1);\n        R.mask = r;\n      }\n    }\n\n    let j = 0,\n        k = 0;\n\n    if (h !== i || u !== n) {\n      let t = R.mask;\n      if (t) {\n        for (x = 0; x < n; x++) if (k = x * i, x < u) for (j = h; j < i; j++) t[k + j] = 0;else for (j = 0; j < i; j++) t[k + j] = 0;\n      } else for (t = new Uint8Array(i * n), R.mask = t, x = 0; x < u; x++) for (k = x * i, j = 0; j < h; j++) t[k + j] = 1;\n    }\n\n    return R;\n  }\n\n  _parseIndex(t) {\n    if (t.byteLength % 16 > 0) throw \"invalid array buffer must be multiples of 16\";\n    let e, r, s, o, i, a;\n\n    if (u) {\n      for (r = new Uint8Array(t), o = new ArrayBuffer(t.byteLength), s = new Uint8Array(o), i = 0; i < t.byteLength / 4; i++) for (a = 0; a < 4; a++) s[4 * i + a] = r[4 * i + 3 - a];\n\n      e = new Uint32Array(o);\n    } else e = new Uint32Array(t);\n\n    return e;\n  }\n\n  _getBandSegmentCount() {\n    return I.get(this.rasterInfo.storageInfo.compression).isOneSegment ? 1 : this.rasterInfo.bandCount;\n  }\n\n  _getTileLocation(t, e, r) {\n    const {\n      blockWidth: s,\n      blockHeight: o,\n      pyramidScalingFactor: i\n    } = this.rasterInfo.storageInfo,\n          {\n      width: a,\n      height: n\n    } = this.rasterInfo,\n          l = this._getBandSegmentCount();\n\n    let f,\n        c,\n        p,\n        m = 0,\n        h = 0;\n\n    for (p = 0; p < t; p++) h = i ** p, f = Math.ceil(a / s / h), c = Math.ceil(n / o / h), m += f * c;\n\n    h = i ** t, f = Math.ceil(a / s / h), c = Math.ceil(n / o / h), m += e * f + r, m *= 4 * l;\n\n    const u = this._storageIndex.subarray(m, m + 4 * l);\n\n    let g = 0,\n        d = 0;\n    const y = [];\n\n    for (let x = 0; x < l; x++) g = u[4 * x + 0] * 2 ** 32 + u[4 * x + 1], d = g + u[4 * x + 2] * 2 ** 32 + u[4 * x + 3], y.push({\n      from: g,\n      to: d\n    });\n\n    return {\n      ranges: y,\n      actualTileWidth: r < f - 1 ? s : Math.ceil(a / h) - s * (f - 1),\n      actualTileHeight: e < c - 1 ? o : Math.ceil(n / h) - o * (c - 1)\n    };\n  }\n\n  _parseHeader(t) {\n    const r = m(t, \"MRF_META/Raster\");\n    if (!r) throw new e(\"mrf:open\", \"not a valid MRF format\");\n    const s = m(r, \"Size\"),\n          o = parseInt(s.getAttribute(\"x\"), 10),\n          i = parseInt(s.getAttribute(\"y\"), 10),\n          a = parseInt(s.getAttribute(\"c\"), 10),\n          f = (h(r, \"Compression\") || \"none\").toLowerCase();\n    if (!I.has(f)) throw new e(\"mrf:open\", \"currently does not support compression \" + f);\n    const p = h(r, \"DataType\") || \"UInt8\",\n          u = w.get(p);\n    if (null == u) throw new e(\"mrf:open\", \"currently does not support pixel type \" + p);\n    const g = m(r, \"PageSize\"),\n          b = parseInt(g.getAttribute(\"x\"), 10),\n          A = parseInt(g.getAttribute(\"y\"), 10),\n          F = m(r, \"DataValues\");\n\n    let _, R;\n\n    F && (R = F.getAttribute(\"NoData\"), null != R && (_ = R.trim().split(\" \").map(t => parseFloat(t))));\n    if (m(t, \"MRF_META/CachedSource\")) throw new e(\"mrf:open\", \"currently does not support MRF referencing other data files\");\n    const j = m(t, \"MRF_META/GeoTags\"),\n          k = m(j, \"BoundingBox\");\n    let M,\n        S = !1;\n\n    if (null != k) {\n      const t = parseFloat(k.getAttribute(\"minx\")),\n            e = parseFloat(k.getAttribute(\"miny\")),\n            r = parseFloat(k.getAttribute(\"maxx\")),\n            s = parseFloat(k.getAttribute(\"maxy\")),\n            o = h(j, \"Projection\") || \"\";\n      let i;\n      if (\"LOCAL_CS[]\" !== o) {\n        if (o.toLowerCase().startsWith(\"epsg:\")) {\n          const t = Number(o.slice(5));\n          isNaN(t) || 0 === t || (i = new d({\n            wkid: t\n          }));\n        } else i = c(o);\n      } else S = !0, i = new d({\n        wkid: 3857\n      });\n      M = new y(t, e, r, s), M.spatialReference = i;\n    } else S = !0, M = new y({\n      xmin: -.5,\n      ymin: .5 - i,\n      xmax: o - .5,\n      ymax: .5,\n      spatialReference: new d({\n        wkid: 3857\n      })\n    });\n\n    const T = m(t, \"MRF_META/Rsets\"),\n          C = parseInt(T && T.getAttribute(\"scale\") || \"2\", 10),\n          U = M.spatialReference,\n          B = new l({\n      origin: new x({\n        x: M.xmin,\n        y: M.ymax,\n        spatialReference: U\n      }),\n      blockWidth: b,\n      blockHeight: A,\n      pyramidBlockWidth: b,\n      pyramidBlockHeight: A,\n      compression: f,\n      pyramidScalingFactor: C\n    }),\n          v = new x({\n      x: M.width / o,\n      y: M.height / i,\n      spatialReference: U\n    }),\n          L = new n({\n      width: o,\n      height: i,\n      extent: M,\n      isPseudoSpatialReference: S,\n      spatialReference: U,\n      bandCount: a,\n      pixelType: u,\n      pixelSize: v,\n      noDataValue: _,\n      storageInfo: B\n    }),\n          E = h(t, \"datafile\"),\n          P = h(t, \"IndexFile\");\n    return {\n      rasterInfo: L,\n      files: {\n        mrf: this.url,\n        index: P || this.url.replace(\".mrf\", \".idx\"),\n        data: E || this.url.replace(\".mrf\", I.get(f).blobExtension)\n      }\n    };\n  }\n\n  async _fetchAuxiliaryData(t) {\n    try {\n      const {\n        data: e\n      } = await this.request(this.url + \".aux.xml\", {\n        responseType: \"xml\",\n        signal: null == t ? void 0 : t.signal\n      });\n      return p(e);\n    } catch {\n      return null;\n    }\n  }\n\n};\nt([o()], b.prototype, \"_files\", void 0), t([o()], b.prototype, \"_storageIndex\", void 0), t([o({\n  type: String,\n  json: {\n    write: !0\n  }\n})], b.prototype, \"datasetFormat\", void 0), b = t([i(\"esri.layers.support.rasterIO.MRFRaster\")], b);\nconst A = b;\nexport { A as default };","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/gis/node_modules/@arcgis/core/layers/support/rasterDatasets/MRFRaster.js"],"names":["_","t","e","unwrap","r","isSome","s","property","o","subclass","i","a","n","l","f","parseSpatialReference","c","parsePAMInfo","p","getElement","m","getElementValue","h","isPlatformLittleEndian","u","estimateStatisticsFromHistograms","g","d","y","x","w","Map","set","I","blobExtension","isOneSegment","decoderFormat","b","constructor","arguments","_files","_storageIndex","datasetFormat","open","init","datasetName","url","slice","lastIndexOf","signal","request","responseType","rasterInfo","files","_parseHeader","data","ioConfig","skipExtensions","indexOf","_fetchAuxiliaryData","statistics","histograms","_set","index","_parseIndex","blockWidth","blockHeight","storageInfo","pyramidScalingFactor","width","height","_getBandSegmentCount","length","Math","ceil","push","maxRow","maxCol","minCol","minRow","blockBoundary","firstPyramidLevel","maximumPyramidLevel","updateTileInfo","fetchRawTile","bandCount","pixelType","ranges","actualTileWidth","actualTileHeight","_getTileLocation","from","to","Uint8Array","pixels","mask","validPixelCount","bandIds","range","Promise","all","map","byteLength","reduce","A","F","get","compression","R","decodePixelBlock","buffer","format","planes","noDataValue","abs","j","k","ArrayBuffer","Uint32Array","subarray","parseInt","getAttribute","toLowerCase","has","trim","split","parseFloat","M","S","startsWith","Number","isNaN","wkid","spatialReference","xmin","ymin","xmax","ymax","T","C","U","B","origin","pyramidBlockWidth","pyramidBlockHeight","v","L","extent","isPseudoSpatialReference","pixelSize","E","P","mrf","replace","prototype","type","String","json","write","default"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport{_ as t}from\"../../../chunks/tslib.es6.js\";import\"../../../geometry.js\";import e from\"../../../core/Error.js\";import{unwrap as r,isSome as s}from\"../../../core/maybe.js\";import{property as o}from\"../../../core/accessorSupport/decorators/property.js\";import\"../../../core/arrayUtils.js\";import\"../../../core/has.js\";import\"../../../core/accessorSupport/ensureType.js\";import{subclass as i}from\"../../../core/accessorSupport/decorators/subclass.js\";import a from\"../PixelBlock.js\";import n from\"../RasterInfo.js\";import l from\"../RasterStorageInfo.js\";import f from\"./BaseRaster.js\";import{parseSpatialReference as c,parsePAMInfo as p}from\"./pamParser.js\";import{getElement as m,getElementValue as h}from\"./xmlUtilities.js\";import{isPlatformLittleEndian as u}from\"../rasterFormats/utils.js\";import{estimateStatisticsFromHistograms as g}from\"../rasterFunctions/pixelUtils.js\";import d from\"../../../geometry/SpatialReference.js\";import y from\"../../../geometry/Extent.js\";import x from\"../../../geometry/Point.js\";const w=new Map;w.set(\"Int8\",\"s8\"),w.set(\"UInt8\",\"u8\"),w.set(\"Int16\",\"s16\"),w.set(\"UInt16\",\"u16\"),w.set(\"Int32\",\"s32\"),w.set(\"UInt32\",\"u32\"),w.set(\"Float32\",\"f32\"),w.set(\"Float64\",\"f32\"),w.set(\"Double64\",\"f32\");const I=new Map;I.set(\"none\",{blobExtension:\".til\",isOneSegment:!0,decoderFormat:\"bip\"}),I.set(\"lerc\",{blobExtension:\".lrc\",isOneSegment:!1,decoderFormat:\"lerc\"}),I.set(\"deflate\",{blobExtension:\".pzp\",isOneSegment:!0,decoderFormat:\"deflate\"}),I.set(\"jpeg\",{blobExtension:\".pjg\",isOneSegment:!0,decoderFormat:\"jpg\"});let b=class extends f{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat=\"MRF\"}async open(t){var e;await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf(\"/\")+1);const o=t?r(t.signal):null,i=await this.request(this.url,{responseType:\"xml\",signal:o}),{rasterInfo:a,files:n}=this._parseHeader(i.data);if(-1===(null==(e=this.ioConfig.skipExtensions)?void 0:e.indexOf(\"aux.xml\"))){const e=await this._fetchAuxiliaryData(t);var l;if(null!=e)a.statistics=null!=(l=e.statistics)?l:a.statistics,a.histograms=e.histograms,e.histograms&&!s(a.statistics)&&(a.statistics=g(e.histograms))}this._set(\"rasterInfo\",a),this._files=n;const f=await this.request(n.index,{responseType:\"array-buffer\",signal:o});this._storageIndex=this._parseIndex(f.data);const{blockWidth:c,blockHeight:p}=this.rasterInfo.storageInfo,m=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:h,height:u}=this.rasterInfo,d=[],y=this._getBandSegmentCount();let x=0,w=-1;for(;x<this._storageIndex.length;){w++;const t=Math.ceil(h/c/m**w)-1,e=Math.ceil(u/p/m**w)-1;x+=(t+1)*(e+1)*y*4,d.push({maxRow:e,maxCol:t,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=d,w>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=w),this.updateTileInfo()}async fetchRawTile(t,e,r,o={}){const{blockWidth:i,blockHeight:n,blockBoundary:l}=this.rasterInfo.storageInfo,f=l[t];if(!f||f.maxRow<e||f.maxCol<r||f.minRow>e||f.minCol>r)return null;const{bandCount:c,pixelType:p}=this.rasterInfo,{ranges:m,actualTileWidth:h,actualTileHeight:u}=this._getTileLocation(t,e,r);if(!m||0===m.length)return null;if(0===m[0].from&&0===m[0].to){const t=new Uint8Array(i*n);return new a({width:i,height:n,pixels:null,mask:t,validPixelCount:0})}const{bandIds:g}=this.ioConfig,d=this._getBandSegmentCount(),y=[];let x=0;for(x=0;x<d;x++)(!g||g.indexOf[x]>-1)&&y.push(this.request(this._files.data,{range:{from:m[x].from,to:m[x].to},responseType:\"array-buffer\",signal:o.signal}));const w=await Promise.all(y),b=w.map((t=>t.data.byteLength)).reduce(((t,e)=>t+e)),A=new Uint8Array(b);let F=0;for(x=0;x<d;x++)A.set(new Uint8Array(w[x].data),F),F+=w[x].data.byteLength;const _=I.get(this.rasterInfo.storageInfo.compression).decoderFormat,R=await this.decodePixelBlock(A.buffer,{width:i,height:n,format:_,planes:(null==g?void 0:g.length)||c,pixelType:p});if(s(this.rasterInfo.noDataValue)&&\"lerc\"!==_&&!R.mask){const t=this.rasterInfo.noDataValue[0];if(null!=t){const e=R.width*R.height,r=new Uint8Array(e);if(Math.abs(t)>1e24)for(x=0;x<e;x++)Math.abs((R.pixels[0][x]-t)/t)>1e-6&&(r[x]=1);else for(x=0;x<e;x++)R.pixels[0][x]!==t&&(r[x]=1);R.mask=r}}let j=0,k=0;if(h!==i||u!==n){let t=R.mask;if(t)for(x=0;x<n;x++)if(k=x*i,x<u)for(j=h;j<i;j++)t[k+j]=0;else for(j=0;j<i;j++)t[k+j]=0;else for(t=new Uint8Array(i*n),R.mask=t,x=0;x<u;x++)for(k=x*i,j=0;j<h;j++)t[k+j]=1}return R}_parseIndex(t){if(t.byteLength%16>0)throw\"invalid array buffer must be multiples of 16\";let e,r,s,o,i,a;if(u){for(r=new Uint8Array(t),o=new ArrayBuffer(t.byteLength),s=new Uint8Array(o),i=0;i<t.byteLength/4;i++)for(a=0;a<4;a++)s[4*i+a]=r[4*i+3-a];e=new Uint32Array(o)}else e=new Uint32Array(t);return e}_getBandSegmentCount(){return I.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(t,e,r){const{blockWidth:s,blockHeight:o,pyramidScalingFactor:i}=this.rasterInfo.storageInfo,{width:a,height:n}=this.rasterInfo,l=this._getBandSegmentCount();let f,c,p,m=0,h=0;for(p=0;p<t;p++)h=i**p,f=Math.ceil(a/s/h),c=Math.ceil(n/o/h),m+=f*c;h=i**t,f=Math.ceil(a/s/h),c=Math.ceil(n/o/h),m+=e*f+r,m*=4*l;const u=this._storageIndex.subarray(m,m+4*l);let g=0,d=0;const y=[];for(let x=0;x<l;x++)g=u[4*x+0]*2**32+u[4*x+1],d=g+u[4*x+2]*2**32+u[4*x+3],y.push({from:g,to:d});return{ranges:y,actualTileWidth:r<f-1?s:Math.ceil(a/h)-s*(f-1),actualTileHeight:e<c-1?o:Math.ceil(n/h)-o*(c-1)}}_parseHeader(t){const r=m(t,\"MRF_META/Raster\");if(!r)throw new e(\"mrf:open\",\"not a valid MRF format\");const s=m(r,\"Size\"),o=parseInt(s.getAttribute(\"x\"),10),i=parseInt(s.getAttribute(\"y\"),10),a=parseInt(s.getAttribute(\"c\"),10),f=(h(r,\"Compression\")||\"none\").toLowerCase();if(!I.has(f))throw new e(\"mrf:open\",\"currently does not support compression \"+f);const p=h(r,\"DataType\")||\"UInt8\",u=w.get(p);if(null==u)throw new e(\"mrf:open\",\"currently does not support pixel type \"+p);const g=m(r,\"PageSize\"),b=parseInt(g.getAttribute(\"x\"),10),A=parseInt(g.getAttribute(\"y\"),10),F=m(r,\"DataValues\");let _,R;F&&(R=F.getAttribute(\"NoData\"),null!=R&&(_=R.trim().split(\" \").map((t=>parseFloat(t)))));if(m(t,\"MRF_META/CachedSource\"))throw new e(\"mrf:open\",\"currently does not support MRF referencing other data files\");const j=m(t,\"MRF_META/GeoTags\"),k=m(j,\"BoundingBox\");let M,S=!1;if(null!=k){const t=parseFloat(k.getAttribute(\"minx\")),e=parseFloat(k.getAttribute(\"miny\")),r=parseFloat(k.getAttribute(\"maxx\")),s=parseFloat(k.getAttribute(\"maxy\")),o=h(j,\"Projection\")||\"\";let i;if(\"LOCAL_CS[]\"!==o)if(o.toLowerCase().startsWith(\"epsg:\")){const t=Number(o.slice(5));isNaN(t)||0===t||(i=new d({wkid:t}))}else i=c(o);else S=!0,i=new d({wkid:3857});M=new y(t,e,r,s),M.spatialReference=i}else S=!0,M=new y({xmin:-.5,ymin:.5-i,xmax:o-.5,ymax:.5,spatialReference:new d({wkid:3857})});const T=m(t,\"MRF_META/Rsets\"),C=parseInt(T&&T.getAttribute(\"scale\")||\"2\",10),U=M.spatialReference,B=new l({origin:new x({x:M.xmin,y:M.ymax,spatialReference:U}),blockWidth:b,blockHeight:A,pyramidBlockWidth:b,pyramidBlockHeight:A,compression:f,pyramidScalingFactor:C}),v=new x({x:M.width/o,y:M.height/i,spatialReference:U}),L=new n({width:o,height:i,extent:M,isPseudoSpatialReference:S,spatialReference:U,bandCount:a,pixelType:u,pixelSize:v,noDataValue:_,storageInfo:B}),E=h(t,\"datafile\"),P=h(t,\"IndexFile\");return{rasterInfo:L,files:{mrf:this.url,index:P||this.url.replace(\".mrf\",\".idx\"),data:E||this.url.replace(\".mrf\",I.get(f).blobExtension)}}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+\".aux.xml\",{responseType:\"xml\",signal:null==t?void 0:t.signal});return p(e)}catch{return null}}};t([o()],b.prototype,\"_files\",void 0),t([o()],b.prototype,\"_storageIndex\",void 0),t([o({type:String,json:{write:!0}})],b.prototype,\"datasetFormat\",void 0),b=t([i(\"esri.layers.support.rasterIO.MRFRaster\")],b);const A=b;export{A as default};\n"]},"metadata":{},"sourceType":"module"}