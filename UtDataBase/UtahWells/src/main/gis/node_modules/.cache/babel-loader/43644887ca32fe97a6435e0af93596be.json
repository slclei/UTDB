{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport s from \"./GraphicDisplayList.js\";\nimport t from \"./WGLDisplayObject.js\";\nimport { serializeList as i } from \"./util/serializationUtils.js\";\n\nfunction e(s) {\n  const t = [[], [], [], [], []],\n        i = s;\n\n  for (const e of i) for (const s of e.displayRecords) t[s.geometryType].push(s);\n\n  return t;\n}\n\nclass r {\n  constructor() {}\n\n  get displayObjectRegistry() {\n    if (!this._displayObjectRegistry) {\n      this._displayObjectRegistry = new Map();\n\n      for (const s of this.displayObjects) this._displayObjectRegistry.set(s.id, s);\n    }\n\n    return this._displayObjectRegistry;\n  }\n\n  get displayList() {\n    return this._displayList;\n  }\n\n  computeDisplayList() {\n    this._displayList = new s();\n\n    for (const s of this.displayObjects) for (const t of s.displayRecords) this._displayList.addToList(t);\n  }\n\n  clone() {\n    const s = new r();\n    return this.displayObjects && (s.displayObjects = this.displayObjects.map(s => s.clone())), s;\n  }\n\n  serialize(s) {\n    return i(s, this.displayObjects), s;\n  }\n\n  _deserializeObjects(s) {\n    const i = s.readInt32(),\n          e = new Array(i),\n          r = new Map();\n\n    for (let a = 0; a < e.length; ++a) {\n      const i = t.deserialize(s);\n      e[a] = i, r.set(i.id, i);\n    }\n\n    this.displayObjects = e, this._displayList = null, this._displayObjectRegistry = r;\n  }\n\n  static deserialize(s) {\n    const t = new r();\n    return t._deserializeObjects(s), t;\n  }\n\n}\n\nexport { r as default, e as groupRecordsByGeometryType };","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/gis/node_modules/@arcgis/core/views/2d/engine/webgl/TileDisplayData.js"],"names":["s","t","serializeList","i","e","displayRecords","geometryType","push","r","constructor","displayObjectRegistry","_displayObjectRegistry","Map","displayObjects","set","id","displayList","_displayList","computeDisplayList","addToList","clone","map","serialize","_deserializeObjects","readInt32","Array","a","length","deserialize","default","groupRecordsByGeometryType"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport s from\"./GraphicDisplayList.js\";import t from\"./WGLDisplayObject.js\";import{serializeList as i}from\"./util/serializationUtils.js\";function e(s){const t=[[],[],[],[],[]],i=s;for(const e of i)for(const s of e.displayRecords)t[s.geometryType].push(s);return t}class r{constructor(){}get displayObjectRegistry(){if(!this._displayObjectRegistry){this._displayObjectRegistry=new Map;for(const s of this.displayObjects)this._displayObjectRegistry.set(s.id,s)}return this._displayObjectRegistry}get displayList(){return this._displayList}computeDisplayList(){this._displayList=new s;for(const s of this.displayObjects)for(const t of s.displayRecords)this._displayList.addToList(t)}clone(){const s=new r;return this.displayObjects&&(s.displayObjects=this.displayObjects.map((s=>s.clone()))),s}serialize(s){return i(s,this.displayObjects),s}_deserializeObjects(s){const i=s.readInt32(),e=new Array(i),r=new Map;for(let a=0;a<e.length;++a){const i=t.deserialize(s);e[a]=i,r.set(i.id,i)}this.displayObjects=e,this._displayList=null,this._displayObjectRegistry=r}static deserialize(s){const t=new r;return t._deserializeObjects(s),t}}export{r as default,e as groupRecordsByGeometryType};\n"]},"metadata":{},"sourceType":"module"}