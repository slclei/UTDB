{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport \"./has.js\";\nimport { strict as e } from \"./jsonMap.js\";\nimport { isSome as s } from \"./maybe.js\";\nimport { getReferenceEllipsoid as r } from \"../geometry/projectionEllipsoid.js\";\nimport t from \"../geometry/SpatialReference.js\";\nimport { earth as i, mars as n, moon as a } from \"../geometry/support/Ellipsoid.js\";\nimport { isEarth as u, isWKIDFromMars as c, isWKIDFromMoon as o } from \"../geometry/support/spatialReferenceUtils.js\";\nimport l from \"../geometry/support/WKIDUnitConversion.js\";\n\nconst m = 39.37,\n      f = i.radius * Math.PI / 200,\n      d = /UNIT\\[([^\\]]+)\\]\\]$/i,\n      U = l,\n      q = /UNIT\\[([^\\]]+)\\]/i,\n      p = new Set([4261, 4305, 4807, 4810, 4811, 4812, 4816, 4819, 4821, 4901, 4902, 37225, 104139, 104140]),\n      B = e()({\n  meter: \"meters\",\n  foot: \"feet\",\n  foot_us: \"us-feet\",\n  foot_clarke: \"clarke-feet\",\n  yard_clarke: \"clarke-yards\",\n  link_clarke: \"clarke-links\",\n  yard_sears: \"sears-yards\",\n  foot_sears: \"sears-feet\",\n  chain_sears: \"sears-chains\",\n  chain_benoit_1895_b: \"benoit-1895-b-chains\",\n  yard_indian: \"indian-yards\",\n  yard_indian_1937: \"indian-1937-yards\",\n  foot_gold_coast: \"gold-coast-feet\",\n  chain_sears_1922_truncated: \"sears-1922-truncated-chains\",\n  \"50_kilometers\": \"50-kilometers\",\n  \"150_kilometers\": \"150-kilometers\"\n}),\n      h = e => e * e,\n      k = e => e * e * e,\n      y = {\n  length: {\n    baseUnit: \"meters\",\n    units: {\n      millimeters: {\n        inBaseUnits: .001\n      },\n      centimeters: {\n        inBaseUnits: .01\n      },\n      decimeters: {\n        inBaseUnits: .1\n      },\n      meters: {\n        inBaseUnits: 1\n      },\n      kilometers: {\n        inBaseUnits: 1e3\n      },\n      inches: {\n        inBaseUnits: .0254\n      },\n      feet: {\n        inBaseUnits: .3048\n      },\n      yards: {\n        inBaseUnits: .9144\n      },\n      miles: {\n        inBaseUnits: 1609.344\n      },\n      \"nautical-miles\": {\n        inBaseUnits: 1852\n      },\n      \"us-feet\": {\n        inBaseUnits: 1200 / 3937\n      }\n    }\n  },\n  area: {\n    baseUnit: \"square-meters\",\n    units: {\n      \"square-millimeters\": {\n        inBaseUnits: h(.001)\n      },\n      \"square-centimeters\": {\n        inBaseUnits: h(.01)\n      },\n      \"square-decimeters\": {\n        inBaseUnits: h(.1)\n      },\n      \"square-meters\": {\n        inBaseUnits: 1\n      },\n      \"square-kilometers\": {\n        inBaseUnits: h(1e3)\n      },\n      \"square-inches\": {\n        inBaseUnits: h(.0254)\n      },\n      \"square-feet\": {\n        inBaseUnits: h(.3048)\n      },\n      \"square-yards\": {\n        inBaseUnits: h(.9144)\n      },\n      \"square-miles\": {\n        inBaseUnits: h(1609.344)\n      },\n      \"square-us-feet\": {\n        inBaseUnits: h(1200 / 3937)\n      },\n      acres: {\n        inBaseUnits: .0015625 * h(1609.344)\n      },\n      ares: {\n        inBaseUnits: 100\n      },\n      hectares: {\n        inBaseUnits: 1e4\n      }\n    }\n  },\n  volume: {\n    baseUnit: \"liters\",\n    units: {\n      liters: {\n        inBaseUnits: 1\n      },\n      \"cubic-millimeters\": {\n        inBaseUnits: 1e3 * k(.001)\n      },\n      \"cubic-centimeters\": {\n        inBaseUnits: 1e3 * k(.01)\n      },\n      \"cubic-decimeters\": {\n        inBaseUnits: 1e3 * k(.1)\n      },\n      \"cubic-meters\": {\n        inBaseUnits: 1e3\n      },\n      \"cubic-kilometers\": {\n        inBaseUnits: 1e3 * k(1e3)\n      },\n      \"cubic-inches\": {\n        inBaseUnits: 1e3 * k(.0254)\n      },\n      \"cubic-feet\": {\n        inBaseUnits: 1e3 * k(.3048)\n      },\n      \"cubic-yards\": {\n        inBaseUnits: 1e3 * k(.9144)\n      },\n      \"cubic-miles\": {\n        inBaseUnits: 1e3 * k(1609.344)\n      }\n    }\n  },\n  angle: {\n    baseUnit: \"radians\",\n    units: {\n      radians: {\n        inBaseUnits: 1\n      },\n      degrees: {\n        inBaseUnits: Math.PI / 180\n      }\n    }\n  }\n},\n      b = function () {\n  const e = {};\n\n  for (const s in y) for (const r in y[s].units) e[r] = s;\n\n  return e;\n}();\n\nfunction _(e, s, r) {\n  return e * y[r].units[s].inBaseUnits;\n}\n\nfunction g(e, s, r) {\n  return e / y[r].units[s].inBaseUnits;\n}\n\nconst S = [\"metric\", \"imperial\", \"square-inches\", \"square-feet\", \"square-yards\", \"square-miles\", \"square-us-feet\", \"square-meters\", \"square-kilometers\", \"acres\", \"ares\", \"hectares\"],\n      w = [\"metric\", \"imperial\", \"inches\", \"feet\", \"yards\", \"miles\", \"nautical-miles\", \"us-feet\", \"meters\", \"kilometers\"];\n\nfunction j(e) {\n  return \"imperial\" === e || \"metric\" === e;\n}\n\nfunction M(e) {\n  const s = b[e];\n  if (s) return s;\n  throw new Error(\"unknown type\");\n}\n\nfunction I(e) {\n  return y[e].baseUnit;\n}\n\nfunction P(e) {\n  return I(M(e));\n}\n\nfunction C(e) {\n  let s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return s = s || M(e), y[s].baseUnit === e;\n}\n\nfunction D(e, s, r) {\n  if (s === r) return e;\n  const t = M(s);\n  if (t !== M(r)) throw new Error(\"incompatible units\");\n  const i = C(s, t) ? e : _(e, s, t);\n  return C(r, t) ? i : g(i, r, t);\n}\n\nfunction x(e, s, r) {\n  switch (r) {\n    case \"metric\":\n      return E(e, s);\n\n    case \"imperial\":\n      return O(e, s);\n\n    default:\n      return r;\n  }\n}\n\nfunction v(e, s, r) {\n  switch (r) {\n    case \"metric\":\n      return N(e, s);\n\n    case \"imperial\":\n      return F(e, s);\n\n    default:\n      return r;\n  }\n}\n\nfunction E(e, s) {\n  return D(e, s, \"meters\") < 3e3 ? \"meters\" : \"kilometers\";\n}\n\nfunction N(e, s) {\n  return D(e, s, \"meters\") < 1e5 ? \"meters\" : \"kilometers\";\n}\n\nfunction O(e, s) {\n  return D(e, s, \"feet\") < 1e3 ? \"feet\" : \"miles\";\n}\n\nfunction F(e, s) {\n  return D(e, s, \"feet\") < 1e5 ? \"feet\" : \"miles\";\n}\n\nfunction J(e, s) {\n  return D(e, s, \"square-meters\") < 3e6 ? \"square-meters\" : \"square-kilometers\";\n}\n\nfunction K(e, s) {\n  return D(e, s, \"square-feet\") < 1e6 ? \"square-feet\" : \"square-miles\";\n}\n\nfunction R(e, s, r) {\n  return D(e, s, \"meters\") / (r * Math.PI / 180);\n}\n\nfunction A(e) {\n  return B.fromJSON(e.toLowerCase()) || null;\n}\n\nfunction T(e) {\n  return B.toJSON(e) || null;\n}\n\nfunction Y(e) {\n  if (e && \"object\" == typeof e && !u(e)) return 1;\n  const s = H(e);\n  return s > 1e5 ? 1 : s;\n}\n\nfunction G(e) {\n  return H(e) >= (e instanceof t ? r(e).metersPerDegree : 1e5) ? \"meters\" : z(e);\n}\n\nfunction H(e) {\n  let s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : i.metersPerDegree;\n  return L(e, !0) || s;\n}\n\nfunction L(e) {\n  let s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;\n  let r,\n      t,\n      i = null;\n\n  if (null != e && (\"object\" == typeof e ? (r = e.wkid, t = e.wkt) : \"number\" == typeof e ? r = e : \"string\" == typeof e && (t = e)), r) {\n    if (c(r)) return n.metersPerDegree;\n    if (o(r)) return a.metersPerDegree;\n    i = U.values[U[r]], !i && s && p.has(r) && (i = f);\n  } else t && (V(t) ? i = W(d.exec(t), i) : Q(t) && (i = W(q.exec(t), i)));\n\n  return i;\n}\n\nfunction W(e, s) {\n  return e && e[1] ? $(e[1]) : s;\n}\n\nfunction $(e) {\n  return parseFloat(e.split(\",\")[1]);\n}\n\nfunction z(e) {\n  let r,\n      t,\n      i = null;\n  if (null != e && (\"object\" == typeof e ? (r = e.wkid, t = e.wkt) : \"number\" == typeof e ? r = e : \"string\" == typeof e && (t = e)), r) i = U.units[U[r]];else if (t) {\n    const e = V(t) ? d : Q(t) ? q : null;\n\n    if (e) {\n      const s = e.exec(t);\n      s && s[1] && (i = Z(s[1]));\n    }\n  }\n  return s(i) ? A(i) : null;\n}\n\nfunction Q(e) {\n  return /^GEOCCS/i.test(e);\n}\n\nfunction V(e) {\n  return /^PROJCS/i.test(e);\n}\n\nconst X = 1e-7;\n\nfunction Z(e) {\n  const s = /[\\\\\"\\\\']{1}([^\\\\\"\\\\']+)/.exec(e);\n  let r = s && s[1];\n\n  if (!r || -1 === U.units.indexOf(r)) {\n    const s = $(e);\n    r = null;\n    const t = U.values;\n\n    for (let e = 0; e < t.length; ++e) if (Math.abs(s - t[e]) < X) {\n      r = U.units[e];\n      break;\n    }\n  }\n\n  return r;\n}\n\nfunction ee(e) {\n  if (!e) return null;\n\n  switch (z(e)) {\n    case \"feet\":\n    case \"us-feet\":\n    case \"clarke-feet\":\n    case \"clarke-yards\":\n    case \"clarke-links\":\n    case \"sears-yards\":\n    case \"sears-feet\":\n    case \"sears-chains\":\n    case \"benoit-1895-b-chains\":\n    case \"indian-yards\":\n    case \"indian-1937-yards\":\n    case \"gold-coast-feet\":\n    case \"sears-1922-truncated-chains\":\n      return \"imperial\";\n\n    case \"50-kilometers\":\n    case \"150-kilometers\":\n    case \"meters\":\n      return \"metric\";\n\n    case null:\n    case void 0:\n      return null;\n  }\n\n  return null;\n}\n\nconst se = {\n  esriAcres: \"acres\",\n  esriAres: \"ares\",\n  esriHectares: \"hectares\",\n  esriSquareCentimeters: \"square-centimeters\",\n  esriSquareDecimeters: \"square-decimeters\",\n  esriSquareFeet: \"square-feet\",\n  esriSquareInches: \"square-inches\",\n  esriSquareKilometers: \"square-kilometers\",\n  esriSquareMeters: \"square-meters\",\n  esriSquareMiles: \"square-miles\",\n  esriSquareMillimeters: \"square-millimeters\",\n  esriSquareUsFeet: \"square-us-feet\",\n  esriSquareYards: \"square-yards\"\n},\n      re = {\n  esriCentimeters: \"centimeters\",\n  esriDecimeters: \"decimeters\",\n  esriFeet: \"feet\",\n  esriInches: \"inches\",\n  esriKilometers: \"kilometers\",\n  esriMeters: \"meters\",\n  esriMiles: \"miles\",\n  esriMillimeters: \"millimeters\",\n  esriNauticalMiles: \"nautical-miles\",\n  esriYards: \"yards\"\n},\n      te = e()(se),\n      ie = e()(re),\n      ne = e()({ ...se,\n  ...re\n});\nexport { te as areaUnitsJSONMap, P as baseUnitForUnit, I as baseUnitForUnitType, D as convertUnit, ee as getDefaultUnitSystem, L as getMetersPerUnit, H as getMetersPerUnitForSR, Y as getMetersPerVerticalUnitForSR, z as getUnitString, G as getVerticalUnitStringForSR, m as inchesPerMeter, C as isBaseUnit, j as isMeasurementSystem, R as lengthToDegrees, ie as lengthUnitsJSONMap, S as measurementAreaUnits, w as measurementLengthUnits, K as preferredImperialAreaUnit, O as preferredImperialLengthUnit, F as preferredImperialVerticalLengthUnit, x as preferredLengthUnit, J as preferredMetricAreaUnit, E as preferredMetricLengthUnit, N as preferredMetricVerticalLengthUnit, v as preferredVerticalLengthUnit, A as unitFromRESTJSON, T as unitToRESTJSON, M as unitType, ne as unitsJSONMap };","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/gis/node_modules/@arcgis/core/core/unitUtils.js"],"names":["strict","e","isSome","s","getReferenceEllipsoid","r","t","earth","i","mars","n","moon","a","isEarth","u","isWKIDFromMars","c","isWKIDFromMoon","o","l","m","f","radius","Math","PI","d","U","q","p","Set","B","meter","foot","foot_us","foot_clarke","yard_clarke","link_clarke","yard_sears","foot_sears","chain_sears","chain_benoit_1895_b","yard_indian","yard_indian_1937","foot_gold_coast","chain_sears_1922_truncated","h","k","y","length","baseUnit","units","millimeters","inBaseUnits","centimeters","decimeters","meters","kilometers","inches","feet","yards","miles","area","acres","ares","hectares","volume","liters","angle","radians","degrees","b","_","g","S","w","j","M","Error","I","P","C","D","x","E","O","v","N","F","J","K","R","A","fromJSON","toLowerCase","T","toJSON","Y","H","G","metersPerDegree","z","L","wkid","wkt","values","has","V","W","exec","Q","$","parseFloat","split","Z","test","X","indexOf","abs","ee","se","esriAcres","esriAres","esriHectares","esriSquareCentimeters","esriSquareDecimeters","esriSquareFeet","esriSquareInches","esriSquareKilometers","esriSquareMeters","esriSquareMiles","esriSquareMillimeters","esriSquareUsFeet","esriSquareYards","re","esriCentimeters","esriDecimeters","esriFeet","esriInches","esriKilometers","esriMeters","esriMiles","esriMillimeters","esriNauticalMiles","esriYards","te","ie","ne","areaUnitsJSONMap","baseUnitForUnit","baseUnitForUnitType","convertUnit","getDefaultUnitSystem","getMetersPerUnit","getMetersPerUnitForSR","getMetersPerVerticalUnitForSR","getUnitString","getVerticalUnitStringForSR","inchesPerMeter","isBaseUnit","isMeasurementSystem","lengthToDegrees","lengthUnitsJSONMap","measurementAreaUnits","measurementLengthUnits","preferredImperialAreaUnit","preferredImperialLengthUnit","preferredImperialVerticalLengthUnit","preferredLengthUnit","preferredMetricAreaUnit","preferredMetricLengthUnit","preferredMetricVerticalLengthUnit","preferredVerticalLengthUnit","unitFromRESTJSON","unitToRESTJSON","unitType","unitsJSONMap"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport\"./has.js\";import{strict as e}from\"./jsonMap.js\";import{isSome as s}from\"./maybe.js\";import{getReferenceEllipsoid as r}from\"../geometry/projectionEllipsoid.js\";import t from\"../geometry/SpatialReference.js\";import{earth as i,mars as n,moon as a}from\"../geometry/support/Ellipsoid.js\";import{isEarth as u,isWKIDFromMars as c,isWKIDFromMoon as o}from\"../geometry/support/spatialReferenceUtils.js\";import l from\"../geometry/support/WKIDUnitConversion.js\";const m=39.37,f=i.radius*Math.PI/200,d=/UNIT\\[([^\\]]+)\\]\\]$/i,U=l,q=/UNIT\\[([^\\]]+)\\]/i,p=new Set([4261,4305,4807,4810,4811,4812,4816,4819,4821,4901,4902,37225,104139,104140]),B=e()({meter:\"meters\",foot:\"feet\",foot_us:\"us-feet\",foot_clarke:\"clarke-feet\",yard_clarke:\"clarke-yards\",link_clarke:\"clarke-links\",yard_sears:\"sears-yards\",foot_sears:\"sears-feet\",chain_sears:\"sears-chains\",chain_benoit_1895_b:\"benoit-1895-b-chains\",yard_indian:\"indian-yards\",yard_indian_1937:\"indian-1937-yards\",foot_gold_coast:\"gold-coast-feet\",chain_sears_1922_truncated:\"sears-1922-truncated-chains\",\"50_kilometers\":\"50-kilometers\",\"150_kilometers\":\"150-kilometers\"}),h=e=>e*e,k=e=>e*e*e,y={length:{baseUnit:\"meters\",units:{millimeters:{inBaseUnits:.001},centimeters:{inBaseUnits:.01},decimeters:{inBaseUnits:.1},meters:{inBaseUnits:1},kilometers:{inBaseUnits:1e3},inches:{inBaseUnits:.0254},feet:{inBaseUnits:.3048},yards:{inBaseUnits:.9144},miles:{inBaseUnits:1609.344},\"nautical-miles\":{inBaseUnits:1852},\"us-feet\":{inBaseUnits:1200/3937}}},area:{baseUnit:\"square-meters\",units:{\"square-millimeters\":{inBaseUnits:h(.001)},\"square-centimeters\":{inBaseUnits:h(.01)},\"square-decimeters\":{inBaseUnits:h(.1)},\"square-meters\":{inBaseUnits:1},\"square-kilometers\":{inBaseUnits:h(1e3)},\"square-inches\":{inBaseUnits:h(.0254)},\"square-feet\":{inBaseUnits:h(.3048)},\"square-yards\":{inBaseUnits:h(.9144)},\"square-miles\":{inBaseUnits:h(1609.344)},\"square-us-feet\":{inBaseUnits:h(1200/3937)},acres:{inBaseUnits:.0015625*h(1609.344)},ares:{inBaseUnits:100},hectares:{inBaseUnits:1e4}}},volume:{baseUnit:\"liters\",units:{liters:{inBaseUnits:1},\"cubic-millimeters\":{inBaseUnits:1e3*k(.001)},\"cubic-centimeters\":{inBaseUnits:1e3*k(.01)},\"cubic-decimeters\":{inBaseUnits:1e3*k(.1)},\"cubic-meters\":{inBaseUnits:1e3},\"cubic-kilometers\":{inBaseUnits:1e3*k(1e3)},\"cubic-inches\":{inBaseUnits:1e3*k(.0254)},\"cubic-feet\":{inBaseUnits:1e3*k(.3048)},\"cubic-yards\":{inBaseUnits:1e3*k(.9144)},\"cubic-miles\":{inBaseUnits:1e3*k(1609.344)}}},angle:{baseUnit:\"radians\",units:{radians:{inBaseUnits:1},degrees:{inBaseUnits:Math.PI/180}}}},b=function(){const e={};for(const s in y)for(const r in y[s].units)e[r]=s;return e}();function _(e,s,r){return e*y[r].units[s].inBaseUnits}function g(e,s,r){return e/y[r].units[s].inBaseUnits}const S=[\"metric\",\"imperial\",\"square-inches\",\"square-feet\",\"square-yards\",\"square-miles\",\"square-us-feet\",\"square-meters\",\"square-kilometers\",\"acres\",\"ares\",\"hectares\"],w=[\"metric\",\"imperial\",\"inches\",\"feet\",\"yards\",\"miles\",\"nautical-miles\",\"us-feet\",\"meters\",\"kilometers\"];function j(e){return\"imperial\"===e||\"metric\"===e}function M(e){const s=b[e];if(s)return s;throw new Error(\"unknown type\")}function I(e){return y[e].baseUnit}function P(e){return I(M(e))}function C(e,s=null){return s=s||M(e),y[s].baseUnit===e}function D(e,s,r){if(s===r)return e;const t=M(s);if(t!==M(r))throw new Error(\"incompatible units\");const i=C(s,t)?e:_(e,s,t);return C(r,t)?i:g(i,r,t)}function x(e,s,r){switch(r){case\"metric\":return E(e,s);case\"imperial\":return O(e,s);default:return r}}function v(e,s,r){switch(r){case\"metric\":return N(e,s);case\"imperial\":return F(e,s);default:return r}}function E(e,s){return D(e,s,\"meters\")<3e3?\"meters\":\"kilometers\"}function N(e,s){return D(e,s,\"meters\")<1e5?\"meters\":\"kilometers\"}function O(e,s){return D(e,s,\"feet\")<1e3?\"feet\":\"miles\"}function F(e,s){return D(e,s,\"feet\")<1e5?\"feet\":\"miles\"}function J(e,s){return D(e,s,\"square-meters\")<3e6?\"square-meters\":\"square-kilometers\"}function K(e,s){return D(e,s,\"square-feet\")<1e6?\"square-feet\":\"square-miles\"}function R(e,s,r){return D(e,s,\"meters\")/(r*Math.PI/180)}function A(e){return B.fromJSON(e.toLowerCase())||null}function T(e){return B.toJSON(e)||null}function Y(e){if(e&&\"object\"==typeof e&&!u(e))return 1;const s=H(e);return s>1e5?1:s}function G(e){return H(e)>=(e instanceof t?r(e).metersPerDegree:1e5)?\"meters\":z(e)}function H(e,s=i.metersPerDegree){return L(e,!0)||s}function L(e,s=!1){let r,t,i=null;if(null!=e&&(\"object\"==typeof e?(r=e.wkid,t=e.wkt):\"number\"==typeof e?r=e:\"string\"==typeof e&&(t=e)),r){if(c(r))return n.metersPerDegree;if(o(r))return a.metersPerDegree;i=U.values[U[r]],!i&&s&&p.has(r)&&(i=f)}else t&&(V(t)?i=W(d.exec(t),i):Q(t)&&(i=W(q.exec(t),i)));return i}function W(e,s){return e&&e[1]?$(e[1]):s}function $(e){return parseFloat(e.split(\",\")[1])}function z(e){let r,t,i=null;if(null!=e&&(\"object\"==typeof e?(r=e.wkid,t=e.wkt):\"number\"==typeof e?r=e:\"string\"==typeof e&&(t=e)),r)i=U.units[U[r]];else if(t){const e=V(t)?d:Q(t)?q:null;if(e){const s=e.exec(t);s&&s[1]&&(i=Z(s[1]))}}return s(i)?A(i):null}function Q(e){return/^GEOCCS/i.test(e)}function V(e){return/^PROJCS/i.test(e)}const X=1e-7;function Z(e){const s=/[\\\\\"\\\\']{1}([^\\\\\"\\\\']+)/.exec(e);let r=s&&s[1];if(!r||-1===U.units.indexOf(r)){const s=$(e);r=null;const t=U.values;for(let e=0;e<t.length;++e)if(Math.abs(s-t[e])<X){r=U.units[e];break}}return r}function ee(e){if(!e)return null;switch(z(e)){case\"feet\":case\"us-feet\":case\"clarke-feet\":case\"clarke-yards\":case\"clarke-links\":case\"sears-yards\":case\"sears-feet\":case\"sears-chains\":case\"benoit-1895-b-chains\":case\"indian-yards\":case\"indian-1937-yards\":case\"gold-coast-feet\":case\"sears-1922-truncated-chains\":return\"imperial\";case\"50-kilometers\":case\"150-kilometers\":case\"meters\":return\"metric\";case null:case void 0:return null}return null}const se={esriAcres:\"acres\",esriAres:\"ares\",esriHectares:\"hectares\",esriSquareCentimeters:\"square-centimeters\",esriSquareDecimeters:\"square-decimeters\",esriSquareFeet:\"square-feet\",esriSquareInches:\"square-inches\",esriSquareKilometers:\"square-kilometers\",esriSquareMeters:\"square-meters\",esriSquareMiles:\"square-miles\",esriSquareMillimeters:\"square-millimeters\",esriSquareUsFeet:\"square-us-feet\",esriSquareYards:\"square-yards\"},re={esriCentimeters:\"centimeters\",esriDecimeters:\"decimeters\",esriFeet:\"feet\",esriInches:\"inches\",esriKilometers:\"kilometers\",esriMeters:\"meters\",esriMiles:\"miles\",esriMillimeters:\"millimeters\",esriNauticalMiles:\"nautical-miles\",esriYards:\"yards\"},te=e()(se),ie=e()(re),ne=e()({...se,...re});export{te as areaUnitsJSONMap,P as baseUnitForUnit,I as baseUnitForUnitType,D as convertUnit,ee as getDefaultUnitSystem,L as getMetersPerUnit,H as getMetersPerUnitForSR,Y as getMetersPerVerticalUnitForSR,z as getUnitString,G as getVerticalUnitStringForSR,m as inchesPerMeter,C as isBaseUnit,j as isMeasurementSystem,R as lengthToDegrees,ie as lengthUnitsJSONMap,S as measurementAreaUnits,w as measurementLengthUnits,K as preferredImperialAreaUnit,O as preferredImperialLengthUnit,F as preferredImperialVerticalLengthUnit,x as preferredLengthUnit,J as preferredMetricAreaUnit,E as preferredMetricLengthUnit,N as preferredMetricVerticalLengthUnit,v as preferredVerticalLengthUnit,A as unitFromRESTJSON,T as unitToRESTJSON,M as unitType,ne as unitsJSONMap};\n"]},"metadata":{},"sourceType":"module"}