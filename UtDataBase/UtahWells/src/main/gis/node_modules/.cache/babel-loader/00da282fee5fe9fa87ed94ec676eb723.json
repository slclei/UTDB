{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport { ViewingMode as e } from \"../views/ViewingMode.js\";\nimport { ForwardLinearDepth as r } from \"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";\nimport { Offset as o } from \"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";\nimport { ShaderOutput as a } from \"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutputOptions.js\";\nimport { Slice as i } from \"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";\nimport { Transform as l } from \"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";\nimport { InstancedDoublePrecision as t } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";\nimport { NormalAttribute as n, NormalAttributeType as s } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";\nimport { PositionAttribute as d } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";\nimport { SymbolColor as c } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";\nimport { TextureCoordinateAttribute as m } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";\nimport { VertexColor as g } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";\nimport { VertexNormal as v } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexNormal.glsl.js\";\nimport { VerticalOffset as p } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";\nimport { DefaultMaterialAuxiliaryPasses as u } from \"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";\nimport { ReadLinearDepth as b } from \"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js\";\nimport { ComputeNormalTexture as h } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js\";\nimport { EvaluateAmbientOcclusion as f } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";\nimport { EvaluateSceneLighting as w } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";\nimport { multipassTerrainTest as x } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";\nimport { Normals as y } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js\";\nimport { PhysicallyBasedRendering as C } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";\nimport { PhysicallyBasedRenderingParameters as L, PBRMode as j } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";\nimport { ReadShadowMap as M } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";\nimport { VisualVariables as T } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";\nimport { symbolAlphaCutoff as O, DiscardOrAdjustAlpha as E } from \"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";\nimport { HeaderComment as A } from \"../views/3d/webgl-engine/core/shaderLibrary/util/HeaderComment.glsl.js\";\nimport { MixExternalColor as S } from \"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";\nimport { glsl as P } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as _ } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { VertexAttribute as N } from \"../views/3d/webgl-engine/lib/VertexAttribute.js\";\n\nfunction $($) {\n  const D = new _(),\n        B = D.vertex.code,\n        F = D.fragment.code;\n  D.include(A, {\n    name: \"Default Material Shader\",\n    output: $.output\n  }), D.vertex.uniforms.add(\"proj\", \"mat4\").add(\"view\", \"mat4\").add(\"cameraPosition\", \"vec3\").add(\"localOrigin\", \"vec3\");\n  const V = $.hasModelTransformation;\n  return V && D.vertex.uniforms.add(\"model\", \"mat4\"), D.include(d), D.varyings.add(\"vpos\", \"vec3\"), D.include(T, $), D.include(t, $), D.include(p, $), $.output !== a.Color && $.output !== a.Alpha || (D.include(n, $), D.include(l, {\n    linearDepth: !1,\n    hasModelTransformation: V\n  }), $.normalType === s.Attribute && $.offsetBackfaces && D.include(o), D.include(h, $), D.include(v, $), $.instancedColor && D.attributes.add(N.INSTANCECOLOR, \"vec4\"), D.varyings.add(\"localvpos\", \"vec3\"), D.include(m, $), D.include(r, $), D.include(c, $), D.include(g, $), D.vertex.uniforms.add(\"externalColor\", \"vec4\"), D.varyings.add(\"vcolorExt\", \"vec4\"), $.multipassTerrainEnabled && D.varyings.add(\"depth\", \"float\"), B.add(P`\n      void main(void) {\n        forwardNormalizedVertexColor();\n        vcolorExt = externalColor;\n        ${$.instancedColor ? \"vcolorExt *= instanceColor;\" : \"\"}\n        vcolorExt *= vvColor();\n        vcolorExt *= getSymbolColor();\n        forwardColorMixMode();\n\n        if (vcolorExt.a < ${P.float(O)}) {\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n        }\n        else {\n          vpos = calculateVPos();\n          localvpos = vpos - view[3].xyz;\n          vpos = subtractOrigin(vpos);\n          ${$.normalType === s.Attribute ? P`\n          vNormalWorld = dpNormal(vvLocalNormal(normalModel()));` : \"\"}\n          vpos = addVerticalOffset(vpos, localOrigin);\n          ${$.vertexTangents ? \"vTangent = dpTransformVertexTangent(tangent);\" : \"\"}\n          gl_Position = transformPosition(proj, view, ${V ? \"model,\" : \"\"} vpos);\n          ${$.normalType === s.Attribute && $.offsetBackfaces ? \"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);\" : \"\"}\n        }\n\n        ${$.multipassTerrainEnabled ? \"depth = (view * vec4(vpos, 1.0)).z;\" : \"\"}\n        forwardLinearDepth();\n        forwardTextureCoordinates();\n      }\n    `)), $.output === a.Alpha && (D.include(i, $), D.include(E, $), $.multipassTerrainEnabled && (D.fragment.include(b), D.include(x, $)), D.fragment.uniforms.add(\"cameraPosition\", \"vec3\").add(\"localOrigin\", \"vec3\").add(\"opacity\", \"float\").add(\"layerOpacity\", \"float\"), $.hasColorTexture && D.fragment.uniforms.add(\"tex\", \"sampler2D\"), D.fragment.include(S), F.add(P`\n      void main() {\n        discardBySlice(vpos);\n        ${$.multipassTerrainEnabled ? \"terrainDepthTest(gl_FragCoord, depth);\" : \"\"}\n        ${$.hasColorTexture ? P`\n        vec4 texColor = texture2D(tex, vuv0);\n        ${$.textureAlphaPremultiplied ? \"texColor.rgb /= texColor.a;\" : \"\"}\n        discardOrAdjustAlpha(texColor);` : P`vec4 texColor = vec4(1.0);`}\n        ${$.attributeColor ? P`\n        float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : P`\n        float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n        `}\n        gl_FragColor = vec4(opacity_);\n      }\n    `)), $.output === a.Color && (D.include(i, $), D.include(w, $), D.include(f, $), D.include(E, $), $.receiveShadows && D.include(M, $), $.multipassTerrainEnabled && (D.fragment.include(b), D.include(x, $)), D.fragment.uniforms.add(\"cameraPosition\", \"vec3\").add(\"localOrigin\", \"vec3\").add(\"ambient\", \"vec3\").add(\"diffuse\", \"vec3\").add(\"opacity\", \"float\").add(\"layerOpacity\", \"float\"), $.hasColorTexture && D.fragment.uniforms.add(\"tex\", \"sampler2D\"), D.include(L, $), D.include(C, $), D.fragment.include(S), D.include(y, $), F.add(P`\n      void main() {\n        discardBySlice(vpos);\n        ${$.multipassTerrainEnabled ? \"terrainDepthTest(gl_FragCoord, depth);\" : \"\"}\n        ${$.hasColorTexture ? P`\n        vec4 texColor = texture2D(tex, vuv0);\n        ${$.textureAlphaPremultiplied ? \"texColor.rgb /= texColor.a;\" : \"\"}\n        discardOrAdjustAlpha(texColor);` : P`vec4 texColor = vec4(1.0);`}\n        shadingParams.viewDirection = normalize(vpos - cameraPosition);\n        ${$.normalType === s.ScreenDerivative ? P`\n        vec3 normal = screenDerivativeNormal(localvpos);` : P`\n        shadingParams.normalView = vNormalWorld;\n        vec3 normal = shadingNormal(shadingParams);`}\n        ${$.pbrMode === j.Normal ? \"applyPBRFactors();\" : \"\"}\n        float ssao = evaluateAmbientOcclusionInverse();\n        ssao *= getBakedOcclusion();\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\n        vec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n        ${$.receiveShadows ? \"float shadow = readShadowMap(vpos, linearDepth);\" : $.viewingMode === e.Global ? \"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);\" : \"float shadow = 0.0;\"}\n        vec3 matColor = max(ambient, diffuse);\n        ${$.attributeColor ? P`\n        vec3 albedo_ = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : P`\n        vec3 albedo_ = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n        `}\n        ${$.hasNormalTexture ? P`\n              mat3 tangentSpace = ${$.vertexTangents ? \"computeTangentSpace(normal);\" : \"computeTangentSpace(normal, vpos, vuv0);\"}\n              vec3 shadedNormal = computeTextureNormal(tangentSpace, vuv0);` : \"vec3 shadedNormal = normal;\"}\n        ${$.pbrMode === j.Normal || $.pbrMode === j.Schematic ? $.viewingMode === e.Global ? P`vec3 normalGround = normalize(vpos + localOrigin);` : P`vec3 normalGround = vec3(0.0, 0.0, 1.0);` : P``}\n        ${$.pbrMode === j.Normal || $.pbrMode === j.Schematic ? P`\n            float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * lightingMainIntensity[2];\n            vec3 shadedColor = evaluateSceneLightingPBR(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight, shadingParams.viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);` : \"vec3 shadedColor = evaluateSceneLighting(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight);\"}\n        gl_FragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${$.oitEnabled ? \"gl_FragColor = premultiplyAlpha(gl_FragColor);\" : \"\"}\n      }\n    `)), D.include(u, $), D;\n}\n\nconst D = Object.freeze({\n  __proto__: null,\n  build: $\n});\nexport { D, $ as b };","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/gis/node_modules/@arcgis/core/chunks/DefaultMaterial.glsl.js"],"names":["ViewingMode","e","ForwardLinearDepth","r","Offset","o","ShaderOutput","a","Slice","i","Transform","l","InstancedDoublePrecision","t","NormalAttribute","n","NormalAttributeType","s","PositionAttribute","d","SymbolColor","c","TextureCoordinateAttribute","m","VertexColor","g","VertexNormal","v","VerticalOffset","p","DefaultMaterialAuxiliaryPasses","u","ReadLinearDepth","b","ComputeNormalTexture","h","EvaluateAmbientOcclusion","f","EvaluateSceneLighting","w","multipassTerrainTest","x","Normals","y","PhysicallyBasedRendering","C","PhysicallyBasedRenderingParameters","L","PBRMode","j","ReadShadowMap","M","VisualVariables","T","symbolAlphaCutoff","O","DiscardOrAdjustAlpha","E","HeaderComment","A","MixExternalColor","S","glsl","P","ShaderBuilder","_","VertexAttribute","N","$","D","B","vertex","code","F","fragment","include","name","output","uniforms","add","V","hasModelTransformation","varyings","Color","Alpha","linearDepth","normalType","Attribute","offsetBackfaces","instancedColor","attributes","INSTANCECOLOR","multipassTerrainEnabled","float","vertexTangents","hasColorTexture","textureAlphaPremultiplied","attributeColor","receiveShadows","ScreenDerivative","pbrMode","Normal","viewingMode","Global","hasNormalTexture","Schematic","oitEnabled","Object","freeze","__proto__","build"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport{ViewingMode as e}from\"../views/ViewingMode.js\";import{ForwardLinearDepth as r}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{Offset as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";import{ShaderOutput as a}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutputOptions.js\";import{Slice as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as l}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{InstancedDoublePrecision as t}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";import{NormalAttribute as n,NormalAttributeType as s}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";import{PositionAttribute as d}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";import{SymbolColor as c}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";import{TextureCoordinateAttribute as m}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{VertexColor as g}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{VertexNormal as v}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexNormal.glsl.js\";import{VerticalOffset as p}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";import{DefaultMaterialAuxiliaryPasses as u}from\"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";import{ReadLinearDepth as b}from\"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js\";import{ComputeNormalTexture as h}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js\";import{EvaluateAmbientOcclusion as f}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";import{EvaluateSceneLighting as w}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{multipassTerrainTest as x}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{Normals as y}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js\";import{PhysicallyBasedRendering as C}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";import{PhysicallyBasedRenderingParameters as L,PBRMode as j}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMap as M}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{VisualVariables as T}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{symbolAlphaCutoff as O,DiscardOrAdjustAlpha as E}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";import{HeaderComment as A}from\"../views/3d/webgl-engine/core/shaderLibrary/util/HeaderComment.glsl.js\";import{MixExternalColor as S}from\"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";import{glsl as P}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as _}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{VertexAttribute as N}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";function $($){const D=new _,B=D.vertex.code,F=D.fragment.code;D.include(A,{name:\"Default Material Shader\",output:$.output}),D.vertex.uniforms.add(\"proj\",\"mat4\").add(\"view\",\"mat4\").add(\"cameraPosition\",\"vec3\").add(\"localOrigin\",\"vec3\");const V=$.hasModelTransformation;return V&&D.vertex.uniforms.add(\"model\",\"mat4\"),D.include(d),D.varyings.add(\"vpos\",\"vec3\"),D.include(T,$),D.include(t,$),D.include(p,$),$.output!==a.Color&&$.output!==a.Alpha||(D.include(n,$),D.include(l,{linearDepth:!1,hasModelTransformation:V}),$.normalType===s.Attribute&&$.offsetBackfaces&&D.include(o),D.include(h,$),D.include(v,$),$.instancedColor&&D.attributes.add(N.INSTANCECOLOR,\"vec4\"),D.varyings.add(\"localvpos\",\"vec3\"),D.include(m,$),D.include(r,$),D.include(c,$),D.include(g,$),D.vertex.uniforms.add(\"externalColor\",\"vec4\"),D.varyings.add(\"vcolorExt\",\"vec4\"),$.multipassTerrainEnabled&&D.varyings.add(\"depth\",\"float\"),B.add(P`\n      void main(void) {\n        forwardNormalizedVertexColor();\n        vcolorExt = externalColor;\n        ${$.instancedColor?\"vcolorExt *= instanceColor;\":\"\"}\n        vcolorExt *= vvColor();\n        vcolorExt *= getSymbolColor();\n        forwardColorMixMode();\n\n        if (vcolorExt.a < ${P.float(O)}) {\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n        }\n        else {\n          vpos = calculateVPos();\n          localvpos = vpos - view[3].xyz;\n          vpos = subtractOrigin(vpos);\n          ${$.normalType===s.Attribute?P`\n          vNormalWorld = dpNormal(vvLocalNormal(normalModel()));`:\"\"}\n          vpos = addVerticalOffset(vpos, localOrigin);\n          ${$.vertexTangents?\"vTangent = dpTransformVertexTangent(tangent);\":\"\"}\n          gl_Position = transformPosition(proj, view, ${V?\"model,\":\"\"} vpos);\n          ${$.normalType===s.Attribute&&$.offsetBackfaces?\"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);\":\"\"}\n        }\n\n        ${$.multipassTerrainEnabled?\"depth = (view * vec4(vpos, 1.0)).z;\":\"\"}\n        forwardLinearDepth();\n        forwardTextureCoordinates();\n      }\n    `)),$.output===a.Alpha&&(D.include(i,$),D.include(E,$),$.multipassTerrainEnabled&&(D.fragment.include(b),D.include(x,$)),D.fragment.uniforms.add(\"cameraPosition\",\"vec3\").add(\"localOrigin\",\"vec3\").add(\"opacity\",\"float\").add(\"layerOpacity\",\"float\"),$.hasColorTexture&&D.fragment.uniforms.add(\"tex\",\"sampler2D\"),D.fragment.include(S),F.add(P`\n      void main() {\n        discardBySlice(vpos);\n        ${$.multipassTerrainEnabled?\"terrainDepthTest(gl_FragCoord, depth);\":\"\"}\n        ${$.hasColorTexture?P`\n        vec4 texColor = texture2D(tex, vuv0);\n        ${$.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n        discardOrAdjustAlpha(texColor);`:P`vec4 texColor = vec4(1.0);`}\n        ${$.attributeColor?P`\n        float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:P`\n        float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n        `}\n        gl_FragColor = vec4(opacity_);\n      }\n    `)),$.output===a.Color&&(D.include(i,$),D.include(w,$),D.include(f,$),D.include(E,$),$.receiveShadows&&D.include(M,$),$.multipassTerrainEnabled&&(D.fragment.include(b),D.include(x,$)),D.fragment.uniforms.add(\"cameraPosition\",\"vec3\").add(\"localOrigin\",\"vec3\").add(\"ambient\",\"vec3\").add(\"diffuse\",\"vec3\").add(\"opacity\",\"float\").add(\"layerOpacity\",\"float\"),$.hasColorTexture&&D.fragment.uniforms.add(\"tex\",\"sampler2D\"),D.include(L,$),D.include(C,$),D.fragment.include(S),D.include(y,$),F.add(P`\n      void main() {\n        discardBySlice(vpos);\n        ${$.multipassTerrainEnabled?\"terrainDepthTest(gl_FragCoord, depth);\":\"\"}\n        ${$.hasColorTexture?P`\n        vec4 texColor = texture2D(tex, vuv0);\n        ${$.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n        discardOrAdjustAlpha(texColor);`:P`vec4 texColor = vec4(1.0);`}\n        shadingParams.viewDirection = normalize(vpos - cameraPosition);\n        ${$.normalType===s.ScreenDerivative?P`\n        vec3 normal = screenDerivativeNormal(localvpos);`:P`\n        shadingParams.normalView = vNormalWorld;\n        vec3 normal = shadingNormal(shadingParams);`}\n        ${$.pbrMode===j.Normal?\"applyPBRFactors();\":\"\"}\n        float ssao = evaluateAmbientOcclusionInverse();\n        ssao *= getBakedOcclusion();\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\n        vec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n        ${$.receiveShadows?\"float shadow = readShadowMap(vpos, linearDepth);\":$.viewingMode===e.Global?\"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);\":\"float shadow = 0.0;\"}\n        vec3 matColor = max(ambient, diffuse);\n        ${$.attributeColor?P`\n        vec3 albedo_ = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:P`\n        vec3 albedo_ = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n        `}\n        ${$.hasNormalTexture?P`\n              mat3 tangentSpace = ${$.vertexTangents?\"computeTangentSpace(normal);\":\"computeTangentSpace(normal, vpos, vuv0);\"}\n              vec3 shadedNormal = computeTextureNormal(tangentSpace, vuv0);`:\"vec3 shadedNormal = normal;\"}\n        ${$.pbrMode===j.Normal||$.pbrMode===j.Schematic?$.viewingMode===e.Global?P`vec3 normalGround = normalize(vpos + localOrigin);`:P`vec3 normalGround = vec3(0.0, 0.0, 1.0);`:P``}\n        ${$.pbrMode===j.Normal||$.pbrMode===j.Schematic?P`\n            float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * lightingMainIntensity[2];\n            vec3 shadedColor = evaluateSceneLightingPBR(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight, shadingParams.viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);`:\"vec3 shadedColor = evaluateSceneLighting(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight);\"}\n        gl_FragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${$.oitEnabled?\"gl_FragColor = premultiplyAlpha(gl_FragColor);\":\"\"}\n      }\n    `)),D.include(u,$),D}const D=Object.freeze({__proto__:null,build:$});export{D,$ as b};\n"]},"metadata":{},"sourceType":"module"}