{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport n from \"../rest/support/ClassBreaksDefinition.js\";\nimport { createGenerateRendererClassBreaks as e } from \"../rest/support/generateRendererUtils.js\";\nconst t = \"equal-interval\",\n      l = 1,\n      i = 5,\n      a = 10,\n      r = /\\s*(\\+|-)?((\\d+(\\.\\d+)?)|(\\.\\d+))\\s*/gi,\n      o = new Set([\"esriFieldTypeInteger\", \"esriFieldTypeSmallInteger\", \"esriFieldTypeSingle\", \"esriFieldTypeDouble\"]),\n      u = [\"min\", \"max\", \"avg\", \"stddev\", \"count\", \"sum\", \"variance\", \"nullcount\", \"median\"];\n\nfunction s(n) {\n  const e = null != n.normalizationField || null != n.normalizationType,\n        t = null != n.minValue || null != n.maxValue,\n        l = !!n.sqlExpression && n.supportsSQLExpression;\n  return !e && !t && !l;\n}\n\nfunction m(n) {\n  const e = n.returnDistinct ? [...new Set(n.values)] : n.values,\n        t = e.filter(n => null != n).length,\n        l = {\n    count: t\n  };\n  return n.supportsNullCount && (l.nullcount = e.length - t), n.percentileParams && (l.median = d(e, n.percentileParams)), l;\n}\n\nfunction c(n) {\n  const {\n    values: e,\n    useSampleStdDev: t,\n    supportsNullCount: l\n  } = n;\n  let i = Number.POSITIVE_INFINITY,\n      a = Number.NEGATIVE_INFINITY,\n      r = null,\n      o = null,\n      u = null,\n      s = null,\n      m = 0;\n  const c = null == n.minValue ? -1 / 0 : n.minValue,\n        f = null == n.maxValue ? 1 / 0 : n.maxValue;\n\n  for (const d of e) Number.isFinite(d) ? d >= c && d <= f && (r += d, i = Math.min(i, d), a = Math.max(a, d), m++) : \"string\" == typeof d && m++;\n\n  if (m && null != r) {\n    o = r / m;\n    let n = 0;\n\n    for (const t of e) Number.isFinite(t) && t >= c && t <= f && (n += (t - o) ** 2);\n\n    s = t ? m > 1 ? n / (m - 1) : 0 : m > 0 ? n / m : 0, u = Math.sqrt(s);\n  } else i = null, a = null;\n\n  const p = {\n    avg: o,\n    count: m,\n    max: a,\n    min: i,\n    stddev: u,\n    sum: r,\n    variance: s\n  };\n  return l && (p.nullcount = e.length - m), n.percentileParams && (p.median = d(e, n.percentileParams)), p;\n}\n\nfunction d(n, e) {\n  const {\n    fieldType: t,\n    value: l,\n    orderBy: i,\n    isDiscrete: a\n  } = e,\n        r = f(t, \"desc\" === i);\n  if (0 === (n = [...n].filter(n => null != n).sort((n, e) => r(n, e))).length) return null;\n  if (l <= 0) return n[0];\n  if (l >= 1) return n[n.length - 1];\n  const o = (n.length - 1) * l,\n        u = Math.floor(o),\n        s = u + 1,\n        m = o % 1,\n        c = n[u],\n        d = n[s];\n  return s >= n.length || a || \"string\" == typeof c || \"string\" == typeof d ? c : c * (1 - m) + d * m;\n}\n\nfunction f(n, e) {\n  const t = e ? 1 : -1,\n        l = v(e),\n        i = p(e);\n  if (!(!!n && [\"esriFieldTypeDate\", \"esriFieldTypeString\", \"esriFieldTypeGUID\", \"esriFieldTypeGlobalID\", ...o].includes(n))) return (n, e) => \"number\" == typeof n && \"number\" == typeof e ? l(n, e) : \"string\" == typeof n && \"string\" == typeof e ? i(n, e) : t;\n  if (\"esriFieldTypeDate\" === n) return (n, e) => {\n    const i = new Date(n).getTime(),\n          a = new Date(e).getTime();\n    return isNaN(i) || isNaN(a) ? t : l(i, a);\n  };\n  if (o.has(n)) return (n, e) => l(n, e);\n  if (\"esriFieldTypeString\" === n) return (n, e) => i(n, e);\n\n  if (\"esriFieldTypeGUID\" === n || \"esriFieldTypeGlobalID\" === n) {\n    const n = p(e);\n    return (e, t) => n(b(e), b(t));\n  }\n\n  return e ? (n, e) => 1 : (n, e) => -1;\n}\n\nfunction p(n) {\n  return n ? (n, e) => {\n    var t, l;\n    return (n = null == (t = n) ? void 0 : t.toUpperCase()) > (e = null == (l = e) ? void 0 : l.toUpperCase()) ? -1 : n < e ? 1 : 0;\n  } : (n, e) => {\n    var t, l;\n    return (n = null == (t = n) ? void 0 : t.toUpperCase()) < (e = null == (l = e) ? void 0 : l.toUpperCase()) ? -1 : n > e ? 1 : 0;\n  };\n}\n\nfunction v(n) {\n  return n ? (n, e) => e - n : (n, e) => n - e;\n}\n\nfunction b(n) {\n  return n.substr(24, 12) + n.substr(19, 4) + n.substr(16, 2) + n.substr(14, 2) + n.substr(11, 2) + n.substr(9, 2) + n.substr(6, 2) + n.substr(4, 2) + n.substr(2, 2) + n.substr(0, 2);\n}\n\nfunction V(n, e) {\n  let t;\n\n  for (t in n) u.indexOf(t) > -1 && (Number.isFinite(n[t]) || (n[t] = null));\n\n  return e ? ([\"avg\", \"stddev\", \"variance\"].forEach(e => {\n    null != n[e] && (n[e] = Math.ceil(n[e]));\n  }), n) : n;\n}\n\nfunction g(n) {\n  const e = {};\n\n  for (let t of n) (null == t || \"string\" == typeof t && \"\" === t.trim()) && (t = null), null == e[t] ? e[t] = {\n    count: 1,\n    data: t\n  } : e[t].count++;\n\n  return {\n    count: e\n  };\n}\n\nfunction h(n, e, t) {\n  const l = n.count,\n        i = [];\n\n  if (t && e && \"coded-value\" === e.type) {\n    e.codedValues.forEach(n => {\n      const e = n.code;\n      l.hasOwnProperty(e) || (l[e] = {\n        data: e,\n        count: 0\n      });\n    });\n  }\n\n  for (const a in l) {\n    const n = l[a];\n    i.push({\n      value: n.data,\n      count: n.count,\n      label: n.label\n    });\n  }\n\n  return {\n    uniqueValueInfos: i\n  };\n}\n\nfunction T(n, e, t, l) {\n  let i = null;\n\n  switch (e) {\n    case \"log\":\n      0 !== n && (i = Math.log(n) * Math.LOG10E);\n      break;\n\n    case \"percent-of-total\":\n      Number.isFinite(l) && 0 !== l && (i = n / l * 100);\n      break;\n\n    case \"field\":\n      Number.isFinite(t) && 0 !== t && (i = n / t);\n      break;\n\n    case \"natural-log\":\n      n > 0 && (i = Math.log(n));\n      break;\n\n    case \"square-root\":\n      n > 0 && (i = n ** .5);\n  }\n\n  return i;\n}\n\nfunction y(n, t) {\n  const l = F({\n    field: t.field,\n    normalizationType: t.normalizationType,\n    normalizationField: t.normalizationField,\n    classificationMethod: t.classificationMethod,\n    standardDeviationInterval: t.standardDeviationInterval,\n    breakCount: t.numClasses || i\n  });\n  return n = x(n, t.minValue, t.maxValue), e({\n    definition: l,\n    values: n,\n    normalizationTotal: t.normalizationTotal\n  });\n}\n\nfunction x(n, e, t) {\n  return e = null == e ? -1 / 0 : e, t = null == t ? 1 / 0 : t, n.filter(n => Number.isFinite(n) && n >= e && n <= t);\n}\n\nfunction F(e) {\n  const i = e.field,\n        a = e.classificationMethod || t,\n        r = e.normalizationType,\n        o = e.normalizationField,\n        u = new n();\n  return u.classificationField = i, u.breakCount = e.breakCount, u.classificationMethod = a, u.standardDeviationInterval = \"standard-deviation\" === a ? e.standardDeviationInterval || l : void 0, u.normalizationType = r, u.normalizationField = \"field\" === r ? o : void 0, u;\n}\n\nfunction D(n, e) {\n  let t = n.classBreaks;\n  const l = t.length,\n        i = t[0].minValue,\n        a = t[l - 1].maxValue,\n        o = \"standard-deviation\" === e,\n        u = r;\n  return t = t.map(n => {\n    const e = n.label,\n          t = {\n      minValue: n.minValue,\n      maxValue: n.maxValue,\n      label: e\n    };\n\n    if (o && e) {\n      const n = e.match(u).map(n => +n.trim());\n      2 === n.length ? (t.minStdDev = n[0], t.maxStdDev = n[1], n[0] < 0 && n[1] > 0 && (t.hasAvg = !0)) : 1 === n.length && (e.includes(\"<\") ? (t.minStdDev = null, t.maxStdDev = n[0]) : e.includes(\">\") && (t.minStdDev = n[0], t.maxStdDev = null));\n    }\n\n    return t;\n  }), {\n    minValue: i,\n    maxValue: a,\n    classBreakInfos: t,\n    normalizationTotal: n.normalizationTotal\n  };\n}\n\nfunction z(n, e) {\n  const {\n    min: t,\n    max: l,\n    intervals: i\n  } = I(n, e),\n        a = i.map((n, e) => ({\n    minValue: i[e][0],\n    maxValue: i[e][1],\n    count: 0\n  }));\n\n  for (const r of n) if (null != r && r >= t && r <= l) {\n    const n = N(i, r);\n    n > -1 && a[n].count++;\n  }\n\n  return {\n    bins: a,\n    minValue: t,\n    maxValue: l,\n    normalizationTotal: e.normalizationTotal\n  };\n}\n\nfunction I(n, e) {\n  const {\n    field: t,\n    classificationMethod: l,\n    standardDeviationInterval: i,\n    normalizationType: r,\n    normalizationField: o,\n    normalizationTotal: u,\n    minValue: m,\n    maxValue: d\n  } = e,\n        f = e.numBins || a;\n  let p = null,\n      v = null,\n      b = null;\n\n  if ((!l || \"equal-interval\" === l) && !r) {\n    if (null != m && null != d) p = m, v = d;else {\n      const e = c({\n        values: n,\n        minValue: m,\n        maxValue: d,\n        useSampleStdDev: !r,\n        supportsNullCount: s({\n          normalizationType: r,\n          normalizationField: o,\n          minValue: m,\n          maxValue: d\n        })\n      });\n      p = e.min, v = e.max;\n    }\n    b = S(p, v, f);\n  } else {\n    const {\n      classBreaks: e\n    } = y(n, {\n      field: t,\n      normalizationType: r,\n      normalizationField: o,\n      normalizationTotal: u,\n      classificationMethod: l,\n      standardDeviationInterval: i,\n      minValue: m,\n      maxValue: d,\n      numClasses: f\n    });\n    p = e[0].minValue, v = e[e.length - 1].maxValue, b = e.map(n => [n.minValue, n.maxValue]);\n  }\n\n  return {\n    min: p,\n    max: v,\n    intervals: b\n  };\n}\n\nfunction N(n, e) {\n  let t = -1;\n\n  for (let l = n.length - 1; l >= 0; l--) {\n    if (e >= n[l][0]) {\n      t = l;\n      break;\n    }\n  }\n\n  return t;\n}\n\nfunction S(n, e, t) {\n  const l = (e - n) / t,\n        i = [];\n  let a,\n      r = n;\n\n  for (let o = 1; o <= t; o++) a = r + l, a = Number(a.toFixed(16)), i.push([r, o === t ? e : a]), r = a;\n\n  return i;\n}\n\nexport { y as calculateClassBreaks, z as calculateHistogram, d as calculatePercentile, c as calculateStatistics, m as calculateStringStatistics, g as calculateUniqueValuesCount, F as createClassBreaksDefinition, h as createUVResult, f as getAttributeComparator, S as getEqualIntervalBins, T as getNormalizedValue, s as isNullCountSupported, V as processSummaryStatisticsResult, D as resolveCBResult, u as statisticTypes };","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/gis/node_modules/@arcgis/core/statistics/utils.js"],"names":["n","createGenerateRendererClassBreaks","e","t","l","i","a","r","o","Set","u","s","normalizationField","normalizationType","minValue","maxValue","sqlExpression","supportsSQLExpression","m","returnDistinct","values","filter","length","count","supportsNullCount","nullcount","percentileParams","median","d","c","useSampleStdDev","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","f","isFinite","Math","min","max","sqrt","p","avg","stddev","sum","variance","fieldType","value","orderBy","isDiscrete","sort","floor","v","includes","Date","getTime","isNaN","has","b","toUpperCase","substr","V","indexOf","forEach","ceil","g","trim","data","h","type","codedValues","code","hasOwnProperty","push","label","uniqueValueInfos","T","log","LOG10E","y","F","field","classificationMethod","standardDeviationInterval","breakCount","numClasses","x","definition","normalizationTotal","classificationField","D","classBreaks","map","match","minStdDev","maxStdDev","hasAvg","classBreakInfos","z","intervals","I","N","bins","numBins","S","toFixed","calculateClassBreaks","calculateHistogram","calculatePercentile","calculateStatistics","calculateStringStatistics","calculateUniqueValuesCount","createClassBreaksDefinition","createUVResult","getAttributeComparator","getEqualIntervalBins","getNormalizedValue","isNullCountSupported","processSummaryStatisticsResult","resolveCBResult","statisticTypes"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport n from\"../rest/support/ClassBreaksDefinition.js\";import{createGenerateRendererClassBreaks as e}from\"../rest/support/generateRendererUtils.js\";const t=\"equal-interval\",l=1,i=5,a=10,r=/\\s*(\\+|-)?((\\d+(\\.\\d+)?)|(\\.\\d+))\\s*/gi,o=new Set([\"esriFieldTypeInteger\",\"esriFieldTypeSmallInteger\",\"esriFieldTypeSingle\",\"esriFieldTypeDouble\"]),u=[\"min\",\"max\",\"avg\",\"stddev\",\"count\",\"sum\",\"variance\",\"nullcount\",\"median\"];function s(n){const e=null!=n.normalizationField||null!=n.normalizationType,t=null!=n.minValue||null!=n.maxValue,l=!!n.sqlExpression&&n.supportsSQLExpression;return!e&&!t&&!l}function m(n){const e=n.returnDistinct?[...new Set(n.values)]:n.values,t=e.filter((n=>null!=n)).length,l={count:t};return n.supportsNullCount&&(l.nullcount=e.length-t),n.percentileParams&&(l.median=d(e,n.percentileParams)),l}function c(n){const{values:e,useSampleStdDev:t,supportsNullCount:l}=n;let i=Number.POSITIVE_INFINITY,a=Number.NEGATIVE_INFINITY,r=null,o=null,u=null,s=null,m=0;const c=null==n.minValue?-1/0:n.minValue,f=null==n.maxValue?1/0:n.maxValue;for(const d of e)Number.isFinite(d)?d>=c&&d<=f&&(r+=d,i=Math.min(i,d),a=Math.max(a,d),m++):\"string\"==typeof d&&m++;if(m&&null!=r){o=r/m;let n=0;for(const t of e)Number.isFinite(t)&&t>=c&&t<=f&&(n+=(t-o)**2);s=t?m>1?n/(m-1):0:m>0?n/m:0,u=Math.sqrt(s)}else i=null,a=null;const p={avg:o,count:m,max:a,min:i,stddev:u,sum:r,variance:s};return l&&(p.nullcount=e.length-m),n.percentileParams&&(p.median=d(e,n.percentileParams)),p}function d(n,e){const{fieldType:t,value:l,orderBy:i,isDiscrete:a}=e,r=f(t,\"desc\"===i);if(0===(n=[...n].filter((n=>null!=n)).sort(((n,e)=>r(n,e)))).length)return null;if(l<=0)return n[0];if(l>=1)return n[n.length-1];const o=(n.length-1)*l,u=Math.floor(o),s=u+1,m=o%1,c=n[u],d=n[s];return s>=n.length||a||\"string\"==typeof c||\"string\"==typeof d?c:c*(1-m)+d*m}function f(n,e){const t=e?1:-1,l=v(e),i=p(e);if(!(!!n&&[\"esriFieldTypeDate\",\"esriFieldTypeString\",\"esriFieldTypeGUID\",\"esriFieldTypeGlobalID\",...o].includes(n)))return(n,e)=>\"number\"==typeof n&&\"number\"==typeof e?l(n,e):\"string\"==typeof n&&\"string\"==typeof e?i(n,e):t;if(\"esriFieldTypeDate\"===n)return(n,e)=>{const i=new Date(n).getTime(),a=new Date(e).getTime();return isNaN(i)||isNaN(a)?t:l(i,a)};if(o.has(n))return(n,e)=>l(n,e);if(\"esriFieldTypeString\"===n)return(n,e)=>i(n,e);if(\"esriFieldTypeGUID\"===n||\"esriFieldTypeGlobalID\"===n){const n=p(e);return(e,t)=>n(b(e),b(t))}return e?(n,e)=>1:(n,e)=>-1}function p(n){return n?(n,e)=>{var t,l;return(n=null==(t=n)?void 0:t.toUpperCase())>(e=null==(l=e)?void 0:l.toUpperCase())?-1:n<e?1:0}:(n,e)=>{var t,l;return(n=null==(t=n)?void 0:t.toUpperCase())<(e=null==(l=e)?void 0:l.toUpperCase())?-1:n>e?1:0}}function v(n){return n?(n,e)=>e-n:(n,e)=>n-e}function b(n){return n.substr(24,12)+n.substr(19,4)+n.substr(16,2)+n.substr(14,2)+n.substr(11,2)+n.substr(9,2)+n.substr(6,2)+n.substr(4,2)+n.substr(2,2)+n.substr(0,2)}function V(n,e){let t;for(t in n)u.indexOf(t)>-1&&(Number.isFinite(n[t])||(n[t]=null));return e?([\"avg\",\"stddev\",\"variance\"].forEach((e=>{null!=n[e]&&(n[e]=Math.ceil(n[e]))})),n):n}function g(n){const e={};for(let t of n)(null==t||\"string\"==typeof t&&\"\"===t.trim())&&(t=null),null==e[t]?e[t]={count:1,data:t}:e[t].count++;return{count:e}}function h(n,e,t){const l=n.count,i=[];if(t&&e&&\"coded-value\"===e.type){e.codedValues.forEach((n=>{const e=n.code;l.hasOwnProperty(e)||(l[e]={data:e,count:0})}))}for(const a in l){const n=l[a];i.push({value:n.data,count:n.count,label:n.label})}return{uniqueValueInfos:i}}function T(n,e,t,l){let i=null;switch(e){case\"log\":0!==n&&(i=Math.log(n)*Math.LOG10E);break;case\"percent-of-total\":Number.isFinite(l)&&0!==l&&(i=n/l*100);break;case\"field\":Number.isFinite(t)&&0!==t&&(i=n/t);break;case\"natural-log\":n>0&&(i=Math.log(n));break;case\"square-root\":n>0&&(i=n**.5)}return i}function y(n,t){const l=F({field:t.field,normalizationType:t.normalizationType,normalizationField:t.normalizationField,classificationMethod:t.classificationMethod,standardDeviationInterval:t.standardDeviationInterval,breakCount:t.numClasses||i});return n=x(n,t.minValue,t.maxValue),e({definition:l,values:n,normalizationTotal:t.normalizationTotal})}function x(n,e,t){return e=null==e?-1/0:e,t=null==t?1/0:t,n.filter((n=>Number.isFinite(n)&&n>=e&&n<=t))}function F(e){const i=e.field,a=e.classificationMethod||t,r=e.normalizationType,o=e.normalizationField,u=new n;return u.classificationField=i,u.breakCount=e.breakCount,u.classificationMethod=a,u.standardDeviationInterval=\"standard-deviation\"===a?e.standardDeviationInterval||l:void 0,u.normalizationType=r,u.normalizationField=\"field\"===r?o:void 0,u}function D(n,e){let t=n.classBreaks;const l=t.length,i=t[0].minValue,a=t[l-1].maxValue,o=\"standard-deviation\"===e,u=r;return t=t.map((n=>{const e=n.label,t={minValue:n.minValue,maxValue:n.maxValue,label:e};if(o&&e){const n=e.match(u).map((n=>+n.trim()));2===n.length?(t.minStdDev=n[0],t.maxStdDev=n[1],n[0]<0&&n[1]>0&&(t.hasAvg=!0)):1===n.length&&(e.includes(\"<\")?(t.minStdDev=null,t.maxStdDev=n[0]):e.includes(\">\")&&(t.minStdDev=n[0],t.maxStdDev=null))}return t})),{minValue:i,maxValue:a,classBreakInfos:t,normalizationTotal:n.normalizationTotal}}function z(n,e){const{min:t,max:l,intervals:i}=I(n,e),a=i.map(((n,e)=>({minValue:i[e][0],maxValue:i[e][1],count:0})));for(const r of n)if(null!=r&&r>=t&&r<=l){const n=N(i,r);n>-1&&a[n].count++}return{bins:a,minValue:t,maxValue:l,normalizationTotal:e.normalizationTotal}}function I(n,e){const{field:t,classificationMethod:l,standardDeviationInterval:i,normalizationType:r,normalizationField:o,normalizationTotal:u,minValue:m,maxValue:d}=e,f=e.numBins||a;let p=null,v=null,b=null;if((!l||\"equal-interval\"===l)&&!r){if(null!=m&&null!=d)p=m,v=d;else{const e=c({values:n,minValue:m,maxValue:d,useSampleStdDev:!r,supportsNullCount:s({normalizationType:r,normalizationField:o,minValue:m,maxValue:d})});p=e.min,v=e.max}b=S(p,v,f)}else{const{classBreaks:e}=y(n,{field:t,normalizationType:r,normalizationField:o,normalizationTotal:u,classificationMethod:l,standardDeviationInterval:i,minValue:m,maxValue:d,numClasses:f});p=e[0].minValue,v=e[e.length-1].maxValue,b=e.map((n=>[n.minValue,n.maxValue]))}return{min:p,max:v,intervals:b}}function N(n,e){let t=-1;for(let l=n.length-1;l>=0;l--){if(e>=n[l][0]){t=l;break}}return t}function S(n,e,t){const l=(e-n)/t,i=[];let a,r=n;for(let o=1;o<=t;o++)a=r+l,a=Number(a.toFixed(16)),i.push([r,o===t?e:a]),r=a;return i}export{y as calculateClassBreaks,z as calculateHistogram,d as calculatePercentile,c as calculateStatistics,m as calculateStringStatistics,g as calculateUniqueValuesCount,F as createClassBreaksDefinition,h as createUVResult,f as getAttributeComparator,S as getEqualIntervalBins,T as getNormalizedValue,s as isNullCountSupported,V as processSummaryStatisticsResult,D as resolveCBResult,u as statisticTypes};\n"]},"metadata":{},"sourceType":"module"}