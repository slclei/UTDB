{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport e from \"../../core/Error.js\";\nimport { isSome as r } from \"../../core/maybe.js\";\nimport { open as o } from \"../../core/workers/workers.js\";\nimport t from \"./PixelBlock.js\";\n\nclass n {\n  constructor() {\n    this._workerThread = null, this._destroyed = !1;\n  }\n\n  async initialize() {\n    const e = await o(\"RasterWorker\");\n    this._destroyed ? e.close() : this._workerThread = e;\n  }\n\n  destroy() {\n    this._destroyed = !0, this._workerThread && (this._workerThread.close(), this._workerThread = null);\n  }\n\n  async convertVectorFieldData(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const n = await this._workerThread.invoke(\"convertVectorFieldData\", {\n      pixelBlock: r.pixelBlock.toJSON(),\n      type: r.dataType\n    }, o);\n    return n ? new t(n) : null;\n  }\n\n  async decode(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const n = await this._workerThread.invoke(\"decode\", r, o);\n    return n ? new t(n) : null;\n  }\n\n  async symbolize(o, n) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const a = {\n      extent: o.extent && o.extent.toJSON(),\n      pixelBlock: r(o.pixelBlock) && o.pixelBlock.toJSON(),\n      simpleStretchParams: o.simpleStretchParams,\n      bandIds: o.bandIds\n    },\n          i = await this._workerThread.invoke(\"symbolize\", a, n);\n    return i ? new t(i) : null;\n  }\n\n  async updateSymbolizer(r, o) {\n    var t;\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const n = null == r || null == (t = r.rendererJSON) ? void 0 : t.histograms;\n    await Promise.all(this._workerThread.broadcast(\"updateSymbolizer\", {\n      symbolizerJSON: r.toJSON(),\n      histograms: n\n    }, o));\n  }\n\n  async stretch(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    if (null == r || !r.pixelBlock) return null;\n    const n = {\n      srcPixelBlock: r.pixelBlock.toJSON(),\n      stretchParams: r.stretchParams\n    },\n          a = await this._workerThread.invoke(\"stretch\", n, o);\n    return a ? new t(a) : null;\n  }\n\n  async split(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    if (null == r || !r.pixelBlock) return null;\n    const n = {\n      srcPixelBlock: r.pixelBlock.toJSON(),\n      tileSize: r.tileSize,\n      maximumPyramidLevel: r.maximumPyramidLevel\n    },\n          a = await this._workerThread.invoke(\"split\", n, o);\n    return a && a.forEach((e, r) => {\n      a.set(r, e ? t.fromJSON(e) : null);\n    }), Promise.resolve(a);\n  }\n\n  async estimateStatisticsHistograms(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    if (null == r || !r.pixelBlock) return null;\n    const t = {\n      srcPixelBlock: r.pixelBlock.toJSON()\n    },\n          n = await this._workerThread.invoke(\"estimateStatisticsHistograms\", t, o);\n    return Promise.resolve(n);\n  }\n\n  async mosaicAndTransform(o, n) {\n    var a;\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    if (null == o || null == (a = o.srcPixelBlocks) || !a.length) return {\n      pixelBlock: null\n    };\n    const i = { ...o,\n      srcPixelBlocks: o.srcPixelBlocks.map(e => r(e) ? e.toJSON() : null)\n    },\n          s = await this._workerThread.invoke(\"mosaicAndTransform\", i, n);\n    return {\n      pixelBlock: s.pixelBlock ? new t(s.pixelBlock) : null,\n      localNorthDirections: s.localNorthDirections\n    };\n  }\n\n  async createStreamlinesMesh(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const t = {\n      buffer: r.flowData.data.buffer,\n      width: r.flowData.width,\n      height: r.flowData.height\n    },\n          n = r.rendererSettings,\n          a = await this._workerThread.invoke(\"createStreamlinesMesh\", {\n      flowData: t,\n      rendererSettings: n\n    }, { ...o,\n      transferList: [t.buffer]\n    });\n    return {\n      vertexData: new Float32Array(a.vertexBuffer),\n      indexData: new Uint32Array(a.indexBuffer)\n    };\n  }\n\n  getProjectionOffsetGrid(o, t) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const n = r(o.datumTransformation) ? o.datumTransformation.steps.map(e => ({\n      wkid: e.wkid,\n      wkt: e.wkt,\n      isInverse: e.isInverse\n    })) : null,\n          a = r(o.rasterTransform) ? o.rasterTransform.toJSON() : null,\n          i = {\n      projectedExtent: o.projectedExtent.toJSON(),\n      srcBufferExtent: o.srcBufferExtent.toJSON(),\n      pixelSize: o.pixelSize,\n      hasWrapAround: o.hasWrapAround,\n      spacing: o.spacing,\n      datumTransformationSteps: n,\n      rasterTransform: a,\n      isAdaptive: o.isAdaptive,\n      includeGCSGrid: o.includeGCSGrid\n    };\n    return this._workerThread.invoke(\"getProjectionOffsetGrid\", i, t);\n  }\n\n}\n\nexport { n as default };","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/gis/node_modules/@arcgis/core/layers/support/RasterJobHandler.js"],"names":["e","isSome","r","open","o","t","n","constructor","_workerThread","_destroyed","initialize","close","destroy","convertVectorFieldData","invoke","pixelBlock","toJSON","type","dataType","decode","symbolize","a","extent","simpleStretchParams","bandIds","i","updateSymbolizer","rendererJSON","histograms","Promise","all","broadcast","symbolizerJSON","stretch","srcPixelBlock","stretchParams","split","tileSize","maximumPyramidLevel","forEach","set","fromJSON","resolve","estimateStatisticsHistograms","mosaicAndTransform","srcPixelBlocks","length","map","s","localNorthDirections","createStreamlinesMesh","buffer","flowData","data","width","height","rendererSettings","transferList","vertexData","Float32Array","vertexBuffer","indexData","Uint32Array","indexBuffer","getProjectionOffsetGrid","datumTransformation","steps","wkid","wkt","isInverse","rasterTransform","projectedExtent","srcBufferExtent","pixelSize","hasWrapAround","spacing","datumTransformationSteps","isAdaptive","includeGCSGrid","default"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport e from\"../../core/Error.js\";import{isSome as r}from\"../../core/maybe.js\";import{open as o}from\"../../core/workers/workers.js\";import t from\"./PixelBlock.js\";class n{constructor(){this._workerThread=null,this._destroyed=!1}async initialize(){const e=await o(\"RasterWorker\");this._destroyed?e.close():this._workerThread=e}destroy(){this._destroyed=!0,this._workerThread&&(this._workerThread.close(),this._workerThread=null)}async convertVectorFieldData(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const n=await this._workerThread.invoke(\"convertVectorFieldData\",{pixelBlock:r.pixelBlock.toJSON(),type:r.dataType},o);return n?new t(n):null}async decode(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const n=await this._workerThread.invoke(\"decode\",r,o);return n?new t(n):null}async symbolize(o,n){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const a={extent:o.extent&&o.extent.toJSON(),pixelBlock:r(o.pixelBlock)&&o.pixelBlock.toJSON(),simpleStretchParams:o.simpleStretchParams,bandIds:o.bandIds},i=await this._workerThread.invoke(\"symbolize\",a,n);return i?new t(i):null}async updateSymbolizer(r,o){var t;if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const n=null==r||null==(t=r.rendererJSON)?void 0:t.histograms;await Promise.all(this._workerThread.broadcast(\"updateSymbolizer\",{symbolizerJSON:r.toJSON(),histograms:n},o))}async stretch(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(null==r||!r.pixelBlock)return null;const n={srcPixelBlock:r.pixelBlock.toJSON(),stretchParams:r.stretchParams},a=await this._workerThread.invoke(\"stretch\",n,o);return a?new t(a):null}async split(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(null==r||!r.pixelBlock)return null;const n={srcPixelBlock:r.pixelBlock.toJSON(),tileSize:r.tileSize,maximumPyramidLevel:r.maximumPyramidLevel},a=await this._workerThread.invoke(\"split\",n,o);return a&&a.forEach(((e,r)=>{a.set(r,e?t.fromJSON(e):null)})),Promise.resolve(a)}async estimateStatisticsHistograms(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(null==r||!r.pixelBlock)return null;const t={srcPixelBlock:r.pixelBlock.toJSON()},n=await this._workerThread.invoke(\"estimateStatisticsHistograms\",t,o);return Promise.resolve(n)}async mosaicAndTransform(o,n){var a;if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(null==o||null==(a=o.srcPixelBlocks)||!a.length)return{pixelBlock:null};const i={...o,srcPixelBlocks:o.srcPixelBlocks.map((e=>r(e)?e.toJSON():null))},s=await this._workerThread.invoke(\"mosaicAndTransform\",i,n);return{pixelBlock:s.pixelBlock?new t(s.pixelBlock):null,localNorthDirections:s.localNorthDirections}}async createStreamlinesMesh(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const t={buffer:r.flowData.data.buffer,width:r.flowData.width,height:r.flowData.height},n=r.rendererSettings,a=await this._workerThread.invoke(\"createStreamlinesMesh\",{flowData:t,rendererSettings:n},{...o,transferList:[t.buffer]});return{vertexData:new Float32Array(a.vertexBuffer),indexData:new Uint32Array(a.indexBuffer)}}getProjectionOffsetGrid(o,t){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const n=r(o.datumTransformation)?o.datumTransformation.steps.map((e=>({wkid:e.wkid,wkt:e.wkt,isInverse:e.isInverse}))):null,a=r(o.rasterTransform)?o.rasterTransform.toJSON():null,i={projectedExtent:o.projectedExtent.toJSON(),srcBufferExtent:o.srcBufferExtent.toJSON(),pixelSize:o.pixelSize,hasWrapAround:o.hasWrapAround,spacing:o.spacing,datumTransformationSteps:n,rasterTransform:a,isAdaptive:o.isAdaptive,includeGCSGrid:o.includeGCSGrid};return this._workerThread.invoke(\"getProjectionOffsetGrid\",i,t)}}export{n as default};\n"]},"metadata":{},"sourceType":"module"}