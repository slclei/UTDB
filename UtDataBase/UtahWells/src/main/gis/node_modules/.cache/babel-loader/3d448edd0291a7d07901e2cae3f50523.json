{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport { brushes as e } from \"./brushes.js\";\nimport { WGLDrawPhase as r } from \"./webgl/enums.js\";\nimport s from \"./webgl/WGLContainer.js\";\n\nclass t extends s {\n  get requiresDedicatedFBO() {\n    return this.children.some(e => \"additive\" === e.blendFunction);\n  }\n\n  prepareRenderPasses(s) {\n    const t = s.registerRenderPass({\n      name: \"bitmap\",\n      brushes: [e.bitmap],\n      target: () => this.children,\n      drawPhase: r.MAP\n    });\n    return [...super.prepareRenderPasses(s), t];\n  }\n\n}\n\nexport { t as BitmapContainer };","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/gis/node_modules/@arcgis/core/views/2d/engine/BitmapContainer.js"],"names":["brushes","e","WGLDrawPhase","r","s","t","requiresDedicatedFBO","children","some","blendFunction","prepareRenderPasses","registerRenderPass","name","bitmap","target","drawPhase","MAP","BitmapContainer"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,OAAO,IAAIC,CAAlB,QAAwB,cAAxB;AAAuC,SAAOC,YAAY,IAAIC,CAAvB,QAA6B,kBAA7B;AAAgD,OAAOC,CAAP,MAAa,yBAAb;;AAAuC,MAAMC,CAAN,SAAgBD,CAAhB,CAAiB;AAAyB,MAApBE,oBAAoB,GAAE;AAAC,WAAO,KAAKC,QAAL,CAAcC,IAAd,CAAoBP,CAAC,IAAE,eAAaA,CAAC,CAACQ,aAAtC,CAAP;AAA6D;;AAAAC,EAAAA,mBAAmB,CAACN,CAAD,EAAG;AAAC,UAAMC,CAAC,GAACD,CAAC,CAACO,kBAAF,CAAqB;AAACC,MAAAA,IAAI,EAAC,QAAN;AAAeZ,MAAAA,OAAO,EAAC,CAACC,CAAC,CAACY,MAAH,CAAvB;AAAkCC,MAAAA,MAAM,EAAC,MAAI,KAAKP,QAAlD;AAA2DQ,MAAAA,SAAS,EAACZ,CAAC,CAACa;AAAvE,KAArB,CAAR;AAA0G,WAAM,CAAC,GAAG,MAAMN,mBAAN,CAA0BN,CAA1B,CAAJ,EAAiCC,CAAjC,CAAN;AAA0C;;AAApQ;;AAAqQ,SAAOA,CAAC,IAAIY,eAAZ","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport{brushes as e}from\"./brushes.js\";import{WGLDrawPhase as r}from\"./webgl/enums.js\";import s from\"./webgl/WGLContainer.js\";class t extends s{get requiresDedicatedFBO(){return this.children.some((e=>\"additive\"===e.blendFunction))}prepareRenderPasses(s){const t=s.registerRenderPass({name:\"bitmap\",brushes:[e.bitmap],target:()=>this.children,drawPhase:r.MAP});return[...super.prepareRenderPasses(s),t]}}export{t as BitmapContainer};\n"]},"metadata":{},"sourceType":"module"}