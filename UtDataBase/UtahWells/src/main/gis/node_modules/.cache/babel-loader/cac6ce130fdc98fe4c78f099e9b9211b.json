{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport \"../../geometry.js\";\nimport { isSome as r, unwrap as e } from \"../../core/maybe.js\";\nimport t from \"../../geometry/support/GeographicTransformation.js\";\nimport o from \"./PixelBlock.js\";\nimport { decode as s } from \"./rasterFormats/RasterCodec.js\";\nimport { estimateStatisticsHistograms as i, split as a, mosaic as n, approximateTransform as l, getLocalArithmeticNorthRotations as m } from \"./rasterFunctions/pixelUtils.js\";\nimport { requirePE as c, load as f, getProjectionOffsetGrid as p } from \"./rasterFunctions/rasterProjectionHelper.js\";\nimport { convertVectorFieldData as u, convertToLocalDirections as d } from \"./rasterFunctions/vectorFieldUtils.js\";\nimport { readTransform as S } from \"./rasterTransforms/utils.js\";\nimport h from \"../../renderers/support/RasterSymbolizer.js\";\nimport { createStreamlinesMesh as x } from \"../../views/2d/engine/flow/dataUtils.js\";\nimport y from \"../../geometry/Extent.js\";\n\nclass O {\n  convertVectorFieldData(e) {\n    const t = o.fromJSON(e.pixelBlock),\n          s = u(t, e.type);\n    return Promise.resolve(r(s) && s.toJSON());\n  }\n\n  async decode(r) {\n    const e = await s(r.data, r.options);\n    return e && e.toJSON();\n  }\n\n  symbolize(e) {\n    e.pixelBlock = o.fromJSON(e.pixelBlock), e.extent = e.extent ? y.fromJSON(e.extent) : null;\n    const t = this.symbolizer.symbolize(e);\n    return Promise.resolve(r(t) && t.toJSON());\n  }\n\n  async updateSymbolizer(r) {\n    var e;\n    this.symbolizer = h.fromJSON(r.symbolizerJSON), r.histograms && \"rasterStretch\" === (null == (e = this.symbolizer) ? void 0 : e.rendererJSON.type) && (this.symbolizer.rendererJSON.histograms = r.histograms);\n  }\n\n  stretch(e) {\n    const t = this.symbolizer.simpleStretch(o.fromJSON(e.srcPixelBlock), e.stretchParams);\n    return Promise.resolve(r(t) && t.toJSON());\n  }\n\n  estimateStatisticsHistograms(r) {\n    const e = i(o.fromJSON(r.srcPixelBlock));\n    return Promise.resolve(e);\n  }\n\n  split(r) {\n    const e = a(o.fromJSON(r.srcPixelBlock), r.tileSize, r.maximumPyramidLevel);\n    return e && e.forEach((r, t) => {\n      e.set(t, null == r ? void 0 : r.toJSON());\n    }), Promise.resolve(e);\n  }\n\n  async mosaicAndTransform(r) {\n    var t;\n    const s = r.srcPixelBlocks.map(r => r ? new o(r) : null),\n          i = n(s, r.srcMosaicSize, {\n      blockWidths: r.blockWidths,\n      alignmentInfo: r.alignmentInfo,\n      clipOffset: r.clipOffset,\n      clipSize: r.clipSize\n    });\n    let a,\n        c = i;\n    return r.coefs && (c = l(i, r.destDimension, r.coefs, r.sampleSpacing, r.interpolation)), r.projectDirections && r.gcsGrid && (a = m(r.destDimension, r.gcsGrid), c = e(d(c, r.isUV ? \"vector-uv\" : \"vector-magdir\", a))), {\n      pixelBlock: null == (t = c) ? void 0 : t.toJSON(),\n      localNorthDirections: a\n    };\n  }\n\n  async createStreamlinesMesh(r, e) {\n    const t = {\n      data: new Float32Array(r.flowData.buffer),\n      width: r.flowData.width,\n      height: r.flowData.height\n    },\n          {\n      vertexData: o,\n      indexData: s\n    } = await x(r.rendererSettings, t, e.signal);\n    return {\n      result: {\n        vertexBuffer: o.buffer,\n        indexBuffer: s.buffer\n      },\n      transferList: [o.buffer, s.buffer]\n    };\n  }\n\n  async getProjectionOffsetGrid(r) {\n    const e = y.fromJSON(r.projectedExtent),\n          o = y.fromJSON(r.srcBufferExtent);\n    let s = null;\n    r.datumTransformationSteps && (s = new t({\n      steps: r.datumTransformationSteps\n    })), (r.includeGCSGrid || c(e.spatialReference, o.spatialReference, s)) && (await f());\n    const i = r.rasterTransform ? S(r.rasterTransform) : null;\n    return p({ ...r,\n      projectedExtent: e,\n      srcBufferExtent: o,\n      datumTransformation: s,\n      rasterTransform: i\n    });\n  }\n\n}\n\nexport { O as default };","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/gis/node_modules/@arcgis/core/layers/support/RasterWorker.js"],"names":["isSome","r","unwrap","e","t","o","decode","s","estimateStatisticsHistograms","i","split","a","mosaic","n","approximateTransform","l","getLocalArithmeticNorthRotations","m","requirePE","c","load","f","getProjectionOffsetGrid","p","convertVectorFieldData","u","convertToLocalDirections","d","readTransform","S","h","createStreamlinesMesh","x","y","O","fromJSON","pixelBlock","type","Promise","resolve","toJSON","data","options","symbolize","extent","symbolizer","updateSymbolizer","symbolizerJSON","histograms","rendererJSON","stretch","simpleStretch","srcPixelBlock","stretchParams","tileSize","maximumPyramidLevel","forEach","set","mosaicAndTransform","srcPixelBlocks","map","srcMosaicSize","blockWidths","alignmentInfo","clipOffset","clipSize","coefs","destDimension","sampleSpacing","interpolation","projectDirections","gcsGrid","isUV","localNorthDirections","Float32Array","flowData","buffer","width","height","vertexData","indexData","rendererSettings","signal","result","vertexBuffer","indexBuffer","transferList","projectedExtent","srcBufferExtent","datumTransformationSteps","steps","includeGCSGrid","spatialReference","rasterTransform","datumTransformation","default"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport\"../../geometry.js\";import{isSome as r,unwrap as e}from\"../../core/maybe.js\";import t from\"../../geometry/support/GeographicTransformation.js\";import o from\"./PixelBlock.js\";import{decode as s}from\"./rasterFormats/RasterCodec.js\";import{estimateStatisticsHistograms as i,split as a,mosaic as n,approximateTransform as l,getLocalArithmeticNorthRotations as m}from\"./rasterFunctions/pixelUtils.js\";import{requirePE as c,load as f,getProjectionOffsetGrid as p}from\"./rasterFunctions/rasterProjectionHelper.js\";import{convertVectorFieldData as u,convertToLocalDirections as d}from\"./rasterFunctions/vectorFieldUtils.js\";import{readTransform as S}from\"./rasterTransforms/utils.js\";import h from\"../../renderers/support/RasterSymbolizer.js\";import{createStreamlinesMesh as x}from\"../../views/2d/engine/flow/dataUtils.js\";import y from\"../../geometry/Extent.js\";class O{convertVectorFieldData(e){const t=o.fromJSON(e.pixelBlock),s=u(t,e.type);return Promise.resolve(r(s)&&s.toJSON())}async decode(r){const e=await s(r.data,r.options);return e&&e.toJSON()}symbolize(e){e.pixelBlock=o.fromJSON(e.pixelBlock),e.extent=e.extent?y.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(r(t)&&t.toJSON())}async updateSymbolizer(r){var e;this.symbolizer=h.fromJSON(r.symbolizerJSON),r.histograms&&\"rasterStretch\"===(null==(e=this.symbolizer)?void 0:e.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=r.histograms)}stretch(e){const t=this.symbolizer.simpleStretch(o.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(r(t)&&t.toJSON())}estimateStatisticsHistograms(r){const e=i(o.fromJSON(r.srcPixelBlock));return Promise.resolve(e)}split(r){const e=a(o.fromJSON(r.srcPixelBlock),r.tileSize,r.maximumPyramidLevel);return e&&e.forEach(((r,t)=>{e.set(t,null==r?void 0:r.toJSON())})),Promise.resolve(e)}async mosaicAndTransform(r){var t;const s=r.srcPixelBlocks.map((r=>r?new o(r):null)),i=n(s,r.srcMosaicSize,{blockWidths:r.blockWidths,alignmentInfo:r.alignmentInfo,clipOffset:r.clipOffset,clipSize:r.clipSize});let a,c=i;return r.coefs&&(c=l(i,r.destDimension,r.coefs,r.sampleSpacing,r.interpolation)),r.projectDirections&&r.gcsGrid&&(a=m(r.destDimension,r.gcsGrid),c=e(d(c,r.isUV?\"vector-uv\":\"vector-magdir\",a))),{pixelBlock:null==(t=c)?void 0:t.toJSON(),localNorthDirections:a}}async createStreamlinesMesh(r,e){const t={data:new Float32Array(r.flowData.buffer),width:r.flowData.width,height:r.flowData.height},{vertexData:o,indexData:s}=await x(r.rendererSettings,t,e.signal);return{result:{vertexBuffer:o.buffer,indexBuffer:s.buffer},transferList:[o.buffer,s.buffer]}}async getProjectionOffsetGrid(r){const e=y.fromJSON(r.projectedExtent),o=y.fromJSON(r.srcBufferExtent);let s=null;r.datumTransformationSteps&&(s=new t({steps:r.datumTransformationSteps})),(r.includeGCSGrid||c(e.spatialReference,o.spatialReference,s))&&await f();const i=r.rasterTransform?S(r.rasterTransform):null;return p({...r,projectedExtent:e,srcBufferExtent:o,datumTransformation:s,rasterTransform:i})}}export{O as default};\n"]},"metadata":{},"sourceType":"module"}