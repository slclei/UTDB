{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport { ViewingMode as e } from \"../views/ViewingMode.js\";\nimport { ForwardLinearDepth as o } from \"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";\nimport { Offset as r } from \"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";\nimport { ShaderOutput as a } from \"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutputOptions.js\";\nimport { Slice as i } from \"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";\nimport { Transform as l } from \"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";\nimport { InstancedDoublePrecision as t } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";\nimport { NormalAttribute as d } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";\nimport { PositionAttribute as n } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";\nimport { SymbolColor as s } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";\nimport { TextureCoordinateAttribute as c } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";\nimport { VertexColor as g } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";\nimport { VerticalOffset as m } from \"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";\nimport { DefaultMaterialAuxiliaryPasses as v } from \"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";\nimport { ReadLinearDepth as p } from \"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js\";\nimport { EvaluateAmbientOcclusion as b } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";\nimport { EvaluateSceneLighting as u } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";\nimport { multipassTerrainTest as f } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";\nimport { PhysicallyBasedRendering as h } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";\nimport { PhysicallyBasedRenderingParameters as w, PBRMode as x } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";\nimport { ReadShadowMap as y } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";\nimport { VisualVariables as C } from \"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";\nimport { symbolAlphaCutoff as L, DiscardOrAdjustAlpha as M } from \"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";\nimport { MixExternalColor as j } from \"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";\nimport { glsl as O } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as E } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { VertexAttribute as A } from \"../views/3d/webgl-engine/lib/VertexAttribute.js\";\n\nfunction _(_) {\n  const P = new E(),\n        S = P.vertex.code,\n        F = P.fragment.code;\n  return P.vertex.uniforms.add(\"proj\", \"mat4\").add(\"view\", \"mat4\").add(\"cameraPosition\", \"vec3\").add(\"localOrigin\", \"vec3\"), P.include(n), P.varyings.add(\"vpos\", \"vec3\"), P.include(C, _), P.include(t, _), P.include(m, _), _.output !== a.Color && _.output !== a.Alpha || (P.include(d, _), P.include(l, {\n    linearDepth: !1\n  }), _.offsetBackfaces && P.include(r), _.instancedColor && P.attributes.add(A.INSTANCECOLOR, \"vec4\"), P.varyings.add(\"vNormalWorld\", \"vec3\"), P.varyings.add(\"localvpos\", \"vec3\"), _.multipassTerrainEnabled && P.varyings.add(\"depth\", \"float\"), P.include(c, _), P.include(o, _), P.include(s, _), P.include(g, _), P.vertex.uniforms.add(\"externalColor\", \"vec4\"), P.varyings.add(\"vcolorExt\", \"vec4\"), S.add(O`\n        void main(void) {\n          forwardNormalizedVertexColor();\n          vcolorExt = externalColor;\n          ${_.instancedColor ? \"vcolorExt *= instanceColor;\" : \"\"}\n          vcolorExt *= vvColor();\n          vcolorExt *= getSymbolColor();\n          forwardColorMixMode();\n\n          if (vcolorExt.a < ${O.float(L)}) {\n            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n          }\n          else {\n            vpos = calculateVPos();\n            localvpos = vpos - view[3].xyz;\n            vpos = subtractOrigin(vpos);\n            vNormalWorld = dpNormal(vvLocalNormal(normalModel()));\n            vpos = addVerticalOffset(vpos, localOrigin);\n            gl_Position = transformPosition(proj, view, vpos);\n            ${_.offsetBackfaces ? \"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);\" : \"\"}\n          }\n          ${_.multipassTerrainEnabled ? O`depth = (view * vec4(vpos, 1.0)).z;` : \"\"}\n          forwardLinearDepth();\n          forwardTextureCoordinates();\n        }\n      `)), _.output === a.Alpha && (P.include(i, _), P.include(M, _), _.multipassTerrainEnabled && (P.fragment.include(p), P.include(f, _)), P.fragment.uniforms.add(\"cameraPosition\", \"vec3\").add(\"localOrigin\", \"vec3\").add(\"opacity\", \"float\").add(\"layerOpacity\", \"float\"), P.fragment.uniforms.add(\"view\", \"mat4\"), _.hasColorTexture && P.fragment.uniforms.add(\"tex\", \"sampler2D\"), P.fragment.include(j), F.add(O`\n      void main() {\n        discardBySlice(vpos);\n        ${_.multipassTerrainEnabled ? O`terrainDepthTest(gl_FragCoord, depth);` : \"\"}\n        ${_.hasColorTexture ? O`\n        vec4 texColor = texture2D(tex, vuv0);\n        ${_.textureAlphaPremultiplied ? \"texColor.rgb /= texColor.a;\" : \"\"}\n        discardOrAdjustAlpha(texColor);` : O`vec4 texColor = vec4(1.0);`}\n        ${_.attributeColor ? O`\n        float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : O`\n        float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n        `}\n\n        gl_FragColor = vec4(opacity_);\n      }\n    `)), _.output === a.Color && (P.include(i, _), P.include(u, _), P.include(b, _), P.include(M, _), _.receiveShadows && P.include(y, _), _.multipassTerrainEnabled && (P.fragment.include(p), P.include(f, _)), P.fragment.uniforms.add(\"cameraPosition\", \"vec3\").add(\"localOrigin\", \"vec3\").add(\"ambient\", \"vec3\").add(\"diffuse\", \"vec3\").add(\"opacity\", \"float\").add(\"layerOpacity\", \"float\"), P.fragment.uniforms.add(\"view\", \"mat4\"), _.hasColorTexture && P.fragment.uniforms.add(\"tex\", \"sampler2D\"), P.include(w, _), P.include(h, _), P.fragment.include(j), F.add(O`\n      void main() {\n        discardBySlice(vpos);\n        ${_.multipassTerrainEnabled ? O`terrainDepthTest(gl_FragCoord, depth);` : \"\"}\n        ${_.hasColorTexture ? O`\n        vec4 texColor = texture2D(tex, vuv0);\n        ${_.textureAlphaPremultiplied ? \"texColor.rgb /= texColor.a;\" : \"\"}\n        discardOrAdjustAlpha(texColor);` : O`vec4 texColor = vec4(1.0);`}\n        vec3 viewDirection = normalize(vpos - cameraPosition);\n        ${_.pbrMode === x.Normal ? \"applyPBRFactors();\" : \"\"}\n        float ssao = evaluateAmbientOcclusionInverse();\n        ssao *= getBakedOcclusion();\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\n        vec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n        ${_.receiveShadows ? \"float shadow = readShadowMap(vpos, linearDepth);\" : _.viewingMode === e.Global ? \"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);\" : \"float shadow = 0.0;\"}\n        vec3 matColor = max(ambient, diffuse);\n        ${_.attributeColor ? O`\n        vec3 albedo_ = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));` : O`\n        vec3 albedo_ = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n        `}\n        ${O`\n        vec3 shadedNormal = normalize(vNormalWorld);\n        albedo_ *= 1.2;\n        vec3 viewForward = vec3(view[0][2], view[1][2], view[2][2]);\n        float alignmentLightView = clamp(dot(viewForward, -lightingMainDirection), 0.0, 1.0);\n        float transmittance = 1.0 - clamp(dot(viewForward, shadedNormal), 0.0, 1.0);\n        float treeRadialFalloff = vColor.r;\n        float backLightFactor = 0.5 * treeRadialFalloff * alignmentLightView * transmittance * (1.0 - shadow);\n        additionalLight += backLightFactor * lightingMainIntensity;`}\n        ${_.pbrMode === x.Normal || _.pbrMode === x.Schematic ? _.viewingMode === e.Global ? O`vec3 normalGround = normalize(vpos + localOrigin);` : O`vec3 normalGround = vec3(0.0, 0.0, 1.0);` : O``}\n        ${_.pbrMode === x.Normal || _.pbrMode === x.Schematic ? O`\n            float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * lightingMainIntensity[2];\n            vec3 shadedColor = evaluateSceneLightingPBR(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight, viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);` : \"vec3 shadedColor = evaluateSceneLighting(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight);\"}\n        gl_FragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${_.oitEnabled ? \"gl_FragColor = premultiplyAlpha(gl_FragColor);\" : \"\"}\n      }\n    `)), P.include(v, _), P;\n}\n\nconst P = Object.freeze({\n  __proto__: null,\n  build: _\n});\nexport { P as R, _ as b };","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/gis/node_modules/@arcgis/core/chunks/RealisticTree.glsl.js"],"names":["ViewingMode","e","ForwardLinearDepth","o","Offset","r","ShaderOutput","a","Slice","i","Transform","l","InstancedDoublePrecision","t","NormalAttribute","d","PositionAttribute","n","SymbolColor","s","TextureCoordinateAttribute","c","VertexColor","g","VerticalOffset","m","DefaultMaterialAuxiliaryPasses","v","ReadLinearDepth","p","EvaluateAmbientOcclusion","b","EvaluateSceneLighting","u","multipassTerrainTest","f","PhysicallyBasedRendering","h","PhysicallyBasedRenderingParameters","w","PBRMode","x","ReadShadowMap","y","VisualVariables","C","symbolAlphaCutoff","L","DiscardOrAdjustAlpha","M","MixExternalColor","j","glsl","O","ShaderBuilder","E","VertexAttribute","A","_","P","S","vertex","code","F","fragment","uniforms","add","include","varyings","output","Color","Alpha","linearDepth","offsetBackfaces","instancedColor","attributes","INSTANCECOLOR","multipassTerrainEnabled","float","hasColorTexture","textureAlphaPremultiplied","attributeColor","receiveShadows","pbrMode","Normal","viewingMode","Global","Schematic","oitEnabled","Object","freeze","__proto__","build","R"],"mappings":"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","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.23/esri/copyright.txt for details.\n*/\nimport{ViewingMode as e}from\"../views/ViewingMode.js\";import{ForwardLinearDepth as o}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{Offset as r}from\"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";import{ShaderOutput as a}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutputOptions.js\";import{Slice as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as l}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{InstancedDoublePrecision as t}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";import{NormalAttribute as d}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";import{PositionAttribute as n}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";import{SymbolColor as s}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";import{TextureCoordinateAttribute as c}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{VertexColor as g}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{VerticalOffset as m}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";import{DefaultMaterialAuxiliaryPasses as v}from\"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";import{ReadLinearDepth as p}from\"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js\";import{EvaluateAmbientOcclusion as b}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";import{EvaluateSceneLighting as u}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{multipassTerrainTest as f}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{PhysicallyBasedRendering as h}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";import{PhysicallyBasedRenderingParameters as w,PBRMode as x}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMap as y}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{VisualVariables as C}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{symbolAlphaCutoff as L,DiscardOrAdjustAlpha as M}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";import{MixExternalColor as j}from\"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";import{glsl as O}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as E}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{VertexAttribute as A}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";function _(_){const P=new E,S=P.vertex.code,F=P.fragment.code;return P.vertex.uniforms.add(\"proj\",\"mat4\").add(\"view\",\"mat4\").add(\"cameraPosition\",\"vec3\").add(\"localOrigin\",\"vec3\"),P.include(n),P.varyings.add(\"vpos\",\"vec3\"),P.include(C,_),P.include(t,_),P.include(m,_),_.output!==a.Color&&_.output!==a.Alpha||(P.include(d,_),P.include(l,{linearDepth:!1}),_.offsetBackfaces&&P.include(r),_.instancedColor&&P.attributes.add(A.INSTANCECOLOR,\"vec4\"),P.varyings.add(\"vNormalWorld\",\"vec3\"),P.varyings.add(\"localvpos\",\"vec3\"),_.multipassTerrainEnabled&&P.varyings.add(\"depth\",\"float\"),P.include(c,_),P.include(o,_),P.include(s,_),P.include(g,_),P.vertex.uniforms.add(\"externalColor\",\"vec4\"),P.varyings.add(\"vcolorExt\",\"vec4\"),S.add(O`\n        void main(void) {\n          forwardNormalizedVertexColor();\n          vcolorExt = externalColor;\n          ${_.instancedColor?\"vcolorExt *= instanceColor;\":\"\"}\n          vcolorExt *= vvColor();\n          vcolorExt *= getSymbolColor();\n          forwardColorMixMode();\n\n          if (vcolorExt.a < ${O.float(L)}) {\n            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n          }\n          else {\n            vpos = calculateVPos();\n            localvpos = vpos - view[3].xyz;\n            vpos = subtractOrigin(vpos);\n            vNormalWorld = dpNormal(vvLocalNormal(normalModel()));\n            vpos = addVerticalOffset(vpos, localOrigin);\n            gl_Position = transformPosition(proj, view, vpos);\n            ${_.offsetBackfaces?\"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);\":\"\"}\n          }\n          ${_.multipassTerrainEnabled?O`depth = (view * vec4(vpos, 1.0)).z;`:\"\"}\n          forwardLinearDepth();\n          forwardTextureCoordinates();\n        }\n      `)),_.output===a.Alpha&&(P.include(i,_),P.include(M,_),_.multipassTerrainEnabled&&(P.fragment.include(p),P.include(f,_)),P.fragment.uniforms.add(\"cameraPosition\",\"vec3\").add(\"localOrigin\",\"vec3\").add(\"opacity\",\"float\").add(\"layerOpacity\",\"float\"),P.fragment.uniforms.add(\"view\",\"mat4\"),_.hasColorTexture&&P.fragment.uniforms.add(\"tex\",\"sampler2D\"),P.fragment.include(j),F.add(O`\n      void main() {\n        discardBySlice(vpos);\n        ${_.multipassTerrainEnabled?O`terrainDepthTest(gl_FragCoord, depth);`:\"\"}\n        ${_.hasColorTexture?O`\n        vec4 texColor = texture2D(tex, vuv0);\n        ${_.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n        discardOrAdjustAlpha(texColor);`:O`vec4 texColor = vec4(1.0);`}\n        ${_.attributeColor?O`\n        float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:O`\n        float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n        `}\n\n        gl_FragColor = vec4(opacity_);\n      }\n    `)),_.output===a.Color&&(P.include(i,_),P.include(u,_),P.include(b,_),P.include(M,_),_.receiveShadows&&P.include(y,_),_.multipassTerrainEnabled&&(P.fragment.include(p),P.include(f,_)),P.fragment.uniforms.add(\"cameraPosition\",\"vec3\").add(\"localOrigin\",\"vec3\").add(\"ambient\",\"vec3\").add(\"diffuse\",\"vec3\").add(\"opacity\",\"float\").add(\"layerOpacity\",\"float\"),P.fragment.uniforms.add(\"view\",\"mat4\"),_.hasColorTexture&&P.fragment.uniforms.add(\"tex\",\"sampler2D\"),P.include(w,_),P.include(h,_),P.fragment.include(j),F.add(O`\n      void main() {\n        discardBySlice(vpos);\n        ${_.multipassTerrainEnabled?O`terrainDepthTest(gl_FragCoord, depth);`:\"\"}\n        ${_.hasColorTexture?O`\n        vec4 texColor = texture2D(tex, vuv0);\n        ${_.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n        discardOrAdjustAlpha(texColor);`:O`vec4 texColor = vec4(1.0);`}\n        vec3 viewDirection = normalize(vpos - cameraPosition);\n        ${_.pbrMode===x.Normal?\"applyPBRFactors();\":\"\"}\n        float ssao = evaluateAmbientOcclusionInverse();\n        ssao *= getBakedOcclusion();\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\n        vec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n        ${_.receiveShadows?\"float shadow = readShadowMap(vpos, linearDepth);\":_.viewingMode===e.Global?\"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);\":\"float shadow = 0.0;\"}\n        vec3 matColor = max(ambient, diffuse);\n        ${_.attributeColor?O`\n        vec3 albedo_ = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:O`\n        vec3 albedo_ = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n        float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));\n        `}\n        ${O`\n        vec3 shadedNormal = normalize(vNormalWorld);\n        albedo_ *= 1.2;\n        vec3 viewForward = vec3(view[0][2], view[1][2], view[2][2]);\n        float alignmentLightView = clamp(dot(viewForward, -lightingMainDirection), 0.0, 1.0);\n        float transmittance = 1.0 - clamp(dot(viewForward, shadedNormal), 0.0, 1.0);\n        float treeRadialFalloff = vColor.r;\n        float backLightFactor = 0.5 * treeRadialFalloff * alignmentLightView * transmittance * (1.0 - shadow);\n        additionalLight += backLightFactor * lightingMainIntensity;`}\n        ${_.pbrMode===x.Normal||_.pbrMode===x.Schematic?_.viewingMode===e.Global?O`vec3 normalGround = normalize(vpos + localOrigin);`:O`vec3 normalGround = vec3(0.0, 0.0, 1.0);`:O``}\n        ${_.pbrMode===x.Normal||_.pbrMode===x.Schematic?O`\n            float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * lightingMainIntensity[2];\n            vec3 shadedColor = evaluateSceneLightingPBR(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight, viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);`:\"vec3 shadedColor = evaluateSceneLighting(shadedNormal, albedo_, shadow, 1.0 - ssao, additionalLight);\"}\n        gl_FragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${_.oitEnabled?\"gl_FragColor = premultiplyAlpha(gl_FragColor);\":\"\"}\n      }\n    `)),P.include(v,_),P}const P=Object.freeze({__proto__:null,build:_});export{P as R,_ as b};\n"]},"metadata":{},"sourceType":"module"}