{"ast":null,"code":"var _jsxFileName = \"D:\\\\Github\\\\CUSP_DataBase\\\\CUSP_DB\\\\src\\\\main\\\\gis\\\\src\\\\WellsinUT.js\",\n    _s = $RefreshSig$();\n\nimport CSVLayer from '@arcgis/core/layers/CSVLayer';\nimport Map from '@arcgis/core/Map';\nimport { useState } from \"react\";\nimport MapView from \"@arcgis/core/views/MapView\";\n/*\r\nconst MyMap = (props) => {\r\n    // Paste the url into a browser's address bar to download and view the attributes\r\n    // in the CSV file. These attributes include:\r\n    // * mag - magnitude\r\n    // * type - earthquake or other event such as nuclear test\r\n    // * place - location of the event\r\n    // * time - the time of the event\r\n\r\n    const template = {\r\n        title: \"Earthquake Info\",\r\n        content: \"Magnitude {mag} {type} hit {place} on {time}.\"\r\n    };\r\n\r\n    const url = \"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_week.csv\";\r\n    const csvLayer = new CSVLayer({\r\n        url: url,\r\n        copyright: \"USGS Earthquakes\",\r\n        popupTemplate: template\r\n    });\r\n\r\n    csvLayer.renderer = {\r\n        type: \"simple\", // autocasts as new SimpleRenderer()\r\n        symbol: {\r\n            type: \"point-3d\", // autocasts as new PointSymbol3D()\r\n            // for this symbol we use 2 symbol layers, one for the outer circle\r\n            // and one for the inner circle\r\n            symbolLayers: [{\r\n                type: \"icon\", // autocasts as new IconSymbol3DLayer()\r\n                resource: { primitive: \"circle\"},\r\n                material: { color: [255, 84, 54, 1] },\r\n                size: 5\r\n            }, {\r\n                type: \"icon\", // autocasts as new IconSymbol3DLayer()\r\n                resource: { primitive: \"circle\"},\r\n                material: { color: [255, 84, 54, 0] },\r\n                outline: {color: [255, 84, 54, 0.6], size: 1},\r\n                size: 25\r\n            }]\r\n        }\r\n    };\r\n\r\n    const map=new Map ({\r\n        basemap:\"streets-vector\"\r\n    });\r\n\r\n    map.add(csvLayer);\r\n\r\n    return map;\r\n}\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const map = new Map({\n    basemap: \"streets-vector\"\n  });\n  const view = new MapView({\n    container: \"root\",\n    map: map\n  });\n  const [lng, setLng] = useState(-111.2);\n  const [lat, setLat] = useState(40.5);\n  const [zoom, setZoom] = useState(6);\n  const template = {\n    title: \"Earthquake Info\",\n    content: \"Magnitude {mag} {type} hit {place} on {time}.\"\n  };\n  const url = \"\\\"https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv\";\n  const csvLayer = new CSVLayer({\n    //url: url,\n    copyright: \"USGS Earthquakes\",\n    popupTemplate: template\n  });\n  csvLayer.renderer = {\n    type: \"simple\",\n    // autocasts as new SimpleRenderer()\n    symbol: {\n      type: \"point-3d\",\n      // autocasts as new PointSymbol3D()\n      // for this symbol we use 2 symbol layers, one for the outer circle\n      // and one for the inner circle\n      symbolLayers: [{\n        type: \"icon\",\n        // autocasts as new IconSymbol3DLayer()\n        resource: {\n          primitive: \"circle\"\n        },\n        material: {\n          color: [255, 84, 54, 1]\n        },\n        size: 5\n      }, {\n        type: \"icon\",\n        // autocasts as new IconSymbol3DLayer()\n        resource: {\n          primitive: \"circle\"\n        },\n        material: {\n          color: [255, 84, 54, 0]\n        },\n        outline: {\n          color: [255, 84, 54, 0.6],\n          size: 1\n        },\n        size: 25\n      }]\n    }\n  };\n  map.add(csvLayer);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [\"Longitude: \", lng, \" | Latitude: \", lat, \" | Zoom: \", zoom]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"k5oGoxb8/MVflLKsFqPe0zHpBiE=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Github/CUSP_DataBase/CUSP_DB/src/main/gis/src/WellsinUT.js"],"names":["CSVLayer","Map","useState","MapView","App","map","basemap","view","container","lng","setLng","lat","setLat","zoom","setZoom","template","title","content","url","csvLayer","copyright","popupTemplate","renderer","type","symbol","symbolLayers","resource","primitive","material","color","size","outline","add"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,8BAArB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC1B,QAAMC,GAAG,GAAC,IAAIJ,GAAJ,CAAS;AACfK,IAAAA,OAAO,EAAC;AADO,GAAT,CAAV;AAGA,QAAMC,IAAI,GAAE,IAAIJ,OAAJ,CAAY;AACpBK,IAAAA,SAAS,EAAE,MADS;AAEpBH,IAAAA,GAAG,EAAEA;AAFe,GAAZ,CAAZ;AAIA,QAAM,CAACI,GAAD,EAAMC,MAAN,IAAgBR,QAAQ,CAAC,CAAC,KAAF,CAA9B;AACA,QAAM,CAACS,GAAD,EAAMC,MAAN,IAAgBV,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,CAAD,CAAhC;AAEA,QAAMa,QAAQ,GAAG;AACbC,IAAAA,KAAK,EAAE,iBADM;AAEbC,IAAAA,OAAO,EAAE;AAFI,GAAjB;AAKA,QAAMC,GAAG,GAAG,gGAAZ;AACA,QAAMC,QAAQ,GAAG,IAAInB,QAAJ,CAAa;AAC1B;AACAoB,IAAAA,SAAS,EAAE,kBAFe;AAG1BC,IAAAA,aAAa,EAAEN;AAHW,GAAb,CAAjB;AAMAI,EAAAA,QAAQ,CAACG,QAAT,GAAoB;AAChBC,IAAAA,IAAI,EAAE,QADU;AACA;AAChBC,IAAAA,MAAM,EAAE;AACJD,MAAAA,IAAI,EAAE,UADF;AACc;AAClB;AACA;AACAE,MAAAA,YAAY,EAAE,CAAC;AACXF,QAAAA,IAAI,EAAE,MADK;AACG;AACdG,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAFC;AAGXC,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,EAAN,EAAU,EAAV,EAAc,CAAd;AAAT,SAHC;AAIXC,QAAAA,IAAI,EAAE;AAJK,OAAD,EAKX;AACCP,QAAAA,IAAI,EAAE,MADP;AACe;AACdG,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAFX;AAGCC,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,EAAN,EAAU,EAAV,EAAc,CAAd;AAAT,SAHX;AAICE,QAAAA,OAAO,EAAE;AAACF,UAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,EAAN,EAAU,EAAV,EAAc,GAAd,CAAR;AAA4BC,UAAAA,IAAI,EAAE;AAAlC,SAJV;AAKCA,QAAAA,IAAI,EAAE;AALP,OALW;AAJV;AAFQ,GAApB;AAqBAzB,EAAAA,GAAG,CAAC2B,GAAJ,CAAQb,QAAR;AAEA,sBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gCACgBV,GADhB,mBACkCE,GADlC,eACgDE,IADhD;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAtDuBT,G;;KAAAA,G","sourcesContent":["import CSVLayer from '@arcgis/core/layers/CSVLayer';\r\nimport Map from '@arcgis/core/Map';\r\nimport {useState} from \"react\";\r\nimport MapView from \"@arcgis/core/views/MapView\";\r\n\r\n/*\r\nconst MyMap = (props) => {\r\n    // Paste the url into a browser's address bar to download and view the attributes\r\n    // in the CSV file. These attributes include:\r\n    // * mag - magnitude\r\n    // * type - earthquake or other event such as nuclear test\r\n    // * place - location of the event\r\n    // * time - the time of the event\r\n\r\n    const template = {\r\n        title: \"Earthquake Info\",\r\n        content: \"Magnitude {mag} {type} hit {place} on {time}.\"\r\n    };\r\n\r\n    const url = \"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_week.csv\";\r\n    const csvLayer = new CSVLayer({\r\n        url: url,\r\n        copyright: \"USGS Earthquakes\",\r\n        popupTemplate: template\r\n    });\r\n\r\n    csvLayer.renderer = {\r\n        type: \"simple\", // autocasts as new SimpleRenderer()\r\n        symbol: {\r\n            type: \"point-3d\", // autocasts as new PointSymbol3D()\r\n            // for this symbol we use 2 symbol layers, one for the outer circle\r\n            // and one for the inner circle\r\n            symbolLayers: [{\r\n                type: \"icon\", // autocasts as new IconSymbol3DLayer()\r\n                resource: { primitive: \"circle\"},\r\n                material: { color: [255, 84, 54, 1] },\r\n                size: 5\r\n            }, {\r\n                type: \"icon\", // autocasts as new IconSymbol3DLayer()\r\n                resource: { primitive: \"circle\"},\r\n                material: { color: [255, 84, 54, 0] },\r\n                outline: {color: [255, 84, 54, 0.6], size: 1},\r\n                size: 25\r\n            }]\r\n        }\r\n    };\r\n\r\n    const map=new Map ({\r\n        basemap:\"streets-vector\"\r\n    });\r\n\r\n    map.add(csvLayer);\r\n\r\n    return map;\r\n}\r\n*/\r\nexport default function App() {\r\n    const map=new Map ({\r\n        basemap:\"streets-vector\"\r\n    });\r\n    const view= new MapView({\r\n        container: \"root\",\r\n        map: map\r\n    });\r\n    const [lng, setLng] = useState(-111.2);\r\n    const [lat, setLat] = useState(40.5);\r\n    const [zoom, setZoom] = useState(6);\r\n\r\n    const template = {\r\n        title: \"Earthquake Info\",\r\n        content: \"Magnitude {mag} {type} hit {place} on {time}.\"\r\n    };\r\n\r\n    const url = \"\\\"https://developers.arcgis.com/javascript/latest//sample-code/layers-csv/live/earthquakes.csv\";\r\n    const csvLayer = new CSVLayer({\r\n        //url: url,\r\n        copyright: \"USGS Earthquakes\",\r\n        popupTemplate: template\r\n    });\r\n\r\n    csvLayer.renderer = {\r\n        type: \"simple\", // autocasts as new SimpleRenderer()\r\n        symbol: {\r\n            type: \"point-3d\", // autocasts as new PointSymbol3D()\r\n            // for this symbol we use 2 symbol layers, one for the outer circle\r\n            // and one for the inner circle\r\n            symbolLayers: [{\r\n                type: \"icon\", // autocasts as new IconSymbol3DLayer()\r\n                resource: { primitive: \"circle\"},\r\n                material: { color: [255, 84, 54, 1] },\r\n                size: 5\r\n            }, {\r\n                type: \"icon\", // autocasts as new IconSymbol3DLayer()\r\n                resource: { primitive: \"circle\"},\r\n                material: { color: [255, 84, 54, 0] },\r\n                outline: {color: [255, 84, 54, 0.6], size: 1},\r\n                size: 25\r\n            }]\r\n        }\r\n    };\r\n\r\n    map.add(csvLayer);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"sidebar\">\r\n                Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\r\n            </div>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}