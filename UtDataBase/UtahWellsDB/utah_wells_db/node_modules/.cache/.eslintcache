[{"D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\index.tsx":"1","D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\reportWebVitals.ts":"2","D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\App.tsx":"3","D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\elements\\WellsList.tsx":"4","D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\services\\WellService.ts":"5","D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\http-common.ts":"6","D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\layout\\Layout.tsx":"7","D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\useMap\\useMap.tsx":"8","D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\layerControl\\LayerControl.tsx":"9","D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\services\\MapService.tsx":"10","D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\data\\SpatialData.tsx":"11","D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\basemap\\Basemap.tsx":"12","D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\elements\\elementControl.tsx":"13","D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\elements\\addressSearch.tsx":"14","D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\elements\\xySearch.tsx":"15","D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\elements\\bufferS.tsx":"16"},{"size":42285,"mtime":1652216670226,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":1352,"mtime":1651265454659,"results":"20","hashOfConfig":"18"},{"size":4578,"mtime":1651091770079,"results":"21","hashOfConfig":"18"},{"size":468,"mtime":1651011422384,"results":"22","hashOfConfig":"18"},{"size":252,"mtime":1651085678998,"results":"23","hashOfConfig":"18"},{"size":764,"mtime":1651178857995,"results":"24","hashOfConfig":"18"},{"size":5641,"mtime":1651255182575,"results":"25","hashOfConfig":"18"},{"size":1005,"mtime":1651179467610,"results":"26","hashOfConfig":"18"},{"size":410,"mtime":1651169473070,"results":"27","hashOfConfig":"18"},{"size":943,"mtime":1651252981681,"results":"28","hashOfConfig":"18"},{"size":1094,"mtime":1651252680686,"results":"29","hashOfConfig":"18"},{"size":522,"mtime":1652211842262,"results":"30","hashOfConfig":"18"},{"size":4592,"mtime":1652216028485,"results":"31","hashOfConfig":"18"},{"size":4815,"mtime":1652216365706,"results":"32","hashOfConfig":"18"},{"size":5055,"mtime":1652216814344,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},"124w3hs",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\index.tsx",["86","87","88","89","90","91","92","93","94","95","96","97"],[],"D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\reportWebVitals.ts",[],[],[],"D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\App.tsx",["98","99","100","101"],[],"import * as React from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {Routes, Route, Link} from \"react-router-dom\";\nimport Boreholes from \"./elements/WellsList\";\nimport {Layout} from \"./layout/Layout\";\n\nimport './App.css';\nimport Map from './basemap/Basemap';\n\n\n\nclass App extends React.Component {\n    \n    public render() {\n        return (\n        <div className=\"well-map-wrapper\">\n            <Layout>\n                <Map />\n            </Layout>\n        </div>);\n        /*\n        return (\n            <div>\n                 <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          <Link to={\"/boreholes\"} className=\"navbar-brand\">\n            bezKoder\n          </Link>\n          <div className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to={\"/boreholes/4304120208\"} className=\"nav-link\">\n                boreholes\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to={\"/add\"} className=\"nav-link\">\n                Add\n              </Link>\n            </li>\n          </div>\n        </nav>\n                <div>\n                <Routes>\n                    <Route path=\"/boreholes/4304120208\" element={<Boreholes/>}/>\n                </Routes>\n                </div>\n            </div>\n        );*/\n    }\n}\n\nexport default App;\n","D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\elements\\WellsList.tsx",[],[],"D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\services\\WellService.ts",[],[],"D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\http-common.ts",[],[],"D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\layout\\Layout.tsx",[],[],"D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\useMap\\useMap.tsx",["102"],[],"import {useCallback, useEffect, useState, useRef} from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport MapService from \"../services/MapService\";\r\nimport {Sources, Layers} from \"../data/SpatialData\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Popup = ({ featureName, featureNumber, field, type }: { featureName: any, featureNumber: any, field: any, type: any }) => (\r\n  <div className=\"popup\">\r\n    <p className=\"popField\">WellName: {featureName}</p>\r\n    <p className=\"popField\">API: {featureNumber}</p>\r\n    <p className=\"popField\">WellType: {type}</p>\r\n    <p className=\"popField\">FieldName: {field}</p>\r\n  </div>\r\n);\r\n\r\nexport const useMap = (ref: any, mapConfig: any) => {\r\n    const [map, setMap] = useState<typeof ref.current | null>(null);\r\n    const [mapStatus, setMapStatus] = useState({\r\n      map: {\r\n        created: false,\r\n        loaded: false,\r\n      },\r\n      sources: {\r\n        loaded: false,\r\n        added: false,\r\n      },\r\n      layers: {\r\n        loaded: false,\r\n        added: false,\r\n      },\r\n    });\r\n    const [sources, setSources] = useState([]);\r\n    const [layers, setLayers] = useState<typeof Layers[]>([]);\r\n    const popUpRef = useRef(new mapboxgl.Popup({ offset: 15 }));\r\n  \r\n    useEffect(() => {\r\n      if (ref?.current && !mapStatus.map.created) {\r\n        const newMap = new mapboxgl.Map({\r\n          container: ref.current?? '',\r\n          ...mapConfig,\r\n        });\r\n        setMap(newMap);\r\n        setMapStatus((s) => ({\r\n          ...s,\r\n          map: {\r\n            ...s.map,\r\n            created: true,\r\n          },\r\n        }));\r\n        newMap.on(\"load\", () => {\r\n          setMapStatus((s) => ({\r\n            ...s,\r\n            map: {\r\n              ...s.map,\r\n              loaded: true,\r\n            },\r\n          }));\r\n        });\r\n      }\r\n    }, [ref, mapConfig, mapStatus.map.created]);\r\n  \r\n    const loadMapData = useCallback(() => {\r\n      const shouldLoadData =\r\n        !!map && mapStatus.map.loaded && !mapStatus.sources.loaded;\r\n      async function loadData() {\r\n        const fetchedSources: any = await MapService.getSources();\r\n        const fetchedLayers: any = await MapService.getLayers();\r\n        setSources(fetchedSources);\r\n        setLayers(fetchedLayers);\r\n        if (!mapStatus.sources.added) {\r\n          fetchedSources.forEach((source: { id: any; }) => {\r\n            const cleanedSource = { ...source };\r\n            delete cleanedSource.id;\r\n            map.addSource(source.id, cleanedSource);\r\n          });\r\n  \r\n          if (!mapStatus.layers.added) {\r\n            fetchedLayers.forEach((layer: any) => {\r\n              map.addLayer(layer);\r\n            });\r\n          }\r\n        }\r\n        setMapStatus((s) => ({\r\n          ...s,\r\n          sources: {\r\n            loaded: true,\r\n            added: true,\r\n          },\r\n          layers: {\r\n            loaded: true,\r\n            added: true,\r\n          },\r\n        }));\r\n\r\n        /**\r\n           * Event handler for defining what happens when a user clicks on the map\r\n           * In this example, we are checking if the user has clicked on one or more feature layers\r\n           * If they have, we want to render a popup with the data for the selected\r\n           * bus feature\r\n           * Else, do nothing\r\n           */\r\n          //build  a Popup component used to render a map popup with information for chosen feature\r\n                    \r\n        map.on(\"click\", (e: { point: any; lngLat: any; }) => {\r\n          const features = map.queryRenderedFeatures(e.point, {\r\n            layers: [\"wellsInUTLayer\"],\r\n          });\r\n          if (features.length > 0) {\r\n            const feature = features[0];\r\n            {\r\n              // create popup node\r\n              const popupNode = document.createElement(\"div\");\r\n              ReactDOM.render(\r\n                <Popup\r\n                  featureName={feature?.properties?.wellname}\r\n                  featureNumber={feature?.properties?.api}\r\n                  field={feature?.properties?.fieldname}\r\n                  type={feature?.properties?.welltype}\r\n                />,\r\n                popupNode\r\n              );\r\n              popUpRef.current\r\n                .setLngLat(e.lngLat)\r\n                .setDOMContent(popupNode)\r\n                .addTo(map);\r\n            }\r\n          }\r\n        });\r\n        // Change the cursor to a pointer when the mouse is over the places layer.\r\n        map.on('mouseenter', \"wellsInUTLayer\", () => {\r\n          map.getCanvas().style.cursor = 'pointer';\r\n        });\r\n\r\n        // Change it back to a pointer when it leaves.\r\n        map.on('mouseleave', \"wellsInUTLayer\", () => {\r\n          map.getCanvas().style.cursor = '';\r\n        });\r\n      }\r\n      if (shouldLoadData) {\r\n        loadData();\r\n      }\r\n    }, [map, mapStatus.map.loaded, mapStatus.sources, mapStatus.layers]);\r\n  \r\n    const updateLayerVisibility = (id: any, visible: any) => {\r\n      if (!!map && !!map.getLayer(id)) {\r\n        const visibleValue = visible ? \"visible\" : \"none\";\r\n        map.setLayoutProperty(id, \"visibility\", visibleValue);\r\n        setLayers((s) => {\r\n          return s.map((layer: any) => {\r\n            if (layer.id === id) {\r\n              return {\r\n                ...layer,\r\n                layout: {\r\n                  ...layer.layout,\r\n                  visibility: visibleValue,\r\n                },\r\n              };\r\n            }\r\n            return layer;\r\n          });\r\n        });\r\n      }\r\n    };\r\n  \r\n    useEffect(() => {\r\n      loadMapData();\r\n    }, [loadMapData]);\r\n  \r\n    return {\r\n      layers,\r\n      map,\r\n      sources,\r\n      updateLayerVisibility,\r\n    };\r\n  };","D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\layerControl\\LayerControl.tsx",[],[],"D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\services\\MapService.tsx",[],[],"D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\data\\SpatialData.tsx",[],[],"D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\basemap\\Basemap.tsx",["103","104","105","106","107","108","109"],[],"import React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport {useMap} from '../useMap/useMap';\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport s from \"./Map.module.css\";\nimport {LayerControl} from \"../layerControl/LayerControl\";\n//import {Source} from \"react-map-gl\";\n//import Layer from \"react-mapbox-gl/lib-esm/layer\"; // eslint-disable-line import/no-webpack-loader-syntax\n\nmapboxgl.accessToken = 'pk.eyJ1Ijoic2xjbGVpIiwiYSI6ImNsMXV6czRnYjJkbnQzZG1qMHRxeGd0YmoifQ.mvtESpI1GCIdTrWSupNEIw';\n\nexport default function Wellmap() {\n  const mapContainer = useRef(null);\n  const [lng, setLong] = useState(-111.6);\n  const [lat, setLat] = useState(39.2);\n  const [zoom, setZoom] = useState(6);\n  const [height,setHight]=useState(1500);\n\n  const { layers, map, updateLayerVisibility } = useMap(mapContainer, {\n    style: \"mapbox://styles/mapbox/outdoors-v11\",\n    center: [lng,lat],\n    zoom: zoom,\n  });\n\n  return (\n    <div id=\"map\" className={s.map} ref={mapContainer}>\n      <LayerControl layers={layers} onToggle={updateLayerVisibility} />\n    </div>\n  );\n}\n","D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\elements\\elementControl.tsx",["110"],[],"D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\elements\\addressSearch.tsx",["111"],[],"D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\elements\\xySearch.tsx",["112"],[],"D:\\Github\\UTDB\\UtDataBase\\UtahWellsDB\\utah_wells_db\\src\\elements\\bufferS.tsx",["113"],[],{"ruleId":"114","severity":1,"message":"115","line":50,"column":13,"nodeType":"116","messageId":"117","endLine":55,"endColumn":14,"fix":"118"},{"ruleId":"119","severity":1,"message":"120","line":60,"column":13,"nodeType":"116","endLine":64,"endColumn":14},{"ruleId":"121","severity":1,"message":"122","line":61,"column":20,"nodeType":"123","messageId":"124","endLine":61,"endColumn":44},{"ruleId":"119","severity":1,"message":"120","line":82,"column":13,"nodeType":"116","endLine":86,"endColumn":14},{"ruleId":"121","severity":1,"message":"122","line":83,"column":20,"nodeType":"123","messageId":"124","endLine":83,"endColumn":41},{"ruleId":"119","severity":1,"message":"125","line":91,"column":13,"nodeType":"116","endLine":99,"endColumn":14},{"ruleId":"119","severity":1,"message":"120","line":631,"column":27,"nodeType":"116","endLine":636,"endColumn":28},{"ruleId":"119","severity":1,"message":"120","line":644,"column":27,"nodeType":"116","endLine":649,"endColumn":28},{"ruleId":"126","severity":1,"message":"127","line":717,"column":29,"nodeType":"116","endLine":717,"endColumn":78},{"ruleId":"114","severity":1,"message":"115","line":1032,"column":11,"nodeType":"116","messageId":"117","endLine":1032,"endColumn":63,"fix":"128"},{"ruleId":"114","severity":1,"message":"115","line":1036,"column":11,"nodeType":"116","messageId":"117","endLine":1036,"endColumn":59,"fix":"129"},{"ruleId":"130","severity":1,"message":"131","line":1086,"column":10,"nodeType":"132","messageId":"133","endLine":1086,"endColumn":21},{"ruleId":"130","severity":1,"message":"134","line":3,"column":9,"nodeType":"132","messageId":"133","endLine":3,"endColumn":15},{"ruleId":"130","severity":1,"message":"135","line":3,"column":17,"nodeType":"132","messageId":"133","endLine":3,"endColumn":22},{"ruleId":"130","severity":1,"message":"136","line":3,"column":24,"nodeType":"132","messageId":"133","endLine":3,"endColumn":28},{"ruleId":"130","severity":1,"message":"137","line":4,"column":8,"nodeType":"132","messageId":"133","endLine":4,"endColumn":17},{"ruleId":"130","severity":1,"message":"138","line":4,"column":9,"nodeType":"132","messageId":"133","endLine":4,"endColumn":16},{"ruleId":"130","severity":1,"message":"139","line":1,"column":25,"nodeType":"132","messageId":"133","endLine":1,"endColumn":34},{"ruleId":"130","severity":1,"message":"140","line":14,"column":15,"nodeType":"132","messageId":"133","endLine":14,"endColumn":22},{"ruleId":"130","severity":1,"message":"141","line":15,"column":15,"nodeType":"132","messageId":"133","endLine":15,"endColumn":21},{"ruleId":"130","severity":1,"message":"142","line":16,"column":16,"nodeType":"132","messageId":"133","endLine":16,"endColumn":23},{"ruleId":"130","severity":1,"message":"143","line":17,"column":10,"nodeType":"132","messageId":"133","endLine":17,"endColumn":16},{"ruleId":"130","severity":1,"message":"144","line":17,"column":17,"nodeType":"132","messageId":"133","endLine":17,"endColumn":25},{"ruleId":"130","severity":1,"message":"145","line":19,"column":19,"nodeType":"132","messageId":"133","endLine":19,"endColumn":22},{"ruleId":"130","severity":1,"message":"146","line":2,"column":8,"nodeType":"132","messageId":"133","endLine":2,"endColumn":16},{"ruleId":"130","severity":1,"message":"146","line":2,"column":8,"nodeType":"132","messageId":"133","endLine":2,"endColumn":16},{"ruleId":"130","severity":1,"message":"146","line":2,"column":8,"nodeType":"132","messageId":"133","endLine":2,"endColumn":16},{"ruleId":"130","severity":1,"message":"146","line":2,"column":8,"nodeType":"132","messageId":"133","endLine":2,"endColumn":16},"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"147","text":"148"},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"range":"149","text":"148"},{"range":"150","text":"148"},"@typescript-eslint/no-unused-vars","'exportToCsv' is defined but never used.","Identifier","unusedVar","'Routes' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'Boreholes' is defined but never used.","'Sources' is defined but never used.","'useEffect' is defined but never used.","'setLong' is assigned a value but never used.","'setLat' is assigned a value but never used.","'setZoom' is assigned a value but never used.","'height' is assigned a value but never used.","'setHight' is assigned a value but never used.","'map' is assigned a value but never used.","'ReactDOM' is defined but never used.",[1511,1511]," rel=\"noreferrer\"",[40815,40815],[40958,40958]]