{"ast":null,"code":"var _jsxFileName = \"D:\\\\Github\\\\UTDB\\\\UtDataBase\\\\UtahWellsDB\\\\utah_wells_db\\\\src\\\\searchBox\\\\SearchResult.tsx\";\nimport React, { useState } from \"react\";\nimport WellService from \"../services/WellService\";\nimport Square from \"./Onclick\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [resultList, setresultList] = useState([]);\n\nclass NewResult extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      message: 'Filter New Result',\n      onClick: async () => {\n        //get information from compareAPI and API elements for search by API\n        let tmpArr = resultList;\n\n        if (document.getElementById('compareAPI') && document.getElementById('API') && result) {\n          //get api value and operation\n          const apiValue = document.getElementById('API').value;\n          const apiOperation = document.getElementById('compareAPI').value; //in case of \"=\" operation, get result from server, and write it to result\n\n          if (apiOperation === \"=\") {\n            //get result from getAPI; promise type\n            const apiResult = WellService.getAPI(apiValue);\n            const tmp = [];\n            apiResult.then(res => {\n              tmp.push(res.data.api);\n              tmp.push(res.data.wellName);\n              tmp.push(res.data.county);\n              tmp.push(res.data.wellType);\n            }).catch(err => {\n              console.log(err);\n            });\n\n            if (tmp.length > 0) {\n              tmpArr.push(tmp);\n            }\n          }\n        }\n\n        setresultList(tmpArr);\n        return;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nclass SearchResult extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"API\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"WellName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"County\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"WellType\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: resultList.length > 0 && resultList.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 67\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport { NewResult, SearchResult };","map":{"version":3,"sources":["D:/Github/UTDB/UtDataBase/UtahWellsDB/utah_wells_db/src/searchBox/SearchResult.tsx"],"names":["React","useState","WellService","Square","resultList","setresultList","NewResult","Component","render","tmpArr","document","getElementById","result","apiValue","value","apiOperation","apiResult","getAPI","tmp","then","res","push","data","api","wellName","county","wellType","catch","err","console","log","length","SearchResult","constructor","props","map","item"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,MAAM,CAACC,UAAD,EAAYC,aAAZ,IAA2BJ,QAAQ,CAAM,EAAN,CAAzC;;AAEA,MAAMK,SAAN,SAAwBN,KAAK,CAACO,SAA9B,CAAwC;AACpCC,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,MAAD;AACG,MAAA,OAAO,EAAK,mBADf;AAEG,MAAA,OAAO,EAAK,YAAY;AACvB;AACA,YAAIC,MAAM,GAACL,UAAX;;AACA,YAAGM,QAAQ,CAACC,cAAT,CAAwB,YAAxB,KAAyCD,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAzC,IAA2EC,MAA9E,EAAqF;AACnF;AACE,gBAAMC,QAAQ,GAACH,QAAQ,CAACC,cAAT,CAAwB,KAAxB,EAAgCG,KAA/C;AACA,gBAAMC,YAAY,GAACL,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAuCG,KAA1D,CAHiF,CAIjF;;AACA,cAAIC,YAAY,KAAG,GAAnB,EAAuB;AACnB;AACA,kBAAMC,SAAS,GAACd,WAAW,CAACe,MAAZ,CAAmBJ,QAAnB,CAAhB;AACA,kBAAMK,GAAU,GAAC,EAAjB;AAEAF,YAAAA,SAAS,CACTG,IADA,CACMC,GAAD,IAAO;AACRF,cAAAA,GAAG,CAACG,IAAJ,CAASD,GAAG,CAACE,IAAJ,CAASC,GAAlB;AACAL,cAAAA,GAAG,CAACG,IAAJ,CAASD,GAAG,CAACE,IAAJ,CAASE,QAAlB;AACAN,cAAAA,GAAG,CAACG,IAAJ,CAASD,GAAG,CAACE,IAAJ,CAASG,MAAlB;AACAP,cAAAA,GAAG,CAACG,IAAJ,CAASD,GAAG,CAACE,IAAJ,CAASI,QAAlB;AACH,aAND,EAOCC,KAPD,CAOQC,GAAD,IAAO;AACVC,cAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,aATD;;AAUA,gBAAIV,GAAG,CAACa,MAAJ,GAAW,CAAf,EAAiB;AACbtB,cAAAA,MAAM,CAACY,IAAP,CAAYH,GAAZ;AACH;AACJ;AACJ;;AAEDb,QAAAA,aAAa,CAACI,MAAD,CAAb;AACA;AACD;AAjCH;AAAA;AAAA;AAAA;AAAA,YADF;AAqCD;;AAvCmC;;AA2CxC,MAAMuB,YAAN,SAA2BhC,KAAK,CAACO,SAAjC,CAA2C;AACvC0B,EAAAA,WAAW,CAACC,KAAD,EAAY;AACnB,UAAMA,KAAN;AACH;;AACD1B,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACA;AAAA,+BACE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADA,eASA;AAAA,+BACE;AAAA,oBACKJ,UAAU,CAAC2B,MAAX,GAAkB,CAAlB,IAAuB3B,UAAU,CAAC+B,GAAX,CAAgBC,IAAD,iBAAa;AAAA,sBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,kBAA5B;AAD5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cATA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAiBD;;AAtBsC;;AA0B3C,SAAQ9B,SAAR,EAAkB0B,YAAlB","sourcesContent":["import React, { useState } from \"react\";\r\nimport WellService from \"../services/WellService\";\r\nimport Square from \"./Onclick\";\r\n\r\nconst [resultList,setresultList]=useState<any>([]);\r\n\r\nclass NewResult extends React.Component {\r\n    render() {\r\n      return (\r\n        <Square\r\n           message = { 'Filter New Result' }\r\n           onClick = { async () => {  \r\n            //get information from compareAPI and API elements for search by API\r\n            let tmpArr=resultList;\r\n            if(document.getElementById('compareAPI') && document.getElementById('API') && result){\r\n              //get api value and operation\r\n                const apiValue=document.getElementById('API')!.value;   \r\n                const apiOperation=document.getElementById('compareAPI')!.value;\r\n                //in case of \"=\" operation, get result from server, and write it to result\r\n                if (apiOperation===\"=\"){\r\n                    //get result from getAPI; promise type\r\n                    const apiResult=WellService.getAPI(apiValue);\r\n                    const tmp: any[]=[];\r\n\r\n                    apiResult.\r\n                    then((res)=>{\r\n                        tmp.push(res.data.api);\r\n                        tmp.push(res.data.wellName);\r\n                        tmp.push(res.data.county);\r\n                        tmp.push(res.data.wellType);\r\n                    })\r\n                    .catch((err)=>{\r\n                        console.log(err);\r\n                    });\r\n                    if (tmp.length>0){\r\n                        tmpArr.push(tmp);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            setresultList(tmpArr);\r\n            return\r\n          }   }\r\n        />\r\n      );\r\n    }\r\n}\r\n\r\n\r\nclass SearchResult extends React.Component {\r\n    constructor(props: any){\r\n        super(props);\r\n    }\r\n    render() {\r\n      return (\r\n        <table>\r\n        <thead>\r\n          <tr>\r\n            <th>API</th>\r\n            <th>WellName</th>\r\n            <th>County</th>\r\n            <th>WellType</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <ul>\r\n              {resultList.length>0 && resultList.map((item: any)=><li>{item}</li>)}\r\n          </ul>\r\n        </tbody>\r\n      </table>\r\n      );\r\n    }\r\n}\r\n\r\n\r\nexport {NewResult,SearchResult}"]},"metadata":{},"sourceType":"module"}