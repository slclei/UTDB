{"ast":null,"code":"var _jsxFileName = \"D:\\\\Github\\\\UTDB\\\\UtDataBase\\\\UtahWellsDB\\\\utah_wells_db\\\\src\\\\basemap\\\\Basemap.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport { useMap } from '../useMap/useMap';\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport s from \"./Map.module.css\";\nimport { LayerControl } from \"../layerControl/LayerControl\";\nimport ReactDOM from \"react-dom\"; //import {Source} from \"react-map-gl\";\n//import Layer from \"react-mapbox-gl/lib-esm/layer\"; // eslint-disable-line import/no-webpack-loader-syntax\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = 'pk.eyJ1Ijoic2xjbGVpIiwiYSI6ImNsMXV6czRnYjJkbnQzZG1qMHRxeGd0YmoifQ.mvtESpI1GCIdTrWSupNEIw'; //build  a Popup component used to render a map popup with information for chosen feature\n\nconst Popup = _ref => {\n  let {\n    featureName,\n    featureNumber,\n    field,\n    type\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"popup\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"feature-name\",\n      children: featureName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feature-metric-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"row-title\",\n        children: \"feature #\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row-value\",\n        children: featureNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feature-metric-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"row-title\",\n        children: \"feature Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row-value\",\n        children: type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"feature-field\",\n      children: [\"Serves \", field]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 3\n  }, this);\n};\n\n_c = Popup;\nexport default function Wellmap() {\n  _s();\n\n  const mapContainer = useRef(null);\n  const [lng, setLong] = useState(-111.6);\n  const [lat, setLat] = useState(39.2);\n  const [zoom, setZoom] = useState(6);\n  const [height, setHight] = useState(1500);\n  const {\n    layers,\n    map,\n    updateLayerVisibility\n  } = useMap(mapContainer, {\n    style: \"mapbox://styles/mapbox/outdoors-v11\",\n    center: [lng, lat],\n    zoom: zoom\n  });\n  /**\n     * Event handler for defining what happens when a user clicks on the map\n     * In this example, we are checking if the user has clicked on one or more feature layers\n     * If they have, we want to render a popup with the data for the selected\n     * bus feature\n     * Else, do nothing\n     */\n\n  const popUpRef = useRef(new mapboxgl.Popup({\n    offset: 15\n  }));\n  map.on(\"click\", e => {\n    const features = map.queryRenderedFeatures(e.point, {\n      layers: [\"wellsInUTLayer\"]\n    });\n\n    if (features.length > 0) {\n      const feature = features[0];\n      {\n        var _feature$properties, _feature$properties2, _feature$properties3, _feature$properties4;\n\n        // create popup node\n        const popupNode = document.createElement(\"div\");\n        ReactDOM.render( /*#__PURE__*/_jsxDEV(Popup, {\n          featureName: feature === null || feature === void 0 ? void 0 : (_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.wellname,\n          featureNumber: feature === null || feature === void 0 ? void 0 : (_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.api,\n          field: feature === null || feature === void 0 ? void 0 : (_feature$properties3 = feature.properties) === null || _feature$properties3 === void 0 ? void 0 : _feature$properties3.fieldname,\n          type: feature === null || feature === void 0 ? void 0 : (_feature$properties4 = feature.properties) === null || _feature$properties4 === void 0 ? void 0 : _feature$properties4.welltype\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), popupNode);\n        popUpRef.current.setLngLat(e.lngLat).setDOMContent(popupNode).addTo(map);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    className: s.map,\n    ref: mapContainer,\n    children: /*#__PURE__*/_jsxDEV(LayerControl, {\n      layers: layers,\n      onToggle: updateLayerVisibility\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Wellmap, \"MUMEg51HvXoiNN8bFtfUpho/IcQ=\", false, function () {\n  return [useMap];\n});\n\n_c2 = Wellmap;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Popup\");\n$RefreshReg$(_c2, \"Wellmap\");","map":{"version":3,"sources":["D:/Github/UTDB/UtDataBase/UtahWellsDB/utah_wells_db/src/basemap/Basemap.tsx"],"names":["React","useRef","useState","mapboxgl","useMap","s","LayerControl","ReactDOM","accessToken","Popup","featureName","featureNumber","field","type","Wellmap","mapContainer","lng","setLong","lat","setLat","zoom","setZoom","height","setHight","layers","map","updateLayerVisibility","style","center","popUpRef","offset","on","e","features","queryRenderedFeatures","point","length","feature","popupNode","document","createElement","render","properties","wellname","api","fieldname","welltype","current","setLngLat","lngLat","setDOMContent","addTo"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport {useMap} from '../useMap/useMap';\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport s from \"./Map.module.css\";\nimport {LayerControl} from \"../layerControl/LayerControl\";\nimport ReactDOM from \"react-dom\";\n//import {Source} from \"react-map-gl\";\n//import Layer from \"react-mapbox-gl/lib-esm/layer\"; // eslint-disable-line import/no-webpack-loader-syntax\n\nmapboxgl.accessToken = 'pk.eyJ1Ijoic2xjbGVpIiwiYSI6ImNsMXV6czRnYjJkbnQzZG1qMHRxeGd0YmoifQ.mvtESpI1GCIdTrWSupNEIw';\n\n//build  a Popup component used to render a map popup with information for chosen feature\nconst Popup = ({ featureName, featureNumber, field, type }: { featureName: any, featureNumber: any, field: any, type:any }) => (\n  <div className=\"popup\">\n    <h3 className=\"feature-name\">{featureName}</h3>\n    <div className=\"feature-metric-row\">\n      <h4 className=\"row-title\">feature #</h4>\n      <div className=\"row-value\">{featureNumber}</div>\n    </div>\n    <div className=\"feature-metric-row\">\n      <h4 className=\"row-title\">feature Type</h4>\n      <div className=\"row-value\">{type}</div>\n    </div>\n    <p className=\"feature-field\">Serves {field}</p>\n  </div>\n);\n\nexport default function Wellmap() {\n  const mapContainer = useRef(null);\n  const [lng, setLong] = useState(-111.6);\n  const [lat, setLat] = useState(39.2);\n  const [zoom, setZoom] = useState(6);\n  const [height,setHight]=useState(1500);\n\n  const { layers, map, updateLayerVisibility } = useMap(mapContainer, {\n    style: \"mapbox://styles/mapbox/outdoors-v11\",\n    center: [lng,lat],\n    zoom: zoom,\n  });\n\n  /**\n     * Event handler for defining what happens when a user clicks on the map\n     * In this example, we are checking if the user has clicked on one or more feature layers\n     * If they have, we want to render a popup with the data for the selected\n     * bus feature\n     * Else, do nothing\n     */\n   const popUpRef = useRef(new mapboxgl.Popup({ offset: 15 }));\n   map.on(\"click\", (e: { point: any; lngLat: any; }) => {\n    const features = map.queryRenderedFeatures(e.point, {\n      layers: [\"wellsInUTLayer\"],\n    });\n    if (features.length > 0) {\n      const feature=features[0];\n      {\n        // create popup node\n        const popupNode = document.createElement(\"div\");\n        ReactDOM.render(\n          <Popup\n            featureName={feature?.properties?.wellname}\n            featureNumber={feature?.properties?.api}\n            field={feature?.properties?.fieldname}\n            type={feature?.properties?.welltype}\n          />,\n          popupNode\n        );\n        popUpRef.current\n          .setLngLat(e.lngLat)\n          .setDOMContent(popupNode)\n          .addTo(map);\n      }\n    }\n  });\n\n  return (\n    <div id=\"map\" className={s.map} ref={mapContainer}>\n      <LayerControl layers={layers} onToggle={updateLayerVisibility} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}