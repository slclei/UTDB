{"ast":null,"code":"var _jsxFileName = \"D:\\\\Github\\\\UTDB\\\\UtDataBase\\\\UtahWellsDB\\\\utah_wells_db\\\\src\\\\basemap\\\\Basemap.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport { useMap } from '../useMap/useMap';\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport s from \"./Map.module.css\";\nimport { LayerControl } from \"../layerControl/LayerControl\";\nimport ReactDOM from \"react-dom\"; //import {Source} from \"react-map-gl\";\n//import Layer from \"react-mapbox-gl/lib-esm/layer\"; // eslint-disable-line import/no-webpack-loader-syntax\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = 'pk.eyJ1Ijoic2xjbGVpIiwiYSI6ImNsMXV6czRnYjJkbnQzZG1qMHRxeGd0YmoifQ.mvtESpI1GCIdTrWSupNEIw';\nexport function Wellmap() {\n  _s();\n\n  const mapContainer = useRef(null);\n  const [lng, setLong] = useState(-111.6);\n  const [lat, setLat] = useState(39.2);\n  const [zoom, setZoom] = useState(6);\n  const [height, setHight] = useState(1500);\n  const {\n    layers,\n    map,\n    updateLayerVisibility\n  } = useMap(mapContainer, {\n    style: \"mapbox://styles/mapbox/outdoors-v11\",\n    center: [lng, lat],\n    zoom: zoom\n  });\n  /**\n   * Event handler for defining what happens when a user clicks on the map\n   * In this example, we are checking if the user has clicked on one or more feature layers\n   * If they have, we want to render a popup with the data for the selected\n   * bus feature\n   * Else, do nothing\n   */\n  //build  a Popup component used to render a map popup with information for chosen feature\n\n  map.on(\"click\", e => {\n    const features = map.queryRenderedFeatures(e.point, {\n      layers: [\"wellsInUTLayer\"]\n    });\n\n    if (features.length > 0) {\n      const feature = features[0];\n      {\n        var _feature$properties, _feature$properties2, _feature$properties3, _feature$properties4;\n\n        // create popup node\n        const popupNode = document.createElement(\"div\");\n        ReactDOM.render( /*#__PURE__*/_jsxDEV(Popup, {\n          featureName: feature === null || feature === void 0 ? void 0 : (_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.wellname,\n          featureNumber: feature === null || feature === void 0 ? void 0 : (_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.api,\n          field: feature === null || feature === void 0 ? void 0 : (_feature$properties3 = feature.properties) === null || _feature$properties3 === void 0 ? void 0 : _feature$properties3.fieldname,\n          type: feature === null || feature === void 0 ? void 0 : (_feature$properties4 = feature.properties) === null || _feature$properties4 === void 0 ? void 0 : _feature$properties4.welltype\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 19\n        }, this), popupNode);\n        popUpRef.current.setLngLat(e.lngLat).setDOMContent(popupNode).addTo(map);\n      }\n    }\n  }); // Change the cursor to a pointer when the mouse is over the places layer.\n\n  map.on('mouseenter', \"wellsInUTLayer\", () => {\n    map.getCanvas().style.cursor = 'pointer';\n  }); // Change it back to a pointer when it leaves.\n\n  map.on('mouseleave', \"wellsInUTLayer\", () => {\n    map.getCanvas().style.cursor = '';\n  });\n  map.on('mousemove', e => {\n    const features = map.queryRenderedFeatures(e.point, {\n      layers: [\"wellsInUTLayer\"]\n    }); // Limit the number of properties we're displaying for\n    // legibility and performance\n\n    const displayProperties = ['type', 'properties'];\n    const displayFeatures = features.map(feat => {\n      const displayFeat = {};\n      displayProperties.forEach(prop => {\n        displayFeat[prop] = feat[prop];\n      });\n      return displayFeat;\n    }); // Write object as string with an indent of two spaces.\n\n    document.getElementById('features').innerHTML = JSON.stringify(displayFeatures, null, 2);\n  });\n\n  class LayerControlWhole extends React.Component {\n    constructor() {\n      super(...arguments);\n      this.state = {\n        showing: false\n      };\n    }\n\n    render() {\n      const {\n        showing\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"LayerC\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          style: {\n            cursor: \"pointer\"\n          },\n          className: \"material-icons md-50\",\n          id: \"layersIcon\",\n          \"uib-tooltip\": \"Layers\",\n          onClick: () => this.setState({\n            showing: !showing\n          }),\n          children: \"layers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"popover-message\",\n          children: \"Layer Control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this), showing ? /*#__PURE__*/_jsxDEV(LayerControl, {\n          id: \"inMapLegend2\",\n          layers: layers,\n          onToggle: updateLayerVisibility\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 23\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this);\n    }\n\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    className: s.map,\n    ref: mapContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n      id: \"features\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LayerControlWhole, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Wellmap, \"+wQ1SYNe1UBLNxuuwH2VxUNis5w=\", false, function () {\n  return [useMap];\n});\n\n_c = Wellmap;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wellmap\");","map":{"version":3,"sources":["D:/Github/UTDB/UtDataBase/UtahWellsDB/utah_wells_db/src/basemap/Basemap.tsx"],"names":["React","useRef","useState","mapboxgl","useMap","s","LayerControl","ReactDOM","accessToken","Wellmap","mapContainer","lng","setLong","lat","setLat","zoom","setZoom","height","setHight","layers","map","updateLayerVisibility","style","center","on","e","features","queryRenderedFeatures","point","length","feature","popupNode","document","createElement","render","properties","wellname","api","fieldname","welltype","popUpRef","current","setLngLat","lngLat","setDOMContent","addTo","getCanvas","cursor","displayProperties","displayFeatures","feat","displayFeat","forEach","prop","getElementById","innerHTML","JSON","stringify","LayerControlWhole","Component","state","showing","setState"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport {useMap} from '../useMap/useMap';\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport s from \"./Map.module.css\";\nimport {LayerControl} from \"../layerControl/LayerControl\";\nimport ReactDOM from \"react-dom\";\n//import {Source} from \"react-map-gl\";\n//import Layer from \"react-mapbox-gl/lib-esm/layer\"; // eslint-disable-line import/no-webpack-loader-syntax\n\nmapboxgl.accessToken = 'pk.eyJ1Ijoic2xjbGVpIiwiYSI6ImNsMXV6czRnYjJkbnQzZG1qMHRxeGd0YmoifQ.mvtESpI1GCIdTrWSupNEIw';\n\nexport function Wellmap(): any {\n  const mapContainer = useRef(null);\n  const [lng, setLong] = useState(-111.6);\n  const [lat, setLat] = useState(39.2);\n  const [zoom, setZoom] = useState(6);\n  const [height,setHight]=useState(1500);\n\n  const { layers, map, updateLayerVisibility } = useMap(mapContainer, {\n    style: \"mapbox://styles/mapbox/outdoors-v11\",\n    center: [lng,lat],\n    zoom: zoom,\n  });\n\n          /**\n           * Event handler for defining what happens when a user clicks on the map\n           * In this example, we are checking if the user has clicked on one or more feature layers\n           * If they have, we want to render a popup with the data for the selected\n           * bus feature\n           * Else, do nothing\n           */\n          //build  a Popup component used to render a map popup with information for chosen feature\n                    \n          map.on(\"click\", (e: { point: any; lngLat: any; }) => {\n            const features = map.queryRenderedFeatures(e.point, {\n              layers: [\"wellsInUTLayer\"],\n            });\n            if (features.length > 0) {\n              const feature = features[0];\n              {\n                // create popup node\n                const popupNode = document.createElement(\"div\");\n                ReactDOM.render(\n                  <Popup\n                    featureName={feature?.properties?.wellname}\n                    featureNumber={feature?.properties?.api}\n                    field={feature?.properties?.fieldname}\n                    type={feature?.properties?.welltype}\n                  />,\n                  popupNode\n                );\n                popUpRef.current\n                  .setLngLat(e.lngLat)\n                  .setDOMContent(popupNode)\n                  .addTo(map);\n              }\n            }\n          });\n          // Change the cursor to a pointer when the mouse is over the places layer.\n          map.on('mouseenter', \"wellsInUTLayer\", () => {\n            map.getCanvas().style.cursor = 'pointer';\n          });\n  \n          // Change it back to a pointer when it leaves.\n          map.on('mouseleave', \"wellsInUTLayer\", () => {\n            map.getCanvas().style.cursor = '';\n          });\n  \n          map.on('mousemove', (e: { point: any; lngLat: any; }) => {\n            const features = map.queryRenderedFeatures(e.point, {\n              layers: [\"wellsInUTLayer\"],\n            });\n             \n            // Limit the number of properties we're displaying for\n            // legibility and performance\n            const displayProperties = [\n            'type',\n            'properties',\n            ];\n             \n            const displayFeatures = features.map((feat: { [x: string]: any; }) => {\n            const displayFeat:  { [x: string]: any; } = {};\n            displayProperties.forEach((prop) => {\n            displayFeat[prop] = feat[prop];\n            });\n            return displayFeat;\n            });\n             \n            // Write object as string with an indent of two spaces.\n            document.getElementById('features')!.innerHTML = JSON.stringify(\n            displayFeatures,\n            null,\n            2\n            );\n            });\n\n  class LayerControlWhole extends React.Component {\n    state = { showing: false };\n\n    render() {\n        const { showing } = this.state;\n        \n        return (\n            <div className=\"LayerC\">\n                <i\n                    style={{ cursor: \"pointer\"}}\n                    className=\"material-icons md-50\"\n                    id=\"layersIcon\"\n                    uib-tooltip=\"Layers\"\n                    onClick={() => this.setState({ showing: !showing })}>\n                          layers\n                </i>\n                <div className='popover-message'>Layer Control</div>\n                { showing \n                    ? <LayerControl id=\"inMapLegend2\" layers={layers} onToggle={updateLayerVisibility} />\n                    : null\n                }\n            </div>  \n        )\n    }\n}\n\n  return (\n    <div id=\"map\" className={s.map} ref={mapContainer}>  \n      <pre id=\"features\" />\n      <LayerControlWhole />  \n    </div>  \n  );\n}\n"]},"metadata":{},"sourceType":"module"}