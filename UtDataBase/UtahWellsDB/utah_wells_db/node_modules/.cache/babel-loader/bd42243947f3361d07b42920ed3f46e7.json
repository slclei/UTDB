{"ast":null,"code":"import _asyncToGenerator from\"D:/Github/UTDB/UtDataBase/UtahWellsDB/utah_wells_db/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _objectSpread from\"D:/Github/UTDB/UtDataBase/UtahWellsDB/utah_wells_db/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"D:/Github/UTDB/UtDataBase/UtahWellsDB/utah_wells_db/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"D:\\\\Github\\\\UTDB\\\\UtDataBase\\\\UtahWellsDB\\\\utah_wells_db\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import{useCallback,useEffect,useState,useRef}from\"react\";import mapboxgl from\"mapbox-gl\";import MapService from\"../services/MapService\";import'mapbox-gl/dist/mapbox-gl.css';export var useMap=function useMap(ref,mapConfig){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),map=_useState2[0],setMap=_useState2[1];var _useState3=useState({map:{created:false,loaded:false},sources:{loaded:false,added:false},layers:{loaded:false,added:false}}),_useState4=_slicedToArray(_useState3,2),mapStatus=_useState4[0],setMapStatus=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),sources=_useState6[0],setSources=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),layers=_useState8[0],setLayers=_useState8[1];var popUpRef=useRef(new mapboxgl.Popup({offset:15}));useEffect(function(){if(ref!==null&&ref!==void 0&&ref.current&&!mapStatus.map.created){var _ref$current;var newMap=new mapboxgl.Map(_objectSpread({container:(_ref$current=ref.current)!==null&&_ref$current!==void 0?_ref$current:''},mapConfig));setMap(newMap);setMapStatus(function(s){return _objectSpread(_objectSpread({},s),{},{map:_objectSpread(_objectSpread({},s.map),{},{created:true})});});newMap.on(\"load\",function(){setMapStatus(function(s){return _objectSpread(_objectSpread({},s),{},{map:_objectSpread(_objectSpread({},s.map),{},{loaded:true})});});});}},[ref,mapConfig,mapStatus.map.created]);var loadMapData=useCallback(function(){var shouldLoadData=!!map&&mapStatus.map.loaded&&!mapStatus.sources.loaded;function loadData(){return _loadData.apply(this,arguments);}function _loadData(){_loadData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var fetchedSources,fetchedLayers;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return MapService.getSources();case 2:fetchedSources=_context.sent;_context.next=5;return MapService.getLayers();case 5:fetchedLayers=_context.sent;setSources(fetchedSources);setLayers(fetchedLayers);if(!mapStatus.sources.added){fetchedSources.forEach(function(source){var cleanedSource=_objectSpread({},source);delete cleanedSource.id;map.addSource(source.id,cleanedSource);});if(!mapStatus.layers.added){fetchedLayers.forEach(function(layer){map.addLayer(layer);});}}setMapStatus(function(s){return _objectSpread(_objectSpread({},s),{},{sources:{loaded:true,added:true},layers:{loaded:true,added:true}});});/**\r\n           * Event handler for defining what happens when a user clicks on the map\r\n           * In this example, we are checking if the user has clicked on one or more feature layers\r\n           * If they have, we want to render a popup with the data for the selected\r\n           * bus feature\r\n           * Else, do nothing\r\n           */ //build  a Popup component used to render a map popup with information for chosen feature\n// Change the cursor to a pointer when the mouse is over the places layer.\nmap.on('mouseenter',\"wellsInUTLayer\",function(){map.getCanvas().style.cursor='pointer';});// Change it back to a pointer when it leaves.\nmap.on('mouseleave',\"wellsInUTLayer\",function(){map.getCanvas().style.cursor='';});case 12:case\"end\":return _context.stop();}}},_callee);}));return _loadData.apply(this,arguments);}if(shouldLoadData){loadData();}},[map,mapStatus.map.loaded,mapStatus.sources,mapStatus.layers]);var updateLayerVisibility=function updateLayerVisibility(id,visible){if(!!map&&!!map.getLayer(id)){var visibleValue=visible?\"visible\":\"none\";map.setLayoutProperty(id,\"visibility\",visibleValue);setLayers(function(s){return s.map(function(layer){if(layer.id===id){return _objectSpread(_objectSpread({},layer),{},{layout:_objectSpread(_objectSpread({},layer.layout),{},{visibility:visibleValue})});}return layer;});});}};useEffect(function(){loadMapData();},[loadMapData]);return{layers:layers,map:map,sources:sources,updateLayerVisibility:updateLayerVisibility};};","map":{"version":3,"sources":["D:/Github/UTDB/UtDataBase/UtahWellsDB/utah_wells_db/src/useMap/useMap.tsx"],"names":["useCallback","useEffect","useState","useRef","mapboxgl","MapService","useMap","ref","mapConfig","map","setMap","created","loaded","sources","added","layers","mapStatus","setMapStatus","setSources","setLayers","popUpRef","Popup","offset","current","newMap","Map","container","s","on","loadMapData","shouldLoadData","loadData","getSources","fetchedSources","getLayers","fetchedLayers","forEach","source","cleanedSource","id","addSource","layer","addLayer","getCanvas","style","cursor","updateLayerVisibility","visible","getLayer","visibleValue","setLayoutProperty","layout","visibility"],"mappings":"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","sourcesContent":["import {useCallback, useEffect, useState, useRef} from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport MapService from \"../services/MapService\";\r\nimport {Sources, Layers} from \"../data/SpatialData\";\r\nimport ReactDOM from \"react-dom\";\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\n\r\n\r\nexport const useMap = (ref: any, mapConfig: any) => {\r\n    const [map, setMap] = useState<typeof ref.current | null>(null);\r\n    const [mapStatus, setMapStatus] = useState({\r\n      map: {\r\n        created: false,\r\n        loaded: false,\r\n      },\r\n      sources: {\r\n        loaded: false,\r\n        added: false,\r\n      },\r\n      layers: {\r\n        loaded: false,\r\n        added: false,\r\n      },\r\n    });\r\n    const [sources, setSources] = useState([]);\r\n    const [layers, setLayers] = useState<typeof Layers[]>([]);\r\n    const popUpRef = useRef(new mapboxgl.Popup({ offset: 15 }));\r\n  \r\n    useEffect(() => {\r\n      if (ref?.current && !mapStatus.map.created) {\r\n        const newMap = new mapboxgl.Map({\r\n          container: ref.current?? '',\r\n          ...mapConfig,\r\n        });\r\n        setMap(newMap);\r\n        setMapStatus((s) => ({\r\n          ...s,\r\n          map: {\r\n            ...s.map,\r\n            created: true,\r\n          },\r\n        }));\r\n        newMap.on(\"load\", () => {\r\n          setMapStatus((s) => ({\r\n            ...s,\r\n            map: {\r\n              ...s.map,\r\n              loaded: true,\r\n            },\r\n          }));\r\n        });\r\n      }\r\n    }, [ref, mapConfig, mapStatus.map.created]);\r\n  \r\n    const loadMapData = useCallback(() => {\r\n      const shouldLoadData =\r\n        !!map && mapStatus.map.loaded && !mapStatus.sources.loaded;\r\n      async function loadData() {\r\n        const fetchedSources: any = await MapService.getSources();\r\n        const fetchedLayers: any = await MapService.getLayers();\r\n        setSources(fetchedSources);\r\n        setLayers(fetchedLayers);\r\n        if (!mapStatus.sources.added) {\r\n          fetchedSources.forEach((source: { id: any; }) => {\r\n            const cleanedSource = { ...source };\r\n            delete cleanedSource.id;\r\n            map.addSource(source.id, cleanedSource);\r\n          });\r\n  \r\n          if (!mapStatus.layers.added) {\r\n            fetchedLayers.forEach((layer: any) => {\r\n              map.addLayer(layer);\r\n            });\r\n          }\r\n        }\r\n        setMapStatus((s) => ({\r\n          ...s,\r\n          sources: {\r\n            loaded: true,\r\n            added: true,\r\n          },\r\n          layers: {\r\n            loaded: true,\r\n            added: true,\r\n          },\r\n        }));\r\n\r\n        /**\r\n           * Event handler for defining what happens when a user clicks on the map\r\n           * In this example, we are checking if the user has clicked on one or more feature layers\r\n           * If they have, we want to render a popup with the data for the selected\r\n           * bus feature\r\n           * Else, do nothing\r\n           */\r\n          //build  a Popup component used to render a map popup with information for chosen feature\r\n                    \r\n        \r\n        // Change the cursor to a pointer when the mouse is over the places layer.\r\n        map.on('mouseenter', \"wellsInUTLayer\", () => {\r\n          map.getCanvas().style.cursor = 'pointer';\r\n        });\r\n\r\n        // Change it back to a pointer when it leaves.\r\n        map.on('mouseleave', \"wellsInUTLayer\", () => {\r\n          map.getCanvas().style.cursor = '';\r\n        });\r\n\r\n        \r\n      }\r\n      if (shouldLoadData) {\r\n        loadData();\r\n      }\r\n    }, [map, mapStatus.map.loaded, mapStatus.sources, mapStatus.layers]);\r\n  \r\n    const updateLayerVisibility = (id: any, visible: any) => {\r\n      if (!!map && !!map.getLayer(id)) {\r\n        const visibleValue = visible ? \"visible\" : \"none\";\r\n        map.setLayoutProperty(id, \"visibility\", visibleValue);\r\n        setLayers((s) => {\r\n          return s.map((layer: any) => {\r\n            if (layer.id === id) {\r\n              return {\r\n                ...layer,\r\n                layout: {\r\n                  ...layer.layout,\r\n                  visibility: visibleValue,\r\n                },\r\n              };\r\n            }\r\n            return layer;\r\n          });\r\n        });\r\n      }\r\n    };\r\n  \r\n    useEffect(() => {\r\n      loadMapData();\r\n    }, [loadMapData]);\r\n  \r\n    return {\r\n      layers,\r\n      map,\r\n      sources,\r\n      updateLayerVisibility,\r\n    };\r\n  };"]},"metadata":{},"sourceType":"module"}