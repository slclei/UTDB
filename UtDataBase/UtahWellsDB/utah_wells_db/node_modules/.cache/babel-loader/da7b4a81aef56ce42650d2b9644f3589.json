{"ast":null,"code":"var _jsxFileName = \"D:\\\\Github\\\\UTDB\\\\UtDataBase\\\\UtahWellsDB\\\\utah_wells_db\\\\src\\\\useMap\\\\useMap.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport MapService from \"../services/MapService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Popup = _ref => {\n  let {\n    featureName,\n    featureNumber,\n    field,\n    type\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"popup\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"popField\",\n      children: [\"WellName: \", featureName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"popField\",\n      children: [\"API: \", featureNumber]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"popField\",\n      children: [\"WellType: \", type]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"popField\",\n      children: [\"FieldName: \", field]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 3\n  }, this);\n};\n\n_c = Popup;\nexport const useMap = (ref, mapConfig) => {\n  _s();\n\n  const [map, setMap] = useState(null);\n  const [mapStatus, setMapStatus] = useState({\n    map: {\n      created: false,\n      loaded: false\n    },\n    sources: {\n      loaded: false,\n      added: false\n    },\n    layers: {\n      loaded: false,\n      added: false\n    }\n  });\n  const [sources, setSources] = useState([]);\n  const [layers, setLayers] = useState([]);\n  const popUpRef = useRef(new mapboxgl.Popup({\n    offset: 15\n  }));\n  useEffect(() => {\n    if (ref !== null && ref !== void 0 && ref.current && !mapStatus.map.created) {\n      var _ref$current;\n\n      const newMap = new mapboxgl.Map({\n        container: (_ref$current = ref.current) !== null && _ref$current !== void 0 ? _ref$current : '',\n        ...mapConfig\n      });\n      setMap(newMap);\n      setMapStatus(s => ({ ...s,\n        map: { ...s.map,\n          created: true\n        }\n      }));\n      newMap.on(\"load\", () => {\n        setMapStatus(s => ({ ...s,\n          map: { ...s.map,\n            loaded: true\n          }\n        }));\n      });\n    }\n  }, [ref, mapConfig, mapStatus.map.created]);\n  const loadMapData = useCallback(() => {\n    const shouldLoadData = !!map && mapStatus.map.loaded && !mapStatus.sources.loaded;\n\n    async function loadData() {\n      const fetchedSources = await MapService.getSources();\n      const fetchedLayers = await MapService.getLayers();\n      setSources(fetchedSources);\n      setLayers(fetchedLayers);\n\n      if (!mapStatus.sources.added) {\n        fetchedSources.forEach(source => {\n          const cleanedSource = { ...source\n          };\n          delete cleanedSource.id;\n          map.addSource(source.id, cleanedSource);\n        });\n\n        if (!mapStatus.layers.added) {\n          fetchedLayers.forEach(layer => {\n            map.addLayer(layer);\n          });\n        }\n      }\n\n      setMapStatus(s => ({ ...s,\n        sources: {\n          loaded: true,\n          added: true\n        },\n        layers: {\n          loaded: true,\n          added: true\n        }\n      }));\n    }\n\n    if (shouldLoadData) {\n      loadData();\n    }\n  }, [map, mapStatus.map.loaded, mapStatus.sources, mapStatus.layers]);\n\n  const updateLayerVisibility = (id, visible) => {\n    if (!!map && !!map.getLayer(id)) {\n      const visibleValue = visible ? \"visible\" : \"none\";\n      map.setLayoutProperty(id, \"visibility\", visibleValue);\n      setLayers(s => {\n        return s.map(layer => {\n          if (layer.id === id) {\n            return { ...layer,\n              layout: { ...layer.layout,\n                visibility: visibleValue\n              }\n            };\n          }\n\n          return layer;\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    loadMapData();\n  }, [loadMapData]);\n  return {\n    layers,\n    map,\n    sources,\n    updateLayerVisibility\n  };\n};\n\n_s(useMap, \"FJ4GP6JxVgHij55pa/qLtdqX3dE=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"Popup\");","map":{"version":3,"sources":["D:/Github/UTDB/UtDataBase/UtahWellsDB/utah_wells_db/src/useMap/useMap.tsx"],"names":["useCallback","useEffect","useState","useRef","mapboxgl","MapService","Popup","featureName","featureNumber","field","type","useMap","ref","mapConfig","map","setMap","mapStatus","setMapStatus","created","loaded","sources","added","layers","setSources","setLayers","popUpRef","offset","current","newMap","Map","container","s","on","loadMapData","shouldLoadData","loadData","fetchedSources","getSources","fetchedLayers","getLayers","forEach","source","cleanedSource","id","addSource","layer","addLayer","updateLayerVisibility","visible","getLayer","visibleValue","setLayoutProperty","layout","visibility"],"mappings":"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","sourcesContent":["import {useCallback, useEffect, useState, useRef} from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport MapService from \"../services/MapService\";\r\nimport {Sources, Layers} from \"../data/SpatialData\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Popup = ({ featureName, featureNumber, field, type }: { featureName: any, featureNumber: any, field: any, type: any }) => (\r\n  <div className=\"popup\">\r\n    <p className=\"popField\">WellName: {featureName}</p>\r\n    <p className=\"popField\">API: {featureNumber}</p>\r\n    <p className=\"popField\">WellType: {type}</p>\r\n    <p className=\"popField\">FieldName: {field}</p>\r\n  </div>\r\n);\r\n\r\nexport const useMap = (ref: any, mapConfig: any) => {\r\n    const [map, setMap] = useState<typeof ref.current | null>(null);\r\n    const [mapStatus, setMapStatus] = useState({\r\n      map: {\r\n        created: false,\r\n        loaded: false,\r\n      },\r\n      sources: {\r\n        loaded: false,\r\n        added: false,\r\n      },\r\n      layers: {\r\n        loaded: false,\r\n        added: false,\r\n      },\r\n    });\r\n    const [sources, setSources] = useState([]);\r\n    const [layers, setLayers] = useState<typeof Layers[]>([]);\r\n    const popUpRef = useRef(new mapboxgl.Popup({ offset: 15 }));\r\n  \r\n    useEffect(() => {\r\n      if (ref?.current && !mapStatus.map.created) {\r\n        const newMap = new mapboxgl.Map({\r\n          container: ref.current?? '',\r\n          ...mapConfig,\r\n        });\r\n        setMap(newMap);\r\n        setMapStatus((s) => ({\r\n          ...s,\r\n          map: {\r\n            ...s.map,\r\n            created: true,\r\n          },\r\n        }));\r\n        newMap.on(\"load\", () => {\r\n          setMapStatus((s) => ({\r\n            ...s,\r\n            map: {\r\n              ...s.map,\r\n              loaded: true,\r\n            },\r\n          }));\r\n        });\r\n      }\r\n    }, [ref, mapConfig, mapStatus.map.created]);\r\n  \r\n    const loadMapData = useCallback(() => {\r\n      const shouldLoadData =\r\n        !!map && mapStatus.map.loaded && !mapStatus.sources.loaded;\r\n      async function loadData() {\r\n        const fetchedSources: any = await MapService.getSources();\r\n        const fetchedLayers: any = await MapService.getLayers();\r\n        setSources(fetchedSources);\r\n        setLayers(fetchedLayers);\r\n        if (!mapStatus.sources.added) {\r\n          fetchedSources.forEach((source: { id: any; }) => {\r\n            const cleanedSource = { ...source };\r\n            delete cleanedSource.id;\r\n            map.addSource(source.id, cleanedSource);\r\n          });\r\n  \r\n          if (!mapStatus.layers.added) {\r\n            fetchedLayers.forEach((layer: any) => {\r\n              map.addLayer(layer);\r\n            });\r\n          }\r\n        }\r\n        setMapStatus((s) => ({\r\n          ...s,\r\n          sources: {\r\n            loaded: true,\r\n            added: true,\r\n          },\r\n          layers: {\r\n            loaded: true,\r\n            added: true,\r\n          },\r\n        }));\r\n\r\n      }\r\n      if (shouldLoadData) {\r\n        loadData();\r\n      }\r\n    }, [map, mapStatus.map.loaded, mapStatus.sources, mapStatus.layers]);\r\n  \r\n    const updateLayerVisibility = (id: any, visible: any) => {\r\n      if (!!map && !!map.getLayer(id)) {\r\n        const visibleValue = visible ? \"visible\" : \"none\";\r\n        map.setLayoutProperty(id, \"visibility\", visibleValue);\r\n        setLayers((s) => {\r\n          return s.map((layer: any) => {\r\n            if (layer.id === id) {\r\n              return {\r\n                ...layer,\r\n                layout: {\r\n                  ...layer.layout,\r\n                  visibility: visibleValue,\r\n                },\r\n              };\r\n            }\r\n            return layer;\r\n          });\r\n        });\r\n      }\r\n    };\r\n  \r\n    useEffect(() => {\r\n      loadMapData();\r\n    }, [loadMapData]);\r\n  \r\n    return {\r\n      layers,\r\n      map,\r\n      sources,\r\n      updateLayerVisibility,\r\n    };\r\n  };"]},"metadata":{},"sourceType":"module"}