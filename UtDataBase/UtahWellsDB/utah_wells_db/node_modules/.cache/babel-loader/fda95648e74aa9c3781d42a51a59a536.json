{"ast":null,"code":"var _jsxFileName = \"D:\\\\Github\\\\UTDB\\\\UtDataBase\\\\UtahWellsDB\\\\utah_wells_db\\\\src\\\\useMap\\\\useMap.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport MapService from \"../services/MapService\";\nimport ReactDOM from \"react-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const useMap = (ref, mapConfig) => {\n  _s();\n\n  const [map, setMap] = useState(null);\n  const [mapStatus, setMapStatus] = useState({\n    map: {\n      created: false,\n      loaded: false\n    },\n    sources: {\n      loaded: false,\n      added: false\n    },\n    layers: {\n      loaded: false,\n      added: false\n    }\n  });\n  const [sources, setSources] = useState([]);\n  const [layers, setLayers] = useState([]);\n  const popUpRef = useRef(new mapboxgl.Popup({\n    offset: 15\n  }));\n  useEffect(() => {\n    if (ref !== null && ref !== void 0 && ref.current && !mapStatus.map.created) {\n      var _ref$current;\n\n      const newMap = new mapboxgl.Map({\n        container: (_ref$current = ref.current) !== null && _ref$current !== void 0 ? _ref$current : '',\n        ...mapConfig\n      });\n      setMap(newMap);\n      setMapStatus(s => ({ ...s,\n        map: { ...s.map,\n          created: true\n        }\n      }));\n      newMap.on(\"load\", () => {\n        setMapStatus(s => ({ ...s,\n          map: { ...s.map,\n            loaded: true\n          }\n        }));\n      });\n    }\n  }, [ref, mapConfig, mapStatus.map.created]);\n  const loadMapData = useCallback(() => {\n    const shouldLoadData = !!map && mapStatus.map.loaded && !mapStatus.sources.loaded;\n\n    async function loadData() {\n      const fetchedSources = await MapService.getSources();\n      const fetchedLayers = await MapService.getLayers();\n      setSources(fetchedSources);\n      setLayers(fetchedLayers);\n\n      if (!mapStatus.sources.added) {\n        fetchedSources.forEach(source => {\n          const cleanedSource = { ...source\n          };\n          delete cleanedSource.id;\n          map.addSource(source.id, cleanedSource);\n        });\n\n        if (!mapStatus.layers.added) {\n          fetchedLayers.forEach(layer => {\n            map.addLayer(layer);\n          });\n        }\n      }\n\n      setMapStatus(s => ({ ...s,\n        sources: {\n          loaded: true,\n          added: true\n        },\n        layers: {\n          loaded: true,\n          added: true\n        }\n      }));\n    }\n\n    if (shouldLoadData) {\n      loadData();\n      /**\r\n       * Event handler for defining what happens when a user clicks on the map\r\n       * In this example, we are checking if the user has clicked on one or more feature layers\r\n       * If they have, we want to render a popup with the data for the selected\r\n       * bus feature\r\n       * Else, do nothing\r\n       */\n      //build  a Popup component used to render a map popup with information for chosen feature\n\n      const Popup = _ref => {\n        let {\n          featureName,\n          featureNumber,\n          field,\n          type\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"popup\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"feature-name\",\n            children: featureName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"feature-metric-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"row-title\",\n              children: \"feature #\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row-value\",\n              children: featureNumber\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"feature-metric-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"row-title\",\n              children: \"feature Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row-value\",\n              children: type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"feature-field\",\n            children: [\"Serves \", field]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this);\n      };\n\n      map.on(\"click\", e => {\n        const features = map.queryRenderedFeatures(e.point, {\n          layers: [\"wellsInUTLayer\"]\n        });\n\n        if (features.length > 0) {\n          const feature = features[0];\n          {\n            var _feature$properties, _feature$properties2, _feature$properties3, _feature$properties4;\n\n            // create popup node\n            const popupNode = document.createElement(\"div\");\n            ReactDOM.render( /*#__PURE__*/_jsxDEV(Popup, {\n              featureName: feature === null || feature === void 0 ? void 0 : (_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.wellname,\n              featureNumber: feature === null || feature === void 0 ? void 0 : (_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.api,\n              field: feature === null || feature === void 0 ? void 0 : (_feature$properties3 = feature.properties) === null || _feature$properties3 === void 0 ? void 0 : _feature$properties3.fieldname,\n              type: feature === null || feature === void 0 ? void 0 : (_feature$properties4 = feature.properties) === null || _feature$properties4 === void 0 ? void 0 : _feature$properties4.welltype\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }, this), popupNode);\n            popUpRef.current.setLngLat(e.lngLat).setDOMContent(popupNode).addTo(map);\n          }\n        }\n      });\n    }\n  }, [map, mapStatus.map.loaded, mapStatus.sources, mapStatus.layers]);\n\n  const updateLayerVisibility = (id, visible) => {\n    if (!!map && !!map.getLayer(id)) {\n      const visibleValue = visible ? \"visible\" : \"none\";\n      map.setLayoutProperty(id, \"visibility\", visibleValue);\n      setLayers(s => {\n        return s.map(layer => {\n          if (layer.id === id) {\n            return { ...layer,\n              layout: { ...layer.layout,\n                visibility: visibleValue\n              }\n            };\n          }\n\n          return layer;\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    loadMapData();\n  }, [loadMapData]);\n  return {\n    layers,\n    map,\n    sources,\n    updateLayerVisibility\n  };\n};\n\n_s(useMap, \"FJ4GP6JxVgHij55pa/qLtdqX3dE=\");","map":{"version":3,"sources":["D:/Github/UTDB/UtDataBase/UtahWellsDB/utah_wells_db/src/useMap/useMap.tsx"],"names":["useCallback","useEffect","useState","useRef","mapboxgl","MapService","ReactDOM","useMap","ref","mapConfig","map","setMap","mapStatus","setMapStatus","created","loaded","sources","added","layers","setSources","setLayers","popUpRef","Popup","offset","current","newMap","Map","container","s","on","loadMapData","shouldLoadData","loadData","fetchedSources","getSources","fetchedLayers","getLayers","forEach","source","cleanedSource","id","addSource","layer","addLayer","featureName","featureNumber","field","type","e","features","queryRenderedFeatures","point","length","feature","popupNode","document","createElement","render","properties","wellname","api","fieldname","welltype","setLngLat","lngLat","setDOMContent","addTo","updateLayerVisibility","visible","getLayer","visibleValue","setLayoutProperty","layout","visibility"],"mappings":"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","sourcesContent":["import {useCallback, useEffect, useState, useRef} from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport MapService from \"../services/MapService\";\r\nimport {Sources, Layers} from \"../data/SpatialData\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nexport const useMap = (ref: any, mapConfig: any) => {\r\n    const [map, setMap] = useState<typeof ref.current | null>(null);\r\n    const [mapStatus, setMapStatus] = useState({\r\n      map: {\r\n        created: false,\r\n        loaded: false,\r\n      },\r\n      sources: {\r\n        loaded: false,\r\n        added: false,\r\n      },\r\n      layers: {\r\n        loaded: false,\r\n        added: false,\r\n      },\r\n    });\r\n    const [sources, setSources] = useState([]);\r\n    const [layers, setLayers] = useState<typeof Layers[]>([]);\r\n    const popUpRef = useRef(new mapboxgl.Popup({ offset: 15 }));\r\n  \r\n    useEffect(() => {\r\n      if (ref?.current && !mapStatus.map.created) {\r\n        const newMap = new mapboxgl.Map({\r\n          container: ref.current?? '',\r\n          ...mapConfig,\r\n        });\r\n        setMap(newMap);\r\n        setMapStatus((s) => ({\r\n          ...s,\r\n          map: {\r\n            ...s.map,\r\n            created: true,\r\n          },\r\n        }));\r\n        newMap.on(\"load\", () => {\r\n          setMapStatus((s) => ({\r\n            ...s,\r\n            map: {\r\n              ...s.map,\r\n              loaded: true,\r\n            },\r\n          }));\r\n        });\r\n      }\r\n    }, [ref, mapConfig, mapStatus.map.created]);\r\n  \r\n    const loadMapData = useCallback(() => {\r\n      const shouldLoadData =\r\n        !!map && mapStatus.map.loaded && !mapStatus.sources.loaded;\r\n      async function loadData() {\r\n        const fetchedSources: any = await MapService.getSources();\r\n        const fetchedLayers: any = await MapService.getLayers();\r\n        setSources(fetchedSources);\r\n        setLayers(fetchedLayers);\r\n        if (!mapStatus.sources.added) {\r\n          fetchedSources.forEach((source: { id: any; }) => {\r\n            const cleanedSource = { ...source };\r\n            delete cleanedSource.id;\r\n            map.addSource(source.id, cleanedSource);\r\n          });\r\n  \r\n          if (!mapStatus.layers.added) {\r\n            fetchedLayers.forEach((layer: any) => {\r\n              map.addLayer(layer);\r\n            });\r\n          }\r\n        }\r\n        setMapStatus((s) => ({\r\n          ...s,\r\n          sources: {\r\n            loaded: true,\r\n            added: true,\r\n          },\r\n          layers: {\r\n            loaded: true,\r\n            added: true,\r\n          },\r\n        }));\r\n      }\r\n      if (shouldLoadData) {\r\n        loadData();\r\n          /**\r\n           * Event handler for defining what happens when a user clicks on the map\r\n           * In this example, we are checking if the user has clicked on one or more feature layers\r\n           * If they have, we want to render a popup with the data for the selected\r\n           * bus feature\r\n           * Else, do nothing\r\n           */\r\n          //build  a Popup component used to render a map popup with information for chosen feature\r\n        const Popup = ({ featureName, featureNumber, field, type }: { featureName: any, featureNumber: any, field: any, type: any }) => (\r\n          <div className=\"popup\">\r\n            <h3 className=\"feature-name\">{featureName}</h3>\r\n            <div className=\"feature-metric-row\">\r\n              <h4 className=\"row-title\">feature #</h4>\r\n              <div className=\"row-value\">{featureNumber}</div>\r\n            </div>\r\n            <div className=\"feature-metric-row\">\r\n              <h4 className=\"row-title\">feature Type</h4>\r\n              <div className=\"row-value\">{type}</div>\r\n            </div>\r\n            <p className=\"feature-field\">Serves {field}</p>\r\n          </div>\r\n        );\r\n        \r\n        map.on(\"click\", (e: { point: any; lngLat: any; }) => {\r\n          const features = map.queryRenderedFeatures(e.point, {\r\n            layers: [\"wellsInUTLayer\"],\r\n          });\r\n          if (features.length > 0) {\r\n            const feature = features[0];\r\n            {\r\n              // create popup node\r\n              const popupNode = document.createElement(\"div\");\r\n              ReactDOM.render(\r\n                <Popup\r\n                  featureName={feature?.properties?.wellname}\r\n                  featureNumber={feature?.properties?.api}\r\n                  field={feature?.properties?.fieldname}\r\n                  type={feature?.properties?.welltype}\r\n                />,\r\n                popupNode\r\n              );\r\n              popUpRef.current\r\n                .setLngLat(e.lngLat)\r\n                .setDOMContent(popupNode)\r\n                .addTo(map);\r\n            }\r\n          }\r\n  });\r\n      }\r\n    }, [map, mapStatus.map.loaded, mapStatus.sources, mapStatus.layers]);\r\n  \r\n    const updateLayerVisibility = (id: any, visible: any) => {\r\n      if (!!map && !!map.getLayer(id)) {\r\n        const visibleValue = visible ? \"visible\" : \"none\";\r\n        map.setLayoutProperty(id, \"visibility\", visibleValue);\r\n        setLayers((s) => {\r\n          return s.map((layer: any) => {\r\n            if (layer.id === id) {\r\n              return {\r\n                ...layer,\r\n                layout: {\r\n                  ...layer.layout,\r\n                  visibility: visibleValue,\r\n                },\r\n              };\r\n            }\r\n            return layer;\r\n          });\r\n        });\r\n      }\r\n    };\r\n  \r\n    useEffect(() => {\r\n      loadMapData();\r\n    }, [loadMapData]);\r\n  \r\n    return {\r\n      layers,\r\n      map,\r\n      sources,\r\n      updateLayerVisibility,\r\n    };\r\n  };"]},"metadata":{},"sourceType":"module"}