{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport MapService from \"../services/MapService\";\nexport const useMap = (ref, mapConfig) => {\n  _s();\n\n  const [map, setMap] = useState(null);\n  const [mapStatus, setMapStatus] = useState({\n    map: {\n      created: false,\n      loaded: false\n    },\n    sources: {\n      loaded: false,\n      added: false\n    },\n    layers: {\n      loaded: false,\n      added: false\n    }\n  });\n  const [sources, setSources] = useState([]);\n  const [layers, setLayers] = useState([]);\n  useEffect(() => {\n    if (ref !== null && ref !== void 0 && ref.current && !mapStatus.map.created) {\n      var _ref$current;\n\n      const newMap = new mapboxgl.Map({\n        container: (_ref$current = ref.current) !== null && _ref$current !== void 0 ? _ref$current : '',\n        ...mapConfig\n      });\n      setMap(newMap);\n      setMapStatus(s => ({ ...s,\n        map: { ...s.map,\n          created: true\n        }\n      }));\n      newMap.on(\"load\", () => {\n        setMapStatus(s => ({ ...s,\n          map: { ...s.map,\n            loaded: true\n          }\n        }));\n      });\n    }\n  }, [ref, mapConfig, mapStatus.map.created]);\n  const loadMapData = useCallback(() => {\n    const shouldLoadData = !!map && mapStatus.map.loaded && !mapStatus.sources.loaded;\n\n    async function loadData() {\n      const fetchedSources = await MapService.getSources();\n      const fetchedLayers = await MapService.getLayers();\n      setSources(fetchedSources);\n      setLayers(fetchedLayers);\n\n      if (!mapStatus.sources.added) {\n        fetchedSources.forEach(source => {\n          const cleanedSource = { ...source\n          };\n          delete cleanedSource.id;\n          map.addSource(source.id, cleanedSource);\n        });\n\n        if (!mapStatus.layers.added) {\n          fetchedLayers.forEach(layer => {\n            map.addLayer(layer);\n          });\n        }\n      }\n\n      setMapStatus(s => ({ ...s,\n        sources: {\n          loaded: true,\n          added: true\n        },\n        layers: {\n          loaded: true,\n          added: true\n        }\n      }));\n    }\n\n    if (shouldLoadData) {\n      loadData();\n    }\n  }, [map, mapStatus.map.loaded, mapStatus.sources, mapStatus.layers]);\n\n  const updateLayerVisibility = (id, visible) => {\n    if (!!map && !!map.getLayer(id)) {\n      const visibleValue = visible ? \"visible\" : \"none\";\n      map.setLayoutProperty(id, \"visibility\", visibleValue);\n      setLayers(s => {\n        return s.map(layer => {\n          if (layer.id === id) {\n            return { ...layer,\n              layout: { ...layer.layout,\n                visibility: visibleValue\n              }\n            };\n          }\n\n          return layer;\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    loadMapData();\n  }, [loadMapData]);\n  return {\n    layers,\n    map,\n    sources,\n    updateLayerVisibility\n  };\n};\n\n_s(useMap, \"EkOQZstngHCVR6U+7dV5ZayP6vg=\");","map":{"version":3,"sources":["D:/Github/UTDB/UtDataBase/UtahWellsDB/utah_wells_db/src/useMap/useMap.tsx"],"names":["useCallback","useEffect","useState","mapboxgl","MapService","useMap","ref","mapConfig","map","setMap","mapStatus","setMapStatus","created","loaded","sources","added","layers","setSources","setLayers","current","newMap","Map","container","s","on","loadMapData","shouldLoadData","loadData","fetchedSources","getSources","fetchedLayers","getLayers","forEach","source","cleanedSource","id","addSource","layer","addLayer","updateLayerVisibility","visible","getLayer","visibleValue","setLayoutProperty","layout","visibility"],"mappings":";;AAAA,SAAQA,WAAR,EAAqBC,SAArB,EAAgCC,QAAhC,QAA+C,OAA/C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AAGA,OAAO,MAAMC,MAAM,GAAG,CAACC,GAAD,EAAWC,SAAX,KAA8B;AAAA;;AAChD,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBP,QAAQ,CAA4B,IAA5B,CAA9B;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC;AACzCM,IAAAA,GAAG,EAAE;AACHI,MAAAA,OAAO,EAAE,KADN;AAEHC,MAAAA,MAAM,EAAE;AAFL,KADoC;AAKzCC,IAAAA,OAAO,EAAE;AACPD,MAAAA,MAAM,EAAE,KADD;AAEPE,MAAAA,KAAK,EAAE;AAFA,KALgC;AASzCC,IAAAA,MAAM,EAAE;AACNH,MAAAA,MAAM,EAAE,KADF;AAENE,MAAAA,KAAK,EAAE;AAFD;AATiC,GAAD,CAA1C;AAcA,QAAM,CAACD,OAAD,EAAUG,UAAV,IAAwBf,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACc,MAAD,EAASE,SAAT,IAAsBhB,QAAQ,CAAkB,EAAlB,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,GAAG,SAAH,IAAAA,GAAG,WAAH,IAAAA,GAAG,CAAEa,OAAL,IAAgB,CAACT,SAAS,CAACF,GAAV,CAAcI,OAAnC,EAA4C;AAAA;;AAC1C,YAAMQ,MAAM,GAAG,IAAIjB,QAAQ,CAACkB,GAAb,CAAiB;AAC9BC,QAAAA,SAAS,kBAAEhB,GAAG,CAACa,OAAN,uDAAgB,EADK;AAE9B,WAAGZ;AAF2B,OAAjB,CAAf;AAIAE,MAAAA,MAAM,CAACW,MAAD,CAAN;AACAT,MAAAA,YAAY,CAAEY,CAAD,KAAQ,EACnB,GAAGA,CADgB;AAEnBf,QAAAA,GAAG,EAAE,EACH,GAAGe,CAAC,CAACf,GADF;AAEHI,UAAAA,OAAO,EAAE;AAFN;AAFc,OAAR,CAAD,CAAZ;AAOAQ,MAAAA,MAAM,CAACI,EAAP,CAAU,MAAV,EAAkB,MAAM;AACtBb,QAAAA,YAAY,CAAEY,CAAD,KAAQ,EACnB,GAAGA,CADgB;AAEnBf,UAAAA,GAAG,EAAE,EACH,GAAGe,CAAC,CAACf,GADF;AAEHK,YAAAA,MAAM,EAAE;AAFL;AAFc,SAAR,CAAD,CAAZ;AAOD,OARD;AASD;AACF,GAxBQ,EAwBN,CAACP,GAAD,EAAMC,SAAN,EAAiBG,SAAS,CAACF,GAAV,CAAcI,OAA/B,CAxBM,CAAT;AA0BA,QAAMa,WAAW,GAAGzB,WAAW,CAAC,MAAM;AACpC,UAAM0B,cAAc,GAClB,CAAC,CAAClB,GAAF,IAASE,SAAS,CAACF,GAAV,CAAcK,MAAvB,IAAiC,CAACH,SAAS,CAACI,OAAV,CAAkBD,MADtD;;AAEA,mBAAec,QAAf,GAA0B;AACxB,YAAMC,cAAmB,GAAG,MAAMxB,UAAU,CAACyB,UAAX,EAAlC;AACA,YAAMC,aAAkB,GAAG,MAAM1B,UAAU,CAAC2B,SAAX,EAAjC;AACAd,MAAAA,UAAU,CAACW,cAAD,CAAV;AACAV,MAAAA,SAAS,CAACY,aAAD,CAAT;;AACA,UAAI,CAACpB,SAAS,CAACI,OAAV,CAAkBC,KAAvB,EAA8B;AAC5Ba,QAAAA,cAAc,CAACI,OAAf,CAAwBC,MAAD,IAA0B;AAC/C,gBAAMC,aAAa,GAAG,EAAE,GAAGD;AAAL,WAAtB;AACA,iBAAOC,aAAa,CAACC,EAArB;AACA3B,UAAAA,GAAG,CAAC4B,SAAJ,CAAcH,MAAM,CAACE,EAArB,EAAyBD,aAAzB;AACD,SAJD;;AAMA,YAAI,CAACxB,SAAS,CAACM,MAAV,CAAiBD,KAAtB,EAA6B;AAC3Be,UAAAA,aAAa,CAACE,OAAd,CAAuBK,KAAD,IAAgB;AACpC7B,YAAAA,GAAG,CAAC8B,QAAJ,CAAaD,KAAb;AACD,WAFD;AAGD;AACF;;AACD1B,MAAAA,YAAY,CAAEY,CAAD,KAAQ,EACnB,GAAGA,CADgB;AAEnBT,QAAAA,OAAO,EAAE;AACPD,UAAAA,MAAM,EAAE,IADD;AAEPE,UAAAA,KAAK,EAAE;AAFA,SAFU;AAMnBC,QAAAA,MAAM,EAAE;AACNH,UAAAA,MAAM,EAAE,IADF;AAENE,UAAAA,KAAK,EAAE;AAFD;AANW,OAAR,CAAD,CAAZ;AAWD;;AACD,QAAIW,cAAJ,EAAoB;AAClBC,MAAAA,QAAQ;AACT;AACF,GApC8B,EAoC5B,CAACnB,GAAD,EAAME,SAAS,CAACF,GAAV,CAAcK,MAApB,EAA4BH,SAAS,CAACI,OAAtC,EAA+CJ,SAAS,CAACM,MAAzD,CApC4B,CAA/B;;AAsCA,QAAMuB,qBAAqB,GAAG,CAACJ,EAAD,EAAUK,OAAV,KAA2B;AACvD,QAAI,CAAC,CAAChC,GAAF,IAAS,CAAC,CAACA,GAAG,CAACiC,QAAJ,CAAaN,EAAb,CAAf,EAAiC;AAC/B,YAAMO,YAAY,GAAGF,OAAO,GAAG,SAAH,GAAe,MAA3C;AACAhC,MAAAA,GAAG,CAACmC,iBAAJ,CAAsBR,EAAtB,EAA0B,YAA1B,EAAwCO,YAAxC;AACAxB,MAAAA,SAAS,CAAEK,CAAD,IAAO;AACf,eAAOA,CAAC,CAACf,GAAF,CAAO6B,KAAD,IAAgB;AAC3B,cAAIA,KAAK,CAACF,EAAN,KAAaA,EAAjB,EAAqB;AACnB,mBAAO,EACL,GAAGE,KADE;AAELO,cAAAA,MAAM,EAAE,EACN,GAAGP,KAAK,CAACO,MADH;AAENC,gBAAAA,UAAU,EAAEH;AAFN;AAFH,aAAP;AAOD;;AACD,iBAAOL,KAAP;AACD,SAXM,CAAP;AAYD,OAbQ,CAAT;AAcD;AACF,GAnBD;;AAqBApC,EAAAA,SAAS,CAAC,MAAM;AACdwB,IAAAA,WAAW;AACZ,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;AAIA,SAAO;AACLT,IAAAA,MADK;AAELR,IAAAA,GAFK;AAGLM,IAAAA,OAHK;AAILyB,IAAAA;AAJK,GAAP;AAMD,CAlHI;;GAAMlC,M","sourcesContent":["import {useCallback, useEffect, useState} from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport MapService from \"../services/MapService\";\r\nimport {Sources, Layers} from \"../data/SpatialData\";\r\n\r\nexport const useMap = (ref: any, mapConfig: any) => {\r\n    const [map, setMap] = useState<typeof ref.current | null>(null);\r\n    const [mapStatus, setMapStatus] = useState({\r\n      map: {\r\n        created: false,\r\n        loaded: false,\r\n      },\r\n      sources: {\r\n        loaded: false,\r\n        added: false,\r\n      },\r\n      layers: {\r\n        loaded: false,\r\n        added: false,\r\n      },\r\n    });\r\n    const [sources, setSources] = useState([]);\r\n    const [layers, setLayers] = useState<typeof Layers[]>([]);\r\n  \r\n    useEffect(() => {\r\n      if (ref?.current && !mapStatus.map.created) {\r\n        const newMap = new mapboxgl.Map({\r\n          container: ref.current?? '',\r\n          ...mapConfig,\r\n        });\r\n        setMap(newMap);\r\n        setMapStatus((s) => ({\r\n          ...s,\r\n          map: {\r\n            ...s.map,\r\n            created: true,\r\n          },\r\n        }));\r\n        newMap.on(\"load\", () => {\r\n          setMapStatus((s) => ({\r\n            ...s,\r\n            map: {\r\n              ...s.map,\r\n              loaded: true,\r\n            },\r\n          }));\r\n        });\r\n      }\r\n    }, [ref, mapConfig, mapStatus.map.created]);\r\n  \r\n    const loadMapData = useCallback(() => {\r\n      const shouldLoadData =\r\n        !!map && mapStatus.map.loaded && !mapStatus.sources.loaded;\r\n      async function loadData() {\r\n        const fetchedSources: any = await MapService.getSources();\r\n        const fetchedLayers: any = await MapService.getLayers();\r\n        setSources(fetchedSources);\r\n        setLayers(fetchedLayers);\r\n        if (!mapStatus.sources.added) {\r\n          fetchedSources.forEach((source: { id: any; }) => {\r\n            const cleanedSource = { ...source };\r\n            delete cleanedSource.id;\r\n            map.addSource(source.id, cleanedSource);\r\n          });\r\n  \r\n          if (!mapStatus.layers.added) {\r\n            fetchedLayers.forEach((layer: any) => {\r\n              map.addLayer(layer);\r\n            });\r\n          }\r\n        }\r\n        setMapStatus((s) => ({\r\n          ...s,\r\n          sources: {\r\n            loaded: true,\r\n            added: true,\r\n          },\r\n          layers: {\r\n            loaded: true,\r\n            added: true,\r\n          },\r\n        }));\r\n      }\r\n      if (shouldLoadData) {\r\n        loadData();\r\n      }\r\n    }, [map, mapStatus.map.loaded, mapStatus.sources, mapStatus.layers]);\r\n  \r\n    const updateLayerVisibility = (id: any, visible: any) => {\r\n      if (!!map && !!map.getLayer(id)) {\r\n        const visibleValue = visible ? \"visible\" : \"none\";\r\n        map.setLayoutProperty(id, \"visibility\", visibleValue);\r\n        setLayers((s) => {\r\n          return s.map((layer: any) => {\r\n            if (layer.id === id) {\r\n              return {\r\n                ...layer,\r\n                layout: {\r\n                  ...layer.layout,\r\n                  visibility: visibleValue,\r\n                },\r\n              };\r\n            }\r\n            return layer;\r\n          });\r\n        });\r\n      }\r\n    };\r\n  \r\n    useEffect(() => {\r\n      loadMapData();\r\n    }, [loadMapData]);\r\n  \r\n    return {\r\n      layers,\r\n      map,\r\n      sources,\r\n      updateLayerVisibility,\r\n    };\r\n  };"]},"metadata":{},"sourceType":"module"}